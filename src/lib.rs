/* automatically generated by rust-bindgen */

#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl <T> __BindgenUnionField<T> {
    #[inline]
    pub fn new() -> Self { __BindgenUnionField(::std::marker::PhantomData) }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T { ::std::mem::transmute(self) }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T { ::std::mem::transmute(self) }
}
impl <T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self { Self::new() }
}
impl <T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self { Self::new() }
}
impl <T> ::std::marker::Copy for __BindgenUnionField<T> { }
impl <T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
pub const __llvm__: ::std::os::raw::c_uint = 1;
pub const __clang__: ::std::os::raw::c_uint = 1;
pub const __clang_major__: ::std::os::raw::c_uint = 3;
pub const __clang_minor__: ::std::os::raw::c_uint = 8;
pub const __clang_patchlevel__: ::std::os::raw::c_uint = 0;
pub const __clang_version__: &'static [u8; 31usize] =
    b"3.8.0 (tags/RELEASE_380/final)\x00";
pub const __GNUC_MINOR__: ::std::os::raw::c_uint = 2;
pub const __GNUC_PATCHLEVEL__: ::std::os::raw::c_uint = 1;
pub const __GNUC__: ::std::os::raw::c_uint = 4;
pub const __GXX_ABI_VERSION: ::std::os::raw::c_uint = 1002;
pub const __ATOMIC_RELAXED: ::std::os::raw::c_uint = 0;
pub const __ATOMIC_CONSUME: ::std::os::raw::c_uint = 1;
pub const __ATOMIC_ACQUIRE: ::std::os::raw::c_uint = 2;
pub const __ATOMIC_RELEASE: ::std::os::raw::c_uint = 3;
pub const __ATOMIC_ACQ_REL: ::std::os::raw::c_uint = 4;
pub const __ATOMIC_SEQ_CST: ::std::os::raw::c_uint = 5;
pub const __PRAGMA_REDEFINE_EXTNAME: ::std::os::raw::c_uint = 1;
pub const __VERSION__: &'static [u8; 54usize] =
    b"4.2.1 Compatible Clang 3.8.0 (tags/RELEASE_380/final)\x00";
pub const __CONSTANT_CFSTRINGS__: ::std::os::raw::c_uint = 1;
pub const __GXX_RTTI: ::std::os::raw::c_uint = 1;
pub const __ORDER_LITTLE_ENDIAN__: ::std::os::raw::c_uint = 1234;
pub const __ORDER_BIG_ENDIAN__: ::std::os::raw::c_uint = 4321;
pub const __ORDER_PDP_ENDIAN__: ::std::os::raw::c_uint = 3412;
pub const __BYTE_ORDER__: ::std::os::raw::c_uint = 1234;
pub const __LITTLE_ENDIAN__: ::std::os::raw::c_uint = 1;
pub const _LP64: ::std::os::raw::c_uint = 1;
pub const __LP64__: ::std::os::raw::c_uint = 1;
pub const __CHAR_BIT__: ::std::os::raw::c_uint = 8;
pub const __SCHAR_MAX__: ::std::os::raw::c_uint = 127;
pub const __SHRT_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __LONG_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __LONG_LONG_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __WCHAR_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INTMAX_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __SIZE_MAX__: ::std::os::raw::c_int = -1;
pub const __UINTMAX_MAX__: ::std::os::raw::c_int = -1;
pub const __PTRDIFF_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INTPTR_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __UINTPTR_MAX__: ::std::os::raw::c_int = -1;
pub const __SIZEOF_DOUBLE__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_FLOAT__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_INT__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_LONG__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_LONG_DOUBLE__: ::std::os::raw::c_uint = 16;
pub const __SIZEOF_LONG_LONG__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_POINTER__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_SHORT__: ::std::os::raw::c_uint = 2;
pub const __SIZEOF_PTRDIFF_T__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_SIZE_T__: ::std::os::raw::c_uint = 8;
pub const __SIZEOF_WCHAR_T__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_WINT_T__: ::std::os::raw::c_uint = 4;
pub const __SIZEOF_INT128__: ::std::os::raw::c_uint = 16;
pub const __INTMAX_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTMAX_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINTMAX_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTMAX_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTMAX_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTMAX_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INTMAX_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __PTRDIFF_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __PTRDIFF_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __PTRDIFF_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __INTPTR_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INTPTR_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __INTPTR_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __SIZE_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __SIZE_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __SIZE_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __SIZE_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __SIZE_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __WCHAR_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __WINT_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __SIG_ATOMIC_WIDTH__: ::std::os::raw::c_uint = 32;
pub const __SIG_ATOMIC_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINTMAX_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __UINTPTR_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINTPTR_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINTPTR_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINTPTR_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __UINTPTR_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __FLT_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __FLT_DIG__: ::std::os::raw::c_uint = 6;
pub const __FLT_DECIMAL_DIG__: ::std::os::raw::c_uint = 9;
pub const __FLT_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __FLT_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __FLT_MANT_DIG__: ::std::os::raw::c_uint = 24;
pub const __FLT_MAX_10_EXP__: ::std::os::raw::c_uint = 38;
pub const __FLT_MAX_EXP__: ::std::os::raw::c_uint = 128;
pub const __FLT_MIN_10_EXP__: ::std::os::raw::c_int = -37;
pub const __FLT_MIN_EXP__: ::std::os::raw::c_int = -125;
pub const __DBL_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __DBL_DIG__: ::std::os::raw::c_uint = 15;
pub const __DBL_DECIMAL_DIG__: ::std::os::raw::c_uint = 17;
pub const __DBL_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __DBL_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __DBL_MANT_DIG__: ::std::os::raw::c_uint = 53;
pub const __DBL_MAX_10_EXP__: ::std::os::raw::c_uint = 308;
pub const __DBL_MAX_EXP__: ::std::os::raw::c_uint = 1024;
pub const __DBL_MIN_10_EXP__: ::std::os::raw::c_int = -307;
pub const __DBL_MIN_EXP__: ::std::os::raw::c_int = -1021;
pub const __LDBL_HAS_DENORM__: ::std::os::raw::c_uint = 1;
pub const __LDBL_DIG__: ::std::os::raw::c_uint = 18;
pub const __LDBL_DECIMAL_DIG__: ::std::os::raw::c_uint = 21;
pub const __LDBL_HAS_INFINITY__: ::std::os::raw::c_uint = 1;
pub const __LDBL_HAS_QUIET_NAN__: ::std::os::raw::c_uint = 1;
pub const __LDBL_MANT_DIG__: ::std::os::raw::c_uint = 64;
pub const __LDBL_MAX_10_EXP__: ::std::os::raw::c_uint = 4932;
pub const __LDBL_MAX_EXP__: ::std::os::raw::c_uint = 16384;
pub const __LDBL_MIN_10_EXP__: ::std::os::raw::c_int = -4931;
pub const __LDBL_MIN_EXP__: ::std::os::raw::c_int = -16381;
pub const __POINTER_WIDTH__: ::std::os::raw::c_uint = 64;
pub const __BIGGEST_ALIGNMENT__: ::std::os::raw::c_uint = 16;
pub const __WINT_UNSIGNED__: ::std::os::raw::c_uint = 1;
pub const __INT8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __INT16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __INT32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __INT64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __UINT8_MAX__: ::std::os::raw::c_uint = 255;
pub const __INT8_MAX__: ::std::os::raw::c_uint = 127;
pub const __UINT16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __UINT16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __INT16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __UINT32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __UINT32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __INT32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __UINT64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __UINT64_MAX__: ::std::os::raw::c_int = -1;
pub const __INT64_MAX__: ::std::os::raw::c_ulonglong = 9223372036854775807;
pub const __INT_LEAST8_MAX__: ::std::os::raw::c_uint = 127;
pub const __INT_LEAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_LEAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_LEAST8_MAX__: ::std::os::raw::c_uint = 255;
pub const __UINT_LEAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_LEAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_LEAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_LEAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_LEAST16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_LEAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_LEAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_LEAST16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __UINT_LEAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_LEAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_LEAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_LEAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_LEAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INT_LEAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_LEAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_LEAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __UINT_LEAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_LEAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_LEAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_LEAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_LEAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __INT_LEAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_LEAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_LEAST64_MAX__: ::std::os::raw::c_int = -1;
pub const __UINT_LEAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_LEAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_LEAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_LEAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __INT_FAST8_MAX__: ::std::os::raw::c_uint = 127;
pub const __INT_FAST8_FMTd__: &'static [u8; 4usize] = b"hhd\x00";
pub const __INT_FAST8_FMTi__: &'static [u8; 4usize] = b"hhi\x00";
pub const __UINT_FAST8_MAX__: ::std::os::raw::c_uint = 255;
pub const __UINT_FAST8_FMTo__: &'static [u8; 4usize] = b"hho\x00";
pub const __UINT_FAST8_FMTu__: &'static [u8; 4usize] = b"hhu\x00";
pub const __UINT_FAST8_FMTx__: &'static [u8; 4usize] = b"hhx\x00";
pub const __UINT_FAST8_FMTX__: &'static [u8; 4usize] = b"hhX\x00";
pub const __INT_FAST16_MAX__: ::std::os::raw::c_uint = 32767;
pub const __INT_FAST16_FMTd__: &'static [u8; 3usize] = b"hd\x00";
pub const __INT_FAST16_FMTi__: &'static [u8; 3usize] = b"hi\x00";
pub const __UINT_FAST16_MAX__: ::std::os::raw::c_uint = 65535;
pub const __UINT_FAST16_FMTo__: &'static [u8; 3usize] = b"ho\x00";
pub const __UINT_FAST16_FMTu__: &'static [u8; 3usize] = b"hu\x00";
pub const __UINT_FAST16_FMTx__: &'static [u8; 3usize] = b"hx\x00";
pub const __UINT_FAST16_FMTX__: &'static [u8; 3usize] = b"hX\x00";
pub const __INT_FAST32_MAX__: ::std::os::raw::c_uint = 2147483647;
pub const __INT_FAST32_FMTd__: &'static [u8; 2usize] = b"d\x00";
pub const __INT_FAST32_FMTi__: &'static [u8; 2usize] = b"i\x00";
pub const __UINT_FAST32_MAX__: ::std::os::raw::c_uint = 4294967295;
pub const __UINT_FAST32_FMTo__: &'static [u8; 2usize] = b"o\x00";
pub const __UINT_FAST32_FMTu__: &'static [u8; 2usize] = b"u\x00";
pub const __UINT_FAST32_FMTx__: &'static [u8; 2usize] = b"x\x00";
pub const __UINT_FAST32_FMTX__: &'static [u8; 2usize] = b"X\x00";
pub const __INT_FAST64_MAX__: ::std::os::raw::c_ulonglong =
    9223372036854775807;
pub const __INT_FAST64_FMTd__: &'static [u8; 3usize] = b"ld\x00";
pub const __INT_FAST64_FMTi__: &'static [u8; 3usize] = b"li\x00";
pub const __UINT_FAST64_MAX__: ::std::os::raw::c_int = -1;
pub const __UINT_FAST64_FMTo__: &'static [u8; 3usize] = b"lo\x00";
pub const __UINT_FAST64_FMTu__: &'static [u8; 3usize] = b"lu\x00";
pub const __UINT_FAST64_FMTx__: &'static [u8; 3usize] = b"lx\x00";
pub const __UINT_FAST64_FMTX__: &'static [u8; 3usize] = b"lX\x00";
pub const __FINITE_MATH_ONLY__: ::std::os::raw::c_uint = 0;
pub const __GNUC_STDC_INLINE__: ::std::os::raw::c_uint = 1;
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL: ::std::os::raw::c_uint = 1;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_INT_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_LONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_LLONG_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __GCC_ATOMIC_POINTER_LOCK_FREE: ::std::os::raw::c_uint = 2;
pub const __NO_INLINE__: ::std::os::raw::c_uint = 1;
pub const __FLT_EVAL_METHOD__: ::std::os::raw::c_uint = 0;
pub const __FLT_RADIX__: ::std::os::raw::c_uint = 2;
pub const __DECIMAL_DIG__: ::std::os::raw::c_uint = 21;
pub const __amd64__: ::std::os::raw::c_uint = 1;
pub const __amd64: ::std::os::raw::c_uint = 1;
pub const __x86_64: ::std::os::raw::c_uint = 1;
pub const __x86_64__: ::std::os::raw::c_uint = 1;
pub const __k8: ::std::os::raw::c_uint = 1;
pub const __k8__: ::std::os::raw::c_uint = 1;
pub const __tune_k8__: ::std::os::raw::c_uint = 1;
pub const __NO_MATH_INLINES: ::std::os::raw::c_uint = 1;
pub const __FXSR__: ::std::os::raw::c_uint = 1;
pub const __SSE2__: ::std::os::raw::c_uint = 1;
pub const __SSE2_MATH__: ::std::os::raw::c_uint = 1;
pub const __SSE__: ::std::os::raw::c_uint = 1;
pub const __SSE_MATH__: ::std::os::raw::c_uint = 1;
pub const __MMX__: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4: ::std::os::raw::c_uint = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8: ::std::os::raw::c_uint = 1;
pub const unix: ::std::os::raw::c_uint = 1;
pub const __unix: ::std::os::raw::c_uint = 1;
pub const __unix__: ::std::os::raw::c_uint = 1;
pub const linux: ::std::os::raw::c_uint = 1;
pub const __linux: ::std::os::raw::c_uint = 1;
pub const __linux__: ::std::os::raw::c_uint = 1;
pub const __gnu_linux__: ::std::os::raw::c_uint = 1;
pub const __ELF__: ::std::os::raw::c_uint = 1;
pub const __STDC__: ::std::os::raw::c_uint = 1;
pub const __STDC_HOSTED__: ::std::os::raw::c_uint = 1;
pub const __STDC_VERSION__: ::std::os::raw::c_uint = 201112;
pub const __STDC_UTF_16__: ::std::os::raw::c_uint = 1;
pub const __STDC_UTF_32__: ::std::os::raw::c_uint = 1;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum idtype_t { P_ALL = 0, P_PID = 1, P_PGID = 2, }
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    assert_eq!(::std::mem::size_of::<__fsid_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __fsid_t ) ));
    assert_eq! (::std::mem::align_of::<__fsid_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __fsid_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __fsid_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __fsid_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __fsid_t {
    fn clone(&self) -> Self { *self }
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct wait {
    pub w_status: __BindgenUnionField<::std::os::raw::c_int>,
    pub __wait_terminated: __BindgenUnionField<wait__bindgen_ty_1>,
    pub __wait_stopped: __BindgenUnionField<wait__bindgen_ty_2>,
    pub bindgen_union_field: u32,
}
#[repr(C)]
#[derive(Copy)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_1: [u16; 2usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_1>() , 4usize , concat !
               ( "Size of: " , stringify ! ( wait__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<wait__bindgen_ty_1>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_1 ) ));
}
impl Clone for wait__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn __w_termsig(&self) -> ::std::os::raw::c_uint {
        let mask = 127usize as u32;
        let unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_termsig(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 127usize as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __w_coredump(&self) -> ::std::os::raw::c_uint {
        let mask = 128usize as u32;
        let unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 7usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_coredump(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 128usize as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 7usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __w_retcode(&self) -> ::std::os::raw::c_uint {
        let mask = 65280usize as u32;
        let unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_retcode(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 65280usize as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn new_bitfield_1(__w_termsig: ::std::os::raw::c_uint,
                          __w_coredump: ::std::os::raw::c_uint,
                          __w_retcode: ::std::os::raw::c_uint) -> u32 {
        let bitfield_unit_val =
            {
                let bitfield_unit_val =
                    {
                        let bitfield_unit_val = { 0 };
                        let __w_termsig = __w_termsig as u32 as u32;
                        let mask = 127usize as u32;
                        let __w_termsig = (__w_termsig << 0usize) & mask;
                        bitfield_unit_val | __w_termsig
                    };
                let __w_coredump = __w_coredump as u32 as u32;
                let mask = 128usize as u32;
                let __w_coredump = (__w_coredump << 7usize) & mask;
                bitfield_unit_val | __w_coredump
            };
        let __w_retcode = __w_retcode as u32 as u32;
        let mask = 65280usize as u32;
        let __w_retcode = (__w_retcode << 8usize) & mask;
        bitfield_unit_val | __w_retcode
    }
}
#[repr(C)]
#[derive(Copy)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_1: [u16; 2usize],
    pub __bindgen_align: [u32; 0usize],
}
#[test]
fn bindgen_test_layout_wait__bindgen_ty_2() {
    assert_eq!(::std::mem::size_of::<wait__bindgen_ty_2>() , 4usize , concat !
               ( "Size of: " , stringify ! ( wait__bindgen_ty_2 ) ));
    assert_eq! (::std::mem::align_of::<wait__bindgen_ty_2>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( wait__bindgen_ty_2 ) ));
}
impl Clone for wait__bindgen_ty_2 {
    fn clone(&self) -> Self { *self }
}
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn __w_stopval(&self) -> ::std::os::raw::c_uint {
        let mask = 255usize as u32;
        let unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 0usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_stopval(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 255usize as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 0usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn __w_stopsig(&self) -> ::std::os::raw::c_uint {
        let mask = 65280usize as u32;
        let unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        let val = (unit_field_val & mask) >> 8usize;
        unsafe { ::std::mem::transmute(val as u32) }
    }
    #[inline]
    pub fn set___w_stopsig(&mut self, val: ::std::os::raw::c_uint) {
        let mask = 65280usize as u32;
        let val = val as u32 as u32;
        let mut unit_field_val: u32 =
            unsafe { ::std::mem::transmute(self._bitfield_1) };
        unit_field_val &= !mask;
        unit_field_val |= (val << 8usize) & mask;
        self._bitfield_1 = unsafe { ::std::mem::transmute(unit_field_val) };
    }
    #[inline]
    pub fn new_bitfield_1(__w_stopval: ::std::os::raw::c_uint,
                          __w_stopsig: ::std::os::raw::c_uint) -> u32 {
        let bitfield_unit_val =
            {
                let bitfield_unit_val = { 0 };
                let __w_stopval = __w_stopval as u32 as u32;
                let mask = 255usize as u32;
                let __w_stopval = (__w_stopval << 0usize) & mask;
                bitfield_unit_val | __w_stopval
            };
        let __w_stopsig = __w_stopsig as u32 as u32;
        let mask = 65280usize as u32;
        let __w_stopsig = (__w_stopsig << 8usize) & mask;
        bitfield_unit_val | __w_stopsig
    }
}
#[test]
fn bindgen_test_layout_wait() {
    assert_eq!(::std::mem::size_of::<wait>() , 4usize , concat ! (
               "Size of: " , stringify ! ( wait ) ));
    assert_eq! (::std::mem::align_of::<wait>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( wait ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . w_status as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( w_status ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . __wait_terminated as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( __wait_terminated ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const wait ) ) . __wait_stopped as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( wait ) , "::" ,
                stringify ! ( __wait_stopped ) ));
}
impl Clone for wait {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __WAIT_STATUS {
    pub __uptr: __BindgenUnionField<*mut wait>,
    pub __iptr: __BindgenUnionField<*mut ::std::os::raw::c_int>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout___WAIT_STATUS() {
    assert_eq!(::std::mem::size_of::<__WAIT_STATUS>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __WAIT_STATUS ) ));
    assert_eq! (::std::mem::align_of::<__WAIT_STATUS>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __WAIT_STATUS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __WAIT_STATUS ) ) . __uptr as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __WAIT_STATUS ) , "::"
                , stringify ! ( __uptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __WAIT_STATUS ) ) . __iptr as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __WAIT_STATUS ) , "::"
                , stringify ! ( __iptr ) ));
}
impl Clone for __WAIT_STATUS {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_div_t() {
    assert_eq!(::std::mem::size_of::<div_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( div_t ) ));
    assert_eq! (::std::mem::align_of::<div_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( div_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const div_t ) ) . rem as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( div_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for div_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[test]
fn bindgen_test_layout_ldiv_t() {
    assert_eq!(::std::mem::size_of::<ldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( ldiv_t ) ));
    assert_eq! (::std::mem::align_of::<ldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( ldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . quot as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const ldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( ldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for ldiv_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[test]
fn bindgen_test_layout_lldiv_t() {
    assert_eq!(::std::mem::size_of::<lldiv_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( lldiv_t ) ));
    assert_eq! (::std::mem::align_of::<lldiv_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( lldiv_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . quot as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( quot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const lldiv_t ) ) . rem as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( lldiv_t ) , "::" ,
                stringify ! ( rem ) ));
}
impl Clone for lldiv_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn strtol(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtoul(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoq(__nptr: *const ::std::os::raw::c_char,
                  __endptr: *mut *mut ::std::os::raw::c_char,
                  __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtoll(__nptr: *const ::std::os::raw::c_char,
                   __endptr: *mut *mut ::std::os::raw::c_char,
                   __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoull(__nptr: *const ::std::os::raw::c_char,
                    __endptr: *mut *mut ::std::os::raw::c_char,
                    __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type time_t = __time_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulong;
pub type register_t = ::std::os::raw::c_long;
pub type __sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[test]
fn bindgen_test_layout___sigset_t() {
    assert_eq!(::std::mem::size_of::<__sigset_t>() , 128usize , concat ! (
               "Size of: " , stringify ! ( __sigset_t ) ));
    assert_eq! (::std::mem::align_of::<__sigset_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __sigset_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __sigset_t ) ) . __val as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __sigset_t ) , "::" ,
                stringify ! ( __val ) ));
}
impl Clone for __sigset_t {
    fn clone(&self) -> Self { *self }
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[test]
fn bindgen_test_layout_timespec() {
    assert_eq!(::std::mem::size_of::<timespec>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timespec ) ));
    assert_eq! (::std::mem::align_of::<timespec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timespec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timespec ) ) . tv_nsec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timespec ) , "::" ,
                stringify ! ( tv_nsec ) ));
}
impl Clone for timespec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[test]
fn bindgen_test_layout_timeval() {
    assert_eq!(::std::mem::size_of::<timeval>() , 16usize , concat ! (
               "Size of: " , stringify ! ( timeval ) ));
    assert_eq! (::std::mem::align_of::<timeval>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( timeval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_sec as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const timeval ) ) . tv_usec as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( timeval ) , "::" ,
                stringify ! ( tv_usec ) ));
}
impl Clone for timeval {
    fn clone(&self) -> Self { *self }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[test]
fn bindgen_test_layout_fd_set() {
    assert_eq!(::std::mem::size_of::<fd_set>() , 128usize , concat ! (
               "Size of: " , stringify ! ( fd_set ) ));
    assert_eq! (::std::mem::align_of::<fd_set>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( fd_set ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const fd_set ) ) . __fds_bits as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( fd_set ) , "::" ,
                stringify ! ( __fds_bits ) ));
}
impl Clone for fd_set {
    fn clone(&self) -> Self { *self }
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut timeval) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pselect(__nfds: ::std::os::raw::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const timespec, __sigmask: *const __sigset_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gnu_dev_major(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_minor(__dev: ::std::os::raw::c_ulonglong)
     -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn gnu_dev_makedev(__major: ::std::os::raw::c_uint,
                           __minor: ::std::os::raw::c_uint)
     -> ::std::os::raw::c_ulonglong;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_attr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[test]
fn bindgen_test_layout_pthread_attr_t() {
    assert_eq!(::std::mem::size_of::<pthread_attr_t>() , 56usize , concat ! (
               "Size of: " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_attr_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_attr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_attr_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_attr_t ) , "::"
                , stringify ! ( __align ) ));
}
impl Clone for pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[test]
fn bindgen_test_layout___pthread_internal_list() {
    assert_eq!(::std::mem::size_of::<__pthread_internal_list>() , 16usize ,
               concat ! (
               "Size of: " , stringify ! ( __pthread_internal_list ) ));
    assert_eq! (::std::mem::align_of::<__pthread_internal_list>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( __pthread_internal_list ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_list ) ) . __prev as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_internal_list
                ) , "::" , stringify ! ( __prev ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __pthread_internal_list ) ) . __next as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __pthread_internal_list
                ) , "::" , stringify ! ( __next ) ));
}
impl Clone for __pthread_internal_list {
    fn clone(&self) -> Self { *self }
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t {
    pub __data: __BindgenUnionField<pthread_mutex_t___pthread_mutex_s>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 40usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 5usize],
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutex_t___pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[test]
fn bindgen_test_layout_pthread_mutex_t___pthread_mutex_s() {
    assert_eq!(::std::mem::size_of::<pthread_mutex_t___pthread_mutex_s>() ,
               40usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t___pthread_mutex_s )
               ));
    assert_eq! (::std::mem::align_of::<pthread_mutex_t___pthread_mutex_s>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __lock as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __count as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __owner as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __owner ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __nusers as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __nusers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __kind as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __kind ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __spins as * const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __spins ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __elision as * const _ as usize } , 22usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __elision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t___pthread_mutex_s ) ) .
                __list as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_mutex_t___pthread_mutex_s ) , "::" , stringify ! (
                __list ) ));
}
impl Clone for pthread_mutex_t___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_mutex_t() {
    assert_eq!(::std::mem::size_of::<pthread_mutex_t>() , 40usize , concat ! (
               "Size of: " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_mutex_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_mutex_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutex_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutex_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_mutexattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_mutexattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_mutexattr_t>() , 4usize , concat
               ! ( "Size of: " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_mutexattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_mutexattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_mutexattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_mutexattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t {
    pub __data: __BindgenUnionField<pthread_cond_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 48usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_longlong>,
    pub bindgen_union_field: [u64; 6usize],
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_cond_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __futex: ::std::os::raw::c_uint,
    pub __total_seq: ::std::os::raw::c_ulonglong,
    pub __wakeup_seq: ::std::os::raw::c_ulonglong,
    pub __woken_seq: ::std::os::raw::c_ulonglong,
    pub __mutex: *mut ::std::os::raw::c_void,
    pub __nwaiters: ::std::os::raw::c_uint,
    pub __broadcast_seq: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_cond_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t__bindgen_ty_1>() , 48usize
               , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) . __lock
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __lock )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __futex as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __futex
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __total_seq as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __total_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __wakeup_seq as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __wakeup_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __woken_seq as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __woken_seq ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __mutex as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! ( __mutex
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __nwaiters as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nwaiters ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t__bindgen_ty_1 ) ) .
                __broadcast_seq as * const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_cond_t__bindgen_ty_1 ) , "::" , stringify ! (
                __broadcast_seq ) ));
}
impl Clone for pthread_cond_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_cond_t() {
    assert_eq!(::std::mem::size_of::<pthread_cond_t>() , 48usize , concat ! (
               "Size of: " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_cond_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_cond_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __size as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_cond_t ) ) . __align as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_cond_t ) , "::"
                , stringify ! ( __align ) ));
}
impl Clone for pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_condattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_condattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_condattr_t>() , 4usize , concat !
               ( "Size of: " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_condattr_t>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_condattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_condattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_condattr_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t {
    pub __data: __BindgenUnionField<pthread_rwlock_t__bindgen_ty_1>,
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 56usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 7usize],
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlock_t__bindgen_ty_1 {
    pub __lock: ::std::os::raw::c_int,
    pub __nr_readers: ::std::os::raw::c_uint,
    pub __readers_wakeup: ::std::os::raw::c_uint,
    pub __writer_wakeup: ::std::os::raw::c_uint,
    pub __nr_readers_queued: ::std::os::raw::c_uint,
    pub __nr_writers_queued: ::std::os::raw::c_uint,
    pub __writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<pthread_rwlock_t__bindgen_ty_1>() ,
               56usize , concat ! (
               "Size of: " , stringify ! ( pthread_rwlock_t__bindgen_ty_1 )
               ));
    assert_eq! (::std::mem::align_of::<pthread_rwlock_t__bindgen_ty_1>() ,
                8usize , concat ! (
                "Alignment of " , stringify ! ( pthread_rwlock_t__bindgen_ty_1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __lock as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __lock
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __nr_readers as * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nr_readers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __readers_wakeup as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __readers_wakeup ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writer_wakeup as * const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writer_wakeup ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __nr_readers_queued as * const _ as usize } , 16usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nr_readers_queued ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __nr_writers_queued as * const _ as usize } , 20usize , concat
                ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __nr_writers_queued ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __writer as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __writer ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __shared as * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __shared ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __rwelision as * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __rwelision ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad1 as * const _ as usize } , 33usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad1
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __pad2 as * const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! ( __pad2
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t__bindgen_ty_1 ) ) .
                __flags as * const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! (
                pthread_rwlock_t__bindgen_ty_1 ) , "::" , stringify ! (
                __flags ) ));
}
impl Clone for pthread_rwlock_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout_pthread_rwlock_t() {
    assert_eq!(::std::mem::size_of::<pthread_rwlock_t>() , 56usize , concat !
               ( "Size of: " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_rwlock_t>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( pthread_rwlock_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __data as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlock_t ) ) . __align as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlock_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_rwlockattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 8usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: u64,
}
#[test]
fn bindgen_test_layout_pthread_rwlockattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_rwlockattr_t>() , 8usize , concat
               ! ( "Size of: " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_rwlockattr_t>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_rwlockattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_rwlockattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_rwlockattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct pthread_barrier_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 32usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_long>,
    pub bindgen_union_field: [u64; 4usize],
}
#[test]
fn bindgen_test_layout_pthread_barrier_t() {
    assert_eq!(::std::mem::size_of::<pthread_barrier_t>() , 32usize , concat !
               ( "Size of: " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (::std::mem::align_of::<pthread_barrier_t>() , 8usize , concat
                ! ( "Alignment of " , stringify ! ( pthread_barrier_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __size as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrier_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrier_t ) ,
                "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrier_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct pthread_barrierattr_t {
    pub __size: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub __align: __BindgenUnionField<::std::os::raw::c_int>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout_pthread_barrierattr_t() {
    assert_eq!(::std::mem::size_of::<pthread_barrierattr_t>() , 4usize ,
               concat ! ( "Size of: " , stringify ! ( pthread_barrierattr_t )
               ));
    assert_eq! (::std::mem::align_of::<pthread_barrierattr_t>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( pthread_barrierattr_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const pthread_barrierattr_t ) ) . __align as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( pthread_barrierattr_t )
                , "::" , stringify ! ( __align ) ));
}
impl Clone for pthread_barrierattr_t {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn initstate(__seed: ::std::os::raw::c_uint,
                     __statebuf: *mut ::std::os::raw::c_char,
                     __statelen: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[test]
fn bindgen_test_layout_random_data() {
    assert_eq!(::std::mem::size_of::<random_data>() , 48usize , concat ! (
               "Size of: " , stringify ! ( random_data ) ));
    assert_eq! (::std::mem::align_of::<random_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( random_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . fptr as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( fptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rptr as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . state as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_type as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_type ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_deg as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_deg ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . rand_sep as * const _
                as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( rand_sep ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const random_data ) ) . end_ptr as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( random_data ) , "::" ,
                stringify ! ( end_ptr ) ));
}
impl Clone for random_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: ::std::os::raw::c_uint, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate_r(__seed: ::std::os::raw::c_uint,
                       __statebuf: *mut ::std::os::raw::c_char,
                       __statelen: usize, __buf: *mut random_data)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut ::std::os::raw::c_char,
                      __buf: *mut random_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort)
     -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Copy)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[test]
fn bindgen_test_layout_drand48_data() {
    assert_eq!(::std::mem::size_of::<drand48_data>() , 24usize , concat ! (
               "Size of: " , stringify ! ( drand48_data ) ));
    assert_eq! (::std::mem::align_of::<drand48_data>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( drand48_data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __x as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __old_x as * const _
                as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __old_x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __c as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __c ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __init as * const _ as
                usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __init ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const drand48_data ) ) . __a as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( drand48_data ) , "::" ,
                stringify ! ( __a ) ));
}
impl Clone for drand48_data {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn erand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data, __result: *mut f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn jrand48_r(__xsubi: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data,
                     __result: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: ::std::os::raw::c_long,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut ::std::os::raw::c_ushort,
                    __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut ::std::os::raw::c_ushort,
                     __buffer: *mut drand48_data) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut ::std::os::raw::c_void, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn cfree(__ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn alloca(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(__memptr: *mut *mut ::std::os::raw::c_void,
                          __alignment: usize, __size: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn abort();
}
extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func:
                             ::std::option::Option<unsafe extern "C" fn()>)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn on_exit(__func:
                       ::std::option::Option<unsafe extern "C" fn(__status:
                                                                      ::std::os::raw::c_int,
                                                                  __arg:
                                                                      *mut ::std::os::raw::c_void)>,
                   __arg: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int);
}
extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setenv(__name: *const ::std::os::raw::c_char,
                  __value: *const ::std::os::raw::c_char,
                  __replace: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut ::std::os::raw::c_char,
                    __suffixlen: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn realpath(__name: *const ::std::os::raw::c_char,
                    __resolved: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t =
    ::std::option::Option<unsafe extern "C" fn(arg1:
                                                   *const ::std::os::raw::c_void,
                                               arg2:
                                                   *const ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn bsearch(__key: *const ::std::os::raw::c_void,
                   __base: *const ::std::os::raw::c_void, __nmemb: usize,
                   __size: usize, __compar: __compar_fn_t)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut ::std::os::raw::c_void, __nmemb: usize,
                 __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong)
     -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int)
     -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long,
                __denom: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: ::std::os::raw::c_longlong,
                 __denom: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __decpt: *mut ::std::os::raw::c_int,
                __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qecvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qfcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __decpt: *mut ::std::os::raw::c_int,
                 __sign: *mut ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn qgcvt(__value: f64, __ndigit: ::std::os::raw::c_int,
                 __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                  __decpt: *mut ::std::os::raw::c_int,
                  __sign: *mut ::std::os::raw::c_int,
                  __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qecvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qfcvt_r(__value: f64, __ndigit: ::std::os::raw::c_int,
                   __decpt: *mut ::std::os::raw::c_int,
                   __sign: *mut ::std::os::raw::c_int,
                   __buf: *mut ::std::os::raw::c_char, __len: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                  __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t,
                    __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getsubopt(__optionp: *mut *mut ::std::os::raw::c_char,
                     __tokens: *const *const ::std::os::raw::c_char,
                     __valuep: *mut *mut ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub __pad1: *mut ::std::os::raw::c_void,
    pub __pad2: *mut ::std::os::raw::c_void,
    pub __pad3: *mut ::std::os::raw::c_void,
    pub __pad4: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[test]
fn bindgen_test_layout__IO_FILE() {
    assert_eq!(::std::mem::size_of::<_IO_FILE>() , 216usize , concat ! (
               "Size of: " , stringify ! ( _IO_FILE ) ));
    assert_eq! (::std::mem::align_of::<_IO_FILE>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_FILE ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_ptr as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_end as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_read_base as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_read_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_base as * const
                _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_ptr as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_ptr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_write_end as * const _
                as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_write_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_base as * const _
                as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_buf_end as * const _
                as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_buf_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_base as * const _
                as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_backup_base as * const
                _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_backup_base ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _IO_save_end as * const _
                as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _IO_save_end ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _markers as * const _ as
                usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _markers ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _chain as * const _ as
                usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _chain ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _fileno as * const _ as
                usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _fileno ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _flags2 as * const _ as
                usize } , 116usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _flags2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _old_offset as * const _
                as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _old_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _cur_column as * const _
                as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _cur_column ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _vtable_offset as * const
                _ as usize } , 130usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _vtable_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _shortbuf as * const _ as
                usize } , 131usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _shortbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _lock as * const _ as
                usize } , 136usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _lock ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _offset as * const _ as
                usize } , 144usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad1 as * const _ as
                usize } , 152usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad2 as * const _ as
                usize } , 160usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad3 as * const _ as
                usize } , 168usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad4 as * const _ as
                usize } , 176usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad4 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . __pad5 as * const _ as
                usize } , 184usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( __pad5 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _mode as * const _ as
                usize } , 192usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _mode ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_FILE ) ) . _unused2 as * const _ as
                usize } , 196usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_FILE ) , "::" ,
                stringify ! ( _unused2 ) ));
}
impl Clone for _IO_FILE {
    fn clone(&self) -> Self { *self }
}
pub type FILE = _IO_FILE;
pub type __FILE = _IO_FILE;
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy)]
pub struct __mbstate_t__bindgen_ty_1 {
    pub __wch: __BindgenUnionField<::std::os::raw::c_uint>,
    pub __wchb: __BindgenUnionField<[::std::os::raw::c_char; 4usize]>,
    pub bindgen_union_field: u32,
}
#[test]
fn bindgen_test_layout___mbstate_t__bindgen_ty_1() {
    assert_eq!(::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() , 4usize ,
               concat ! (
               "Size of: " , stringify ! ( __mbstate_t__bindgen_ty_1 ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( __mbstate_t__bindgen_ty_1 )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wch as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wch ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t__bindgen_ty_1 ) ) . __wchb as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                __mbstate_t__bindgen_ty_1 ) , "::" , stringify ! ( __wchb )
                ));
}
impl Clone for __mbstate_t__bindgen_ty_1 {
    fn clone(&self) -> Self { *self }
}
#[test]
fn bindgen_test_layout___mbstate_t() {
    assert_eq!(::std::mem::size_of::<__mbstate_t>() , 8usize , concat ! (
               "Size of: " , stringify ! ( __mbstate_t ) ));
    assert_eq! (::std::mem::align_of::<__mbstate_t>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __mbstate_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __count as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __count ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __mbstate_t ) ) . __value as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __mbstate_t ) , "::" ,
                stringify ! ( __value ) ));
}
impl Clone for __mbstate_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos_t() {
    assert_eq!(::std::mem::size_of::<_G_fpos_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _G_fpos_t ) ));
    assert_eq! (::std::mem::align_of::<_G_fpos_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _G_fpos_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos_t ) ) . __pos as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" ,
                stringify ! ( __pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos_t ) ) . __state as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos_t ) , "::" ,
                stringify ! ( __state ) ));
}
impl Clone for _G_fpos_t {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[test]
fn bindgen_test_layout__G_fpos64_t() {
    assert_eq!(::std::mem::size_of::<_G_fpos64_t>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _G_fpos64_t ) ));
    assert_eq! (::std::mem::align_of::<_G_fpos64_t>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _G_fpos64_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos64_t ) ) . __pos as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" ,
                stringify ! ( __pos ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _G_fpos64_t ) ) . __state as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _G_fpos64_t ) , "::" ,
                stringify ! ( __state ) ));
}
impl Clone for _G_fpos64_t {
    fn clone(&self) -> Self { *self }
}
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_jump_t {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct _IO_marker {
    pub _next: *mut _IO_marker,
    pub _sbuf: *mut _IO_FILE,
    pub _pos: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout__IO_marker() {
    assert_eq!(::std::mem::size_of::<_IO_marker>() , 24usize , concat ! (
               "Size of: " , stringify ! ( _IO_marker ) ));
    assert_eq! (::std::mem::align_of::<_IO_marker>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _IO_marker ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _next as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _sbuf as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _sbuf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _IO_marker ) ) . _pos as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _IO_marker ) , "::" ,
                stringify ! ( _pos ) ));
}
impl Clone for _IO_marker {
    fn clone(&self) -> Self { *self }
}
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum __codecvt_result {
    __codecvt_ok = 0,
    __codecvt_partial = 1,
    __codecvt_error = 2,
    __codecvt_noconv = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE_plus {
    _unused: [u8; 0],
}
extern "C" {
    #[link_name = "_IO_2_1_stdin_"]
    pub static mut _IO_2_1_stdin_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stdout_"]
    pub static mut _IO_2_1_stdout_: _IO_FILE_plus;
}
extern "C" {
    #[link_name = "_IO_2_1_stderr_"]
    pub static mut _IO_2_1_stderr_: _IO_FILE_plus;
}
pub type __io_read_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *mut ::std::os::raw::c_char,
                                               __nbytes: usize) -> __ssize_t>;
pub type __io_write_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __buf:
                                                   *const ::std::os::raw::c_char,
                                               __n: usize) -> __ssize_t>;
pub type __io_seek_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void,
                                               __pos: *mut __off64_t,
                                               __w: ::std::os::raw::c_int)
                              -> ::std::os::raw::c_int>;
pub type __io_close_fn =
    ::std::option::Option<unsafe extern "C" fn(__cookie:
                                                   *mut ::std::os::raw::c_void)
                              -> ::std::os::raw::c_int>;
extern "C" {
    pub fn __underflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __uflow(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_getc(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_putc(__c: ::std::os::raw::c_int, __fp: *mut _IO_FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_feof(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_ferror(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_peekc_locked(__fp: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_flockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_funlockfile(arg1: *mut _IO_FILE);
}
extern "C" {
    pub fn _IO_ftrylockfile(arg1: *mut _IO_FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfscanf(arg1: *mut _IO_FILE,
                       arg2: *const ::std::os::raw::c_char,
                       arg3: *mut __va_list_tag,
                       arg4: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_vfprintf(arg1: *mut _IO_FILE,
                        arg2: *const ::std::os::raw::c_char,
                        arg3: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _IO_padn(arg1: *mut _IO_FILE, arg2: ::std::os::raw::c_int,
                    arg3: __ssize_t) -> __ssize_t;
}
extern "C" {
    pub fn _IO_sgetn(arg1: *mut _IO_FILE, arg2: *mut ::std::os::raw::c_void,
                     arg3: usize) -> usize;
}
extern "C" {
    pub fn _IO_seekoff(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int,
                       arg4: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_seekpos(arg1: *mut _IO_FILE, arg2: __off64_t,
                       arg3: ::std::os::raw::c_int) -> __off64_t;
}
extern "C" {
    pub fn _IO_free_backup_area(arg1: *mut _IO_FILE);
}
pub type va_list = __gnuc_va_list;
pub type fpos_t = _G_fpos_t;
extern "C" {
    #[link_name = "stdin"]
    pub static mut stdin: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stdout"]
    pub static mut stdout: *mut _IO_FILE;
}
extern "C" {
    #[link_name = "stderr"]
    pub static mut stderr: *mut _IO_FILE;
}
extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(__old: *const ::std::os::raw::c_char,
                  __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameat(__oldfd: ::std::os::raw::c_int,
                    __old: *const ::std::os::raw::c_char,
                    __newfd: ::std::os::raw::c_int,
                    __new: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const ::std::os::raw::c_char,
                   __pfx: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(__filename: *const ::std::os::raw::c_char,
                   __modes: *const ::std::os::raw::c_char,
                   __stream: *mut FILE) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int,
                  __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(__s: *mut ::std::os::raw::c_void, __len: usize,
                    __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut ::std::os::raw::c_char,
                          __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                   __modes: ::std::os::raw::c_int, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char,
                     __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(__s: *mut ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                    __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(__s: *mut ::std::os::raw::c_char, __maxlen: usize,
                     __format: *const ::std::os::raw::c_char,
                     __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(__fd: ::std::os::raw::c_int,
                    __fmt: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(__fd: ::std::os::raw::c_int,
                   __fmt: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const ::std::os::raw::c_char,
                  __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_sscanf"]
    pub fn sscanf1(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char, ...)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char,
                  __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(__s: *const ::std::os::raw::c_char,
                   __format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vfscanf"]
    pub fn vfscanf1(__s: *mut FILE, __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vscanf"]
    pub fn vscanf1(__format: *const ::std::os::raw::c_char,
                   __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__isoc99_vsscanf"]
    pub fn vsscanf1(__s: *const ::std::os::raw::c_char,
                    __format: *const ::std::os::raw::c_char,
                    __arg: *mut __va_list_tag) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(__s: *mut ::std::os::raw::c_char, __n: ::std::os::raw::c_int,
                 __stream: *mut FILE) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                      __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                      __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(__lineptr: *mut *mut ::std::os::raw::c_char,
                    __n: *mut usize, __delimiter: ::std::os::raw::c_int,
                    __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn getline(__lineptr: *mut *mut ::std::os::raw::c_char,
                   __n: *mut usize, __stream: *mut FILE) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                 __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite(__ptr: *const ::std::os::raw::c_void, __size: usize,
                  __n: usize, __s: *mut FILE) -> usize;
}
extern "C" {
    pub fn fread_unlocked(__ptr: *mut ::std::os::raw::c_void, __size: usize,
                          __n: usize, __stream: *mut FILE) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(__ptr: *const ::std::os::raw::c_void,
                           __size: usize, __n: usize, __stream: *mut FILE)
     -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: ::std::os::raw::c_long,
                 __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t,
                  __whence: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "sys_nerr"]
    pub static mut sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "sys_errlist"]
    pub static mut sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(__command: *const ::std::os::raw::c_char,
                 __modes: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinf(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnan(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassify(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinff(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: ::std::os::raw::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: f64) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut ::std::os::raw::c_int)
     -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanl(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2l(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanl(__x: f64) -> f64;
}
extern "C" {
    pub fn coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __coshl(__x: f64) -> f64;
}
extern "C" {
    pub fn sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn __acoshl(__x: f64) -> f64;
}
extern "C" {
    pub fn asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinhl(__x: f64) -> f64;
}
extern "C" {
    pub fn atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanhl(__x: f64) -> f64;
}
extern "C" {
    pub fn expl(__x: f64) -> f64;
}
extern "C" {
    pub fn __expl(__x: f64) -> f64;
}
extern "C" {
    pub fn frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __frexpl(__x: f64, __exponent: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __ldexpl(__x: f64, __exponent: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn logl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logl(__x: f64) -> f64;
}
extern "C" {
    pub fn log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10l(__x: f64) -> f64;
}
extern "C" {
    pub fn modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modfl(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1l(__x: f64) -> f64;
}
extern "C" {
    pub fn log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1pl(__x: f64) -> f64;
}
extern "C" {
    pub fn logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn __logbl(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2l(__x: f64) -> f64;
}
extern "C" {
    pub fn log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2l(__x: f64) -> f64;
}
extern "C" {
    pub fn powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __powl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypotl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrtl(__x: f64) -> f64;
}
extern "C" {
    pub fn ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceill(__x: f64) -> f64;
}
extern "C" {
    pub fn fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabsl(__x: f64) -> f64;
}
extern "C" {
    pub fn floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn __floorl(__x: f64) -> f64;
}
extern "C" {
    pub fn fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmodl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isinfl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn finitel(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __dreml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn __significandl(__x: f64) -> f64;
}
extern "C" {
    pub fn copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysignl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __nanl(__tagb: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn __isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn isnanl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jnl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0l(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __ynl(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __lgammal_r(arg1: f64, __signgamp: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __rintl(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafterl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nexttowardl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainderl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn __scalbnl(__x: f64, __n: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn __scalblnl(__x: f64, __n: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyintl(__x: f64) -> f64;
}
extern "C" {
    pub fn roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn __roundl(__x: f64) -> f64;
}
extern "C" {
    pub fn truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn __truncl(__x: f64) -> f64;
}
extern "C" {
    pub fn remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn __remquol(__x: f64, __y: f64, __quo: *mut ::std::os::raw::c_int)
     -> f64;
}
extern "C" {
    pub fn lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lrintl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn __lroundl(__x: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdiml(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmaxl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fminl(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __signbitl(__value: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fmal(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalbl(__x: f64, __n: f64) -> f64;
}
extern "C" {
    #[link_name = "signgam"]
    pub static mut signgam: ::std::os::raw::c_int;
}
pub const FP_NAN: _bindgen_ty_1 = _bindgen_ty_1::FP_NAN;
pub const FP_INFINITE: _bindgen_ty_1 = _bindgen_ty_1::FP_INFINITE;
pub const FP_ZERO: _bindgen_ty_1 = _bindgen_ty_1::FP_ZERO;
pub const FP_SUBNORMAL: _bindgen_ty_1 = _bindgen_ty_1::FP_SUBNORMAL;
pub const FP_NORMAL: _bindgen_ty_1 = _bindgen_ty_1::FP_NORMAL;
#[repr(u32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _bindgen_ty_1 {
    FP_NAN = 0,
    FP_INFINITE = 1,
    FP_ZERO = 2,
    FP_SUBNORMAL = 3,
    FP_NORMAL = 4,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum _LIB_VERSION_TYPE {
    _IEEE_ = -1,
    _SVID_ = 0,
    _XOPEN_ = 1,
    _POSIX_ = 2,
    _ISOC_ = 3,
}
extern "C" {
    #[link_name = "_LIB_VERSION"]
    pub static mut _LIB_VERSION: _LIB_VERSION_TYPE;
}
#[repr(C)]
#[derive(Copy)]
pub struct exception {
    pub type_: ::std::os::raw::c_int,
    pub name: *mut ::std::os::raw::c_char,
    pub arg1: f64,
    pub arg2: f64,
    pub retval: f64,
}
#[test]
fn bindgen_test_layout_exception() {
    assert_eq!(::std::mem::size_of::<exception>() , 40usize , concat ! (
               "Size of: " , stringify ! ( exception ) ));
    assert_eq! (::std::mem::align_of::<exception>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( exception ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const exception ) ) . type_ as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( exception ) , "::" ,
                stringify ! ( type_ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const exception ) ) . name as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( exception ) , "::" ,
                stringify ! ( name ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const exception ) ) . arg1 as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( exception ) , "::" ,
                stringify ! ( arg1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const exception ) ) . arg2 as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( exception ) , "::" ,
                stringify ! ( arg2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const exception ) ) . retval as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( exception ) , "::" ,
                stringify ! ( retval ) ));
}
impl Clone for exception {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn matherr(__exc: *mut exception) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_tm() {
    assert_eq!(::std::mem::size_of::<tm>() , 56usize , concat ! (
               "Size of: " , stringify ! ( tm ) ));
    assert_eq! (::std::mem::align_of::<tm>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( tm ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_sec as * const _ as usize } ,
                0usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_sec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_min as * const _ as usize } ,
                4usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_min ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_hour as * const _ as usize }
                , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_hour ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_mday as * const _ as usize }
                , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_mday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_mon as * const _ as usize } ,
                16usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_mon ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_year as * const _ as usize }
                , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_year ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_wday as * const _ as usize }
                , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_wday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_yday as * const _ as usize }
                , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_yday ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_isdst as * const _ as usize }
                , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_isdst ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_gmtoff as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_gmtoff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const tm ) ) . tm_zone as * const _ as usize }
                , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( tm ) , "::" , stringify
                ! ( tm_zone ) ));
}
impl Clone for tm {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
#[test]
fn bindgen_test_layout_itimerspec() {
    assert_eq!(::std::mem::size_of::<itimerspec>() , 32usize , concat ! (
               "Size of: " , stringify ! ( itimerspec ) ));
    assert_eq! (::std::mem::align_of::<itimerspec>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( itimerspec ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerspec ) ) . it_interval as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerspec ) , "::" ,
                stringify ! ( it_interval ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const itimerspec ) ) . it_value as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( itimerspec ) , "::" ,
                stringify ! ( it_value ) ));
}
impl Clone for itimerspec {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent {
    _unused: [u8; 0],
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                    __format: *const ::std::os::raw::c_char, __tp: *const tm)
     -> usize;
}
#[repr(C)]
#[derive(Copy)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    assert_eq!(::std::mem::size_of::<__locale_struct>() , 232usize , concat !
               ( "Size of: " , stringify ! ( __locale_struct ) ));
    assert_eq! (::std::mem::align_of::<__locale_struct>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( __locale_struct ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __locales as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __locales ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_b as *
                const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_b ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_tolower as
                * const _ as usize } , 112usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_tolower ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __ctype_toupper as
                * const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __ctype_toupper ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __locale_struct ) ) . __names as * const
                _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( __locale_struct ) ,
                "::" , stringify ! ( __names ) ));
}
impl Clone for __locale_struct {
    fn clone(&self) -> Self { *self }
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strftime_l(__s: *mut ::std::os::raw::c_char, __maxsize: usize,
                      __format: *const ::std::os::raw::c_char,
                      __tp: *const tm, __loc: __locale_t) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__tzname"]
    pub static mut __tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    #[link_name = "__daylight"]
    pub static mut __daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "__timezone"]
    pub static mut __timezone: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "tzname"]
    pub static mut tzname: [*mut ::std::os::raw::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    #[link_name = "daylight"]
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "timezone"]
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub fn stime(__when: *const time_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec,
                     __remaining: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_nanosleep(__clock_id: clockid_t,
                           __flags: ::std::os::raw::c_int,
                           __req: *const timespec, __rem: *mut timespec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut sigevent,
                        __timerid: *mut timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_settime(__timerid: timer_t, __flags: ::std::os::raw::c_int,
                         __value: *const itimerspec,
                         __ovalue: *mut itimerspec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(__dest: *mut ::std::os::raw::c_void,
                  __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memccpy(__dest: *mut ::std::os::raw::c_void,
                   __src: *const ::std::os::raw::c_void,
                   __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(__s: *mut ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(__s1: *const ::std::os::raw::c_void,
                  __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memchr(__s: *const ::std::os::raw::c_void,
                  __c: ::std::os::raw::c_int, __n: usize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcat(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncat(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(__s1: *const ::std::os::raw::c_char,
                  __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncmp(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(__s1: *const ::std::os::raw::c_char,
                   __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strcoll_l(__s1: *const ::std::os::raw::c_char,
                     __s2: *const ::std::os::raw::c_char, __l: __locale_t)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize,
                     __l: __locale_t) -> usize;
}
extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(__string: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(__s: *const ::std::os::raw::c_char,
                   __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(__s: *const ::std::os::raw::c_char,
                   __reject: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strspn(__s: *const ::std::os::raw::c_char,
                  __accept: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strpbrk(__s: *const ::std::os::raw::c_char,
                   __accept: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strstr(__haystack: *const ::std::os::raw::c_char,
                  __needle: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(__s: *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __strtok_r(__s: *mut ::std::os::raw::c_char,
                      __delim: *const ::std::os::raw::c_char,
                      __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok_r(__s: *mut ::std::os::raw::c_char,
                    __delim: *const ::std::os::raw::c_char,
                    __save_ptr: *mut *mut ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize)
     -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "__xpg_strerror_r"]
    pub fn strerror_r(__errnum: ::std::os::raw::c_int,
                      __buf: *mut ::std::os::raw::c_char, __buflen: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strerror_l(__errnum: ::std::os::raw::c_int, __l: __locale_t)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcopy(__src: *const ::std::os::raw::c_void,
                 __dest: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
extern "C" {
    pub fn bcmp(__s1: *const ::std::os::raw::c_void,
                __s2: *const ::std::os::raw::c_void, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn index(__s: *const ::std::os::raw::c_char,
                 __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(__s: *const ::std::os::raw::c_char,
                  __c: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const ::std::os::raw::c_char,
                      __s2: *const ::std::os::raw::c_char)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(__s1: *const ::std::os::raw::c_char,
                       __s2: *const ::std::os::raw::c_char, __n: usize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsep(__stringp: *mut *mut ::std::os::raw::c_char,
                  __delim: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpcpy(__dest: *mut ::std::os::raw::c_char,
                    __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpcpy(__dest: *mut ::std::os::raw::c_char,
                  __src: *const ::std::os::raw::c_char)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn __stpncpy(__dest: *mut ::std::os::raw::c_char,
                     __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(__dest: *mut ::std::os::raw::c_char,
                   __src: *const ::std::os::raw::c_char, __n: usize)
     -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Copy)]
pub struct max_align_t {
    pub __max_align_ll: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __max_align_ld: f64,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(::std::mem::size_of::<max_align_t>() , 32usize , concat ! (
               "Size of: " , stringify ! ( max_align_t ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const max_align_t ) ) . __max_align_ll as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( max_align_t ) , "::" ,
                stringify ! ( __max_align_ll ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const max_align_t ) ) . __max_align_ld as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( max_align_t ) , "::" ,
                stringify ! ( __max_align_ld ) ));
}
impl Clone for max_align_t {
    fn clone(&self) -> Self { *self }
}
pub type THErrorHandlerFunction =
    ::std::option::Option<unsafe extern "C" fn(msg:
                                                   *const ::std::os::raw::c_char,
                                               data:
                                                   *mut ::std::os::raw::c_void)>;
pub type THArgErrorHandlerFunction =
    ::std::option::Option<unsafe extern "C" fn(argNumber:
                                                   ::std::os::raw::c_int,
                                               msg:
                                                   *const ::std::os::raw::c_char,
                                               data:
                                                   *mut ::std::os::raw::c_void)>;
#[repr(C)]
pub struct THDescBuff {
    pub str: [::std::os::raw::c_char; 64usize],
}
#[test]
fn bindgen_test_layout_THDescBuff() {
    assert_eq!(::std::mem::size_of::<THDescBuff>() , 64usize , concat ! (
               "Size of: " , stringify ! ( THDescBuff ) ));
    assert_eq! (::std::mem::align_of::<THDescBuff>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( THDescBuff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDescBuff ) ) . str as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THDescBuff ) , "::" ,
                stringify ! ( str ) ));
}
extern "C" {
    pub fn THLog1p(x: f64) -> f64;
}
extern "C" {
    pub fn _THSizeDesc(size: *const ::std::os::raw::c_long,
                       ndim: ::std::os::raw::c_long) -> THDescBuff;
}
extern "C" {
    pub fn _THError(file: *const ::std::os::raw::c_char,
                    line: ::std::os::raw::c_int,
                    fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn _THAssertionFailed(file: *const ::std::os::raw::c_char,
                              line: ::std::os::raw::c_int,
                              exp: *const ::std::os::raw::c_char,
                              fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn THSetErrorHandler(new_handler: THErrorHandlerFunction,
                             data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn THSetDefaultErrorHandler(new_handler: THErrorHandlerFunction,
                                    data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn _THArgCheck(file: *const ::std::os::raw::c_char,
                       line: ::std::os::raw::c_int,
                       condition: ::std::os::raw::c_int,
                       argNumber: ::std::os::raw::c_int,
                       fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn THSetArgErrorHandler(new_handler: THArgErrorHandlerFunction,
                                data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn THSetDefaultArgErrorHandler(new_handler: THArgErrorHandlerFunction,
                                       data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn THAlloc(size: isize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn THRealloc(ptr: *mut ::std::os::raw::c_void, size: isize)
     -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn THFree(ptr: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn THSetGCHandler(torchGCHandlerFunction:
                              ::std::option::Option<unsafe extern "C" fn(data:
                                                                             *mut ::std::os::raw::c_void)>,
                          data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn THHeapUpdate(size: isize);
}
extern "C" {
    pub fn THSetNumThreads(num_threads: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THGetNumThreads() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THGetNumCores() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THInferNumThreads();
}
extern "C" {
    pub fn THFloatBlas_swap(n: ::std::os::raw::c_long, x: *mut f32,
                            incx: ::std::os::raw::c_long, y: *mut f32,
                            incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatBlas_scal(n: ::std::os::raw::c_long, a: f32, x: *mut f32,
                            incx: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatBlas_copy(n: ::std::os::raw::c_long, x: *mut f32,
                            incx: ::std::os::raw::c_long, y: *mut f32,
                            incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatBlas_axpy(n: ::std::os::raw::c_long, a: f32, x: *mut f32,
                            incx: ::std::os::raw::c_long, y: *mut f32,
                            incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatBlas_dot(n: ::std::os::raw::c_long, x: *mut f32,
                           incx: ::std::os::raw::c_long, y: *mut f32,
                           incy: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn THFloatBlas_gemv(trans: ::std::os::raw::c_char,
                            m: ::std::os::raw::c_long,
                            n: ::std::os::raw::c_long, alpha: f32,
                            a: *mut f32, lda: ::std::os::raw::c_long,
                            x: *mut f32, incx: ::std::os::raw::c_long,
                            beta: f32, y: *mut f32,
                            incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatBlas_ger(m: ::std::os::raw::c_long,
                           n: ::std::os::raw::c_long, alpha: f32, x: *mut f32,
                           incx: ::std::os::raw::c_long, y: *mut f32,
                           incy: ::std::os::raw::c_long, a: *mut f32,
                           lda: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatBlas_gemm(transa: ::std::os::raw::c_char,
                            transb: ::std::os::raw::c_char,
                            m: ::std::os::raw::c_long,
                            n: ::std::os::raw::c_long,
                            k: ::std::os::raw::c_long, alpha: f32,
                            a: *mut f32, lda: ::std::os::raw::c_long,
                            b: *mut f32, ldb: ::std::os::raw::c_long,
                            beta: f32, c: *mut f32,
                            ldc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleBlas_swap(n: ::std::os::raw::c_long, x: *mut f64,
                             incx: ::std::os::raw::c_long, y: *mut f64,
                             incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleBlas_scal(n: ::std::os::raw::c_long, a: f64, x: *mut f64,
                             incx: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleBlas_copy(n: ::std::os::raw::c_long, x: *mut f64,
                             incx: ::std::os::raw::c_long, y: *mut f64,
                             incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleBlas_axpy(n: ::std::os::raw::c_long, a: f64, x: *mut f64,
                             incx: ::std::os::raw::c_long, y: *mut f64,
                             incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleBlas_dot(n: ::std::os::raw::c_long, x: *mut f64,
                            incx: ::std::os::raw::c_long, y: *mut f64,
                            incy: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn THDoubleBlas_gemv(trans: ::std::os::raw::c_char,
                             m: ::std::os::raw::c_long,
                             n: ::std::os::raw::c_long, alpha: f64,
                             a: *mut f64, lda: ::std::os::raw::c_long,
                             x: *mut f64, incx: ::std::os::raw::c_long,
                             beta: f64, y: *mut f64,
                             incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleBlas_ger(m: ::std::os::raw::c_long,
                            n: ::std::os::raw::c_long, alpha: f64,
                            x: *mut f64, incx: ::std::os::raw::c_long,
                            y: *mut f64, incy: ::std::os::raw::c_long,
                            a: *mut f64, lda: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleBlas_gemm(transa: ::std::os::raw::c_char,
                             transb: ::std::os::raw::c_char,
                             m: ::std::os::raw::c_long,
                             n: ::std::os::raw::c_long,
                             k: ::std::os::raw::c_long, alpha: f64,
                             a: *mut f64, lda: ::std::os::raw::c_long,
                             b: *mut f64, ldb: ::std::os::raw::c_long,
                             beta: f64, c: *mut f64,
                             ldc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteBlas_swap(n: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_uchar,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_uchar,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteBlas_scal(n: ::std::os::raw::c_long,
                           a: ::std::os::raw::c_uchar,
                           x: *mut ::std::os::raw::c_uchar,
                           incx: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteBlas_copy(n: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_uchar,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_uchar,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteBlas_axpy(n: ::std::os::raw::c_long,
                           a: ::std::os::raw::c_uchar,
                           x: *mut ::std::os::raw::c_uchar,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_uchar,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteBlas_dot(n: ::std::os::raw::c_long,
                          x: *mut ::std::os::raw::c_uchar,
                          incx: ::std::os::raw::c_long,
                          y: *mut ::std::os::raw::c_uchar,
                          incy: ::std::os::raw::c_long)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteBlas_gemv(trans: ::std::os::raw::c_char,
                           m: ::std::os::raw::c_long,
                           n: ::std::os::raw::c_long,
                           alpha: ::std::os::raw::c_uchar,
                           a: *mut ::std::os::raw::c_uchar,
                           lda: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_uchar,
                           incx: ::std::os::raw::c_long,
                           beta: ::std::os::raw::c_uchar,
                           y: *mut ::std::os::raw::c_uchar,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteBlas_ger(m: ::std::os::raw::c_long,
                          n: ::std::os::raw::c_long,
                          alpha: ::std::os::raw::c_uchar,
                          x: *mut ::std::os::raw::c_uchar,
                          incx: ::std::os::raw::c_long,
                          y: *mut ::std::os::raw::c_uchar,
                          incy: ::std::os::raw::c_long,
                          a: *mut ::std::os::raw::c_uchar,
                          lda: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteBlas_gemm(transa: ::std::os::raw::c_char,
                           transb: ::std::os::raw::c_char,
                           m: ::std::os::raw::c_long,
                           n: ::std::os::raw::c_long,
                           k: ::std::os::raw::c_long,
                           alpha: ::std::os::raw::c_uchar,
                           a: *mut ::std::os::raw::c_uchar,
                           lda: ::std::os::raw::c_long,
                           b: *mut ::std::os::raw::c_uchar,
                           ldb: ::std::os::raw::c_long,
                           beta: ::std::os::raw::c_uchar,
                           c: *mut ::std::os::raw::c_uchar,
                           ldc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharBlas_swap(n: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_char,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_char,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharBlas_scal(n: ::std::os::raw::c_long,
                           a: ::std::os::raw::c_char,
                           x: *mut ::std::os::raw::c_char,
                           incx: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharBlas_copy(n: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_char,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_char,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharBlas_axpy(n: ::std::os::raw::c_long,
                           a: ::std::os::raw::c_char,
                           x: *mut ::std::os::raw::c_char,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_char,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharBlas_dot(n: ::std::os::raw::c_long,
                          x: *mut ::std::os::raw::c_char,
                          incx: ::std::os::raw::c_long,
                          y: *mut ::std::os::raw::c_char,
                          incy: ::std::os::raw::c_long)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharBlas_gemv(trans: ::std::os::raw::c_char,
                           m: ::std::os::raw::c_long,
                           n: ::std::os::raw::c_long,
                           alpha: ::std::os::raw::c_char,
                           a: *mut ::std::os::raw::c_char,
                           lda: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_char,
                           incx: ::std::os::raw::c_long,
                           beta: ::std::os::raw::c_char,
                           y: *mut ::std::os::raw::c_char,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharBlas_ger(m: ::std::os::raw::c_long,
                          n: ::std::os::raw::c_long,
                          alpha: ::std::os::raw::c_char,
                          x: *mut ::std::os::raw::c_char,
                          incx: ::std::os::raw::c_long,
                          y: *mut ::std::os::raw::c_char,
                          incy: ::std::os::raw::c_long,
                          a: *mut ::std::os::raw::c_char,
                          lda: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharBlas_gemm(transa: ::std::os::raw::c_char,
                           transb: ::std::os::raw::c_char,
                           m: ::std::os::raw::c_long,
                           n: ::std::os::raw::c_long,
                           k: ::std::os::raw::c_long,
                           alpha: ::std::os::raw::c_char,
                           a: *mut ::std::os::raw::c_char,
                           lda: ::std::os::raw::c_long,
                           b: *mut ::std::os::raw::c_char,
                           ldb: ::std::os::raw::c_long,
                           beta: ::std::os::raw::c_char,
                           c: *mut ::std::os::raw::c_char,
                           ldc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortBlas_swap(n: ::std::os::raw::c_long,
                            x: *mut ::std::os::raw::c_short,
                            incx: ::std::os::raw::c_long,
                            y: *mut ::std::os::raw::c_short,
                            incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortBlas_scal(n: ::std::os::raw::c_long,
                            a: ::std::os::raw::c_short,
                            x: *mut ::std::os::raw::c_short,
                            incx: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortBlas_copy(n: ::std::os::raw::c_long,
                            x: *mut ::std::os::raw::c_short,
                            incx: ::std::os::raw::c_long,
                            y: *mut ::std::os::raw::c_short,
                            incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortBlas_axpy(n: ::std::os::raw::c_long,
                            a: ::std::os::raw::c_short,
                            x: *mut ::std::os::raw::c_short,
                            incx: ::std::os::raw::c_long,
                            y: *mut ::std::os::raw::c_short,
                            incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortBlas_dot(n: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_short,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_short,
                           incy: ::std::os::raw::c_long)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortBlas_gemv(trans: ::std::os::raw::c_char,
                            m: ::std::os::raw::c_long,
                            n: ::std::os::raw::c_long,
                            alpha: ::std::os::raw::c_short,
                            a: *mut ::std::os::raw::c_short,
                            lda: ::std::os::raw::c_long,
                            x: *mut ::std::os::raw::c_short,
                            incx: ::std::os::raw::c_long,
                            beta: ::std::os::raw::c_short,
                            y: *mut ::std::os::raw::c_short,
                            incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortBlas_ger(m: ::std::os::raw::c_long,
                           n: ::std::os::raw::c_long,
                           alpha: ::std::os::raw::c_short,
                           x: *mut ::std::os::raw::c_short,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_short,
                           incy: ::std::os::raw::c_long,
                           a: *mut ::std::os::raw::c_short,
                           lda: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortBlas_gemm(transa: ::std::os::raw::c_char,
                            transb: ::std::os::raw::c_char,
                            m: ::std::os::raw::c_long,
                            n: ::std::os::raw::c_long,
                            k: ::std::os::raw::c_long,
                            alpha: ::std::os::raw::c_short,
                            a: *mut ::std::os::raw::c_short,
                            lda: ::std::os::raw::c_long,
                            b: *mut ::std::os::raw::c_short,
                            ldb: ::std::os::raw::c_long,
                            beta: ::std::os::raw::c_short,
                            c: *mut ::std::os::raw::c_short,
                            ldc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntBlas_swap(n: ::std::os::raw::c_long,
                          x: *mut ::std::os::raw::c_int,
                          incx: ::std::os::raw::c_long,
                          y: *mut ::std::os::raw::c_int,
                          incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntBlas_scal(n: ::std::os::raw::c_long, a: ::std::os::raw::c_int,
                          x: *mut ::std::os::raw::c_int,
                          incx: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntBlas_copy(n: ::std::os::raw::c_long,
                          x: *mut ::std::os::raw::c_int,
                          incx: ::std::os::raw::c_long,
                          y: *mut ::std::os::raw::c_int,
                          incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntBlas_axpy(n: ::std::os::raw::c_long, a: ::std::os::raw::c_int,
                          x: *mut ::std::os::raw::c_int,
                          incx: ::std::os::raw::c_long,
                          y: *mut ::std::os::raw::c_int,
                          incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntBlas_dot(n: ::std::os::raw::c_long,
                         x: *mut ::std::os::raw::c_int,
                         incx: ::std::os::raw::c_long,
                         y: *mut ::std::os::raw::c_int,
                         incy: ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntBlas_gemv(trans: ::std::os::raw::c_char,
                          m: ::std::os::raw::c_long,
                          n: ::std::os::raw::c_long,
                          alpha: ::std::os::raw::c_int,
                          a: *mut ::std::os::raw::c_int,
                          lda: ::std::os::raw::c_long,
                          x: *mut ::std::os::raw::c_int,
                          incx: ::std::os::raw::c_long,
                          beta: ::std::os::raw::c_int,
                          y: *mut ::std::os::raw::c_int,
                          incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntBlas_ger(m: ::std::os::raw::c_long, n: ::std::os::raw::c_long,
                         alpha: ::std::os::raw::c_int,
                         x: *mut ::std::os::raw::c_int,
                         incx: ::std::os::raw::c_long,
                         y: *mut ::std::os::raw::c_int,
                         incy: ::std::os::raw::c_long,
                         a: *mut ::std::os::raw::c_int,
                         lda: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntBlas_gemm(transa: ::std::os::raw::c_char,
                          transb: ::std::os::raw::c_char,
                          m: ::std::os::raw::c_long,
                          n: ::std::os::raw::c_long,
                          k: ::std::os::raw::c_long,
                          alpha: ::std::os::raw::c_int,
                          a: *mut ::std::os::raw::c_int,
                          lda: ::std::os::raw::c_long,
                          b: *mut ::std::os::raw::c_int,
                          ldb: ::std::os::raw::c_long,
                          beta: ::std::os::raw::c_int,
                          c: *mut ::std::os::raw::c_int,
                          ldc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongBlas_swap(n: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_long,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_long,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongBlas_scal(n: ::std::os::raw::c_long,
                           a: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_long,
                           incx: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongBlas_copy(n: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_long,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_long,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongBlas_axpy(n: ::std::os::raw::c_long,
                           a: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_long,
                           incx: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_long,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongBlas_dot(n: ::std::os::raw::c_long,
                          x: *mut ::std::os::raw::c_long,
                          incx: ::std::os::raw::c_long,
                          y: *mut ::std::os::raw::c_long,
                          incy: ::std::os::raw::c_long)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongBlas_gemv(trans: ::std::os::raw::c_char,
                           m: ::std::os::raw::c_long,
                           n: ::std::os::raw::c_long,
                           alpha: ::std::os::raw::c_long,
                           a: *mut ::std::os::raw::c_long,
                           lda: ::std::os::raw::c_long,
                           x: *mut ::std::os::raw::c_long,
                           incx: ::std::os::raw::c_long,
                           beta: ::std::os::raw::c_long,
                           y: *mut ::std::os::raw::c_long,
                           incy: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongBlas_ger(m: ::std::os::raw::c_long,
                          n: ::std::os::raw::c_long,
                          alpha: ::std::os::raw::c_long,
                          x: *mut ::std::os::raw::c_long,
                          incx: ::std::os::raw::c_long,
                          y: *mut ::std::os::raw::c_long,
                          incy: ::std::os::raw::c_long,
                          a: *mut ::std::os::raw::c_long,
                          lda: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongBlas_gemm(transa: ::std::os::raw::c_char,
                           transb: ::std::os::raw::c_char,
                           m: ::std::os::raw::c_long,
                           n: ::std::os::raw::c_long,
                           k: ::std::os::raw::c_long,
                           alpha: ::std::os::raw::c_long,
                           a: *mut ::std::os::raw::c_long,
                           lda: ::std::os::raw::c_long,
                           b: *mut ::std::os::raw::c_long,
                           ldb: ::std::os::raw::c_long,
                           beta: ::std::os::raw::c_long,
                           c: *mut ::std::os::raw::c_long,
                           ldc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatLapack_gesv(n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int, a: *mut f32,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int, b: *mut f32,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_trtrs(uplo: ::std::os::raw::c_char,
                               trans: ::std::os::raw::c_char,
                               diag: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               nrhs: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int, b: *mut f32,
                               ldb: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_gels(trans: ::std::os::raw::c_char,
                              m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int, a: *mut f32,
                              lda: ::std::os::raw::c_int, b: *mut f32,
                              ldb: ::std::os::raw::c_int, work: *mut f32,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_syev(jobz: ::std::os::raw::c_char,
                              uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int, a: *mut f32,
                              lda: ::std::os::raw::c_int, w: *mut f32,
                              work: *mut f32, lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_geev(jobvl: ::std::os::raw::c_char,
                              jobvr: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int, a: *mut f32,
                              lda: ::std::os::raw::c_int, wr: *mut f32,
                              wi: *mut f32, vl: *mut f32,
                              ldvl: ::std::os::raw::c_int, vr: *mut f32,
                              ldvr: ::std::os::raw::c_int, work: *mut f32,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_gesvd(jobu: ::std::os::raw::c_char,
                               jobvt: ::std::os::raw::c_char,
                               m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int, s: *mut f32,
                               u: *mut f32, ldu: ::std::os::raw::c_int,
                               vt: *mut f32, ldvt: ::std::os::raw::c_int,
                               work: *mut f32, lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_getrf(m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int,
                               ipiv: *mut ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_getrs(trans: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               nrhs: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int,
                               ipiv: *mut ::std::os::raw::c_int, b: *mut f32,
                               ldb: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_getri(n: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int,
                               ipiv: *mut ::std::os::raw::c_int,
                               work: *mut f32, lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_potrf(uplo: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_potri(uplo: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_potrs(uplo: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               nrhs: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int, b: *mut f32,
                               ldb: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_pstrf(uplo: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int,
                               piv: *mut ::std::os::raw::c_int,
                               rank: *mut ::std::os::raw::c_int, tol: f32,
                               work: *mut f32,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_geqrf(m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int, tau: *mut f32,
                               work: *mut f32, lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_orgqr(m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int,
                               k: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int, tau: *mut f32,
                               work: *mut f32, lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatLapack_ormqr(side: ::std::os::raw::c_char,
                               trans: ::std::os::raw::c_char,
                               m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int,
                               k: ::std::os::raw::c_int, a: *mut f32,
                               lda: ::std::os::raw::c_int, tau: *mut f32,
                               c: *mut f32, ldc: ::std::os::raw::c_int,
                               work: *mut f32, lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_gesv(n: ::std::os::raw::c_int,
                               nrhs: ::std::os::raw::c_int, a: *mut f64,
                               lda: ::std::os::raw::c_int,
                               ipiv: *mut ::std::os::raw::c_int, b: *mut f64,
                               ldb: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_trtrs(uplo: ::std::os::raw::c_char,
                                trans: ::std::os::raw::c_char,
                                diag: ::std::os::raw::c_char,
                                n: ::std::os::raw::c_int,
                                nrhs: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int, b: *mut f64,
                                ldb: ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_gels(trans: ::std::os::raw::c_char,
                               m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int,
                               nrhs: ::std::os::raw::c_int, a: *mut f64,
                               lda: ::std::os::raw::c_int, b: *mut f64,
                               ldb: ::std::os::raw::c_int, work: *mut f64,
                               lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_syev(jobz: ::std::os::raw::c_char,
                               uplo: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int, a: *mut f64,
                               lda: ::std::os::raw::c_int, w: *mut f64,
                               work: *mut f64, lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_geev(jobvl: ::std::os::raw::c_char,
                               jobvr: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int, a: *mut f64,
                               lda: ::std::os::raw::c_int, wr: *mut f64,
                               wi: *mut f64, vl: *mut f64,
                               ldvl: ::std::os::raw::c_int, vr: *mut f64,
                               ldvr: ::std::os::raw::c_int, work: *mut f64,
                               lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_gesvd(jobu: ::std::os::raw::c_char,
                                jobvt: ::std::os::raw::c_char,
                                m: ::std::os::raw::c_int,
                                n: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int, s: *mut f64,
                                u: *mut f64, ldu: ::std::os::raw::c_int,
                                vt: *mut f64, ldvt: ::std::os::raw::c_int,
                                work: *mut f64, lwork: ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_getrf(m: ::std::os::raw::c_int,
                                n: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int,
                                ipiv: *mut ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_getrs(trans: ::std::os::raw::c_char,
                                n: ::std::os::raw::c_int,
                                nrhs: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int,
                                ipiv: *mut ::std::os::raw::c_int, b: *mut f64,
                                ldb: ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_getri(n: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int,
                                ipiv: *mut ::std::os::raw::c_int,
                                work: *mut f64, lwork: ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_potrf(uplo: ::std::os::raw::c_char,
                                n: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_potri(uplo: ::std::os::raw::c_char,
                                n: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_potrs(uplo: ::std::os::raw::c_char,
                                n: ::std::os::raw::c_int,
                                nrhs: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int, b: *mut f64,
                                ldb: ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_pstrf(uplo: ::std::os::raw::c_char,
                                n: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int,
                                piv: *mut ::std::os::raw::c_int,
                                rank: *mut ::std::os::raw::c_int, tol: f64,
                                work: *mut f64,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_geqrf(m: ::std::os::raw::c_int,
                                n: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int, tau: *mut f64,
                                work: *mut f64, lwork: ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_orgqr(m: ::std::os::raw::c_int,
                                n: ::std::os::raw::c_int,
                                k: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int, tau: *mut f64,
                                work: *mut f64, lwork: ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleLapack_ormqr(side: ::std::os::raw::c_char,
                                trans: ::std::os::raw::c_char,
                                m: ::std::os::raw::c_int,
                                n: ::std::os::raw::c_int,
                                k: ::std::os::raw::c_int, a: *mut f64,
                                lda: ::std::os::raw::c_int, tau: *mut f64,
                                c: *mut f64, ldc: ::std::os::raw::c_int,
                                work: *mut f64, lwork: ::std::os::raw::c_int,
                                info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_gesv(n: ::std::os::raw::c_int,
                             nrhs: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_uchar,
                             lda: ::std::os::raw::c_int,
                             ipiv: *mut ::std::os::raw::c_int,
                             b: *mut ::std::os::raw::c_uchar,
                             ldb: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_trtrs(uplo: ::std::os::raw::c_char,
                              trans: ::std::os::raw::c_char,
                              diag: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_uchar,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_gels(trans: ::std::os::raw::c_char,
                             m: ::std::os::raw::c_int,
                             n: ::std::os::raw::c_int,
                             nrhs: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_uchar,
                             lda: ::std::os::raw::c_int,
                             b: *mut ::std::os::raw::c_uchar,
                             ldb: ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_uchar,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_syev(jobz: ::std::os::raw::c_char,
                             uplo: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_uchar,
                             lda: ::std::os::raw::c_int,
                             w: *mut ::std::os::raw::c_uchar,
                             work: *mut ::std::os::raw::c_uchar,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_geev(jobvl: ::std::os::raw::c_char,
                             jobvr: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_uchar,
                             lda: ::std::os::raw::c_int,
                             wr: *mut ::std::os::raw::c_uchar,
                             wi: *mut ::std::os::raw::c_uchar,
                             vl: *mut ::std::os::raw::c_uchar,
                             ldvl: ::std::os::raw::c_int,
                             vr: *mut ::std::os::raw::c_uchar,
                             ldvr: ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_uchar,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_gesvd(jobu: ::std::os::raw::c_char,
                              jobvt: ::std::os::raw::c_char,
                              m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              s: *mut ::std::os::raw::c_uchar,
                              u: *mut ::std::os::raw::c_uchar,
                              ldu: ::std::os::raw::c_int,
                              vt: *mut ::std::os::raw::c_uchar,
                              ldvt: ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_uchar,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_getrf(m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_getrs(trans: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_uchar,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_getri(n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_uchar,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_potrf(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_potri(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_potrs(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_uchar,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_pstrf(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              piv: *mut ::std::os::raw::c_int,
                              rank: *mut ::std::os::raw::c_int,
                              tol: ::std::os::raw::c_uchar,
                              work: *mut ::std::os::raw::c_uchar,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_geqrf(m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              tau: *mut ::std::os::raw::c_uchar,
                              work: *mut ::std::os::raw::c_uchar,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_orgqr(m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              k: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              tau: *mut ::std::os::raw::c_uchar,
                              work: *mut ::std::os::raw::c_uchar,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteLapack_ormqr(side: ::std::os::raw::c_char,
                              trans: ::std::os::raw::c_char,
                              m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              k: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_uchar,
                              lda: ::std::os::raw::c_int,
                              tau: *mut ::std::os::raw::c_uchar,
                              c: *mut ::std::os::raw::c_uchar,
                              ldc: ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_uchar,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_gesv(n: ::std::os::raw::c_int,
                             nrhs: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_char,
                             lda: ::std::os::raw::c_int,
                             ipiv: *mut ::std::os::raw::c_int,
                             b: *mut ::std::os::raw::c_char,
                             ldb: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_trtrs(uplo: ::std::os::raw::c_char,
                              trans: ::std::os::raw::c_char,
                              diag: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_char,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_gels(trans: ::std::os::raw::c_char,
                             m: ::std::os::raw::c_int,
                             n: ::std::os::raw::c_int,
                             nrhs: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_char,
                             lda: ::std::os::raw::c_int,
                             b: *mut ::std::os::raw::c_char,
                             ldb: ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_char,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_syev(jobz: ::std::os::raw::c_char,
                             uplo: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_char,
                             lda: ::std::os::raw::c_int,
                             w: *mut ::std::os::raw::c_char,
                             work: *mut ::std::os::raw::c_char,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_geev(jobvl: ::std::os::raw::c_char,
                             jobvr: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_char,
                             lda: ::std::os::raw::c_int,
                             wr: *mut ::std::os::raw::c_char,
                             wi: *mut ::std::os::raw::c_char,
                             vl: *mut ::std::os::raw::c_char,
                             ldvl: ::std::os::raw::c_int,
                             vr: *mut ::std::os::raw::c_char,
                             ldvr: ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_char,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_gesvd(jobu: ::std::os::raw::c_char,
                              jobvt: ::std::os::raw::c_char,
                              m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              s: *mut ::std::os::raw::c_char,
                              u: *mut ::std::os::raw::c_char,
                              ldu: ::std::os::raw::c_int,
                              vt: *mut ::std::os::raw::c_char,
                              ldvt: ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_char,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_getrf(m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_getrs(trans: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_char,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_getri(n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_char,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_potrf(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_potri(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_potrs(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_char,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_pstrf(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              piv: *mut ::std::os::raw::c_int,
                              rank: *mut ::std::os::raw::c_int,
                              tol: ::std::os::raw::c_char,
                              work: *mut ::std::os::raw::c_char,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_geqrf(m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              tau: *mut ::std::os::raw::c_char,
                              work: *mut ::std::os::raw::c_char,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_orgqr(m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              k: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              tau: *mut ::std::os::raw::c_char,
                              work: *mut ::std::os::raw::c_char,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharLapack_ormqr(side: ::std::os::raw::c_char,
                              trans: ::std::os::raw::c_char,
                              m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              k: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_char,
                              lda: ::std::os::raw::c_int,
                              tau: *mut ::std::os::raw::c_char,
                              c: *mut ::std::os::raw::c_char,
                              ldc: ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_char,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_gesv(n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_short,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_short,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_trtrs(uplo: ::std::os::raw::c_char,
                               trans: ::std::os::raw::c_char,
                               diag: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               nrhs: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               b: *mut ::std::os::raw::c_short,
                               ldb: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_gels(trans: ::std::os::raw::c_char,
                              m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_short,
                              lda: ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_short,
                              ldb: ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_short,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_syev(jobz: ::std::os::raw::c_char,
                              uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_short,
                              lda: ::std::os::raw::c_int,
                              w: *mut ::std::os::raw::c_short,
                              work: *mut ::std::os::raw::c_short,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_geev(jobvl: ::std::os::raw::c_char,
                              jobvr: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_short,
                              lda: ::std::os::raw::c_int,
                              wr: *mut ::std::os::raw::c_short,
                              wi: *mut ::std::os::raw::c_short,
                              vl: *mut ::std::os::raw::c_short,
                              ldvl: ::std::os::raw::c_int,
                              vr: *mut ::std::os::raw::c_short,
                              ldvr: ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_short,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_gesvd(jobu: ::std::os::raw::c_char,
                               jobvt: ::std::os::raw::c_char,
                               m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               s: *mut ::std::os::raw::c_short,
                               u: *mut ::std::os::raw::c_short,
                               ldu: ::std::os::raw::c_int,
                               vt: *mut ::std::os::raw::c_short,
                               ldvt: ::std::os::raw::c_int,
                               work: *mut ::std::os::raw::c_short,
                               lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_getrf(m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               ipiv: *mut ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_getrs(trans: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               nrhs: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               ipiv: *mut ::std::os::raw::c_int,
                               b: *mut ::std::os::raw::c_short,
                               ldb: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_getri(n: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               ipiv: *mut ::std::os::raw::c_int,
                               work: *mut ::std::os::raw::c_short,
                               lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_potrf(uplo: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_potri(uplo: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_potrs(uplo: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               nrhs: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               b: *mut ::std::os::raw::c_short,
                               ldb: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_pstrf(uplo: ::std::os::raw::c_char,
                               n: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               piv: *mut ::std::os::raw::c_int,
                               rank: *mut ::std::os::raw::c_int,
                               tol: ::std::os::raw::c_short,
                               work: *mut ::std::os::raw::c_short,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_geqrf(m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               tau: *mut ::std::os::raw::c_short,
                               work: *mut ::std::os::raw::c_short,
                               lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_orgqr(m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int,
                               k: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               tau: *mut ::std::os::raw::c_short,
                               work: *mut ::std::os::raw::c_short,
                               lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortLapack_ormqr(side: ::std::os::raw::c_char,
                               trans: ::std::os::raw::c_char,
                               m: ::std::os::raw::c_int,
                               n: ::std::os::raw::c_int,
                               k: ::std::os::raw::c_int,
                               a: *mut ::std::os::raw::c_short,
                               lda: ::std::os::raw::c_int,
                               tau: *mut ::std::os::raw::c_short,
                               c: *mut ::std::os::raw::c_short,
                               ldc: ::std::os::raw::c_int,
                               work: *mut ::std::os::raw::c_short,
                               lwork: ::std::os::raw::c_int,
                               info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_gesv(n: ::std::os::raw::c_int,
                            nrhs: ::std::os::raw::c_int,
                            a: *mut ::std::os::raw::c_int,
                            lda: ::std::os::raw::c_int,
                            ipiv: *mut ::std::os::raw::c_int,
                            b: *mut ::std::os::raw::c_int,
                            ldb: ::std::os::raw::c_int,
                            info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_trtrs(uplo: ::std::os::raw::c_char,
                             trans: ::std::os::raw::c_char,
                             diag: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             nrhs: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             b: *mut ::std::os::raw::c_int,
                             ldb: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_gels(trans: ::std::os::raw::c_char,
                            m: ::std::os::raw::c_int,
                            n: ::std::os::raw::c_int,
                            nrhs: ::std::os::raw::c_int,
                            a: *mut ::std::os::raw::c_int,
                            lda: ::std::os::raw::c_int,
                            b: *mut ::std::os::raw::c_int,
                            ldb: ::std::os::raw::c_int,
                            work: *mut ::std::os::raw::c_int,
                            lwork: ::std::os::raw::c_int,
                            info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_syev(jobz: ::std::os::raw::c_char,
                            uplo: ::std::os::raw::c_char,
                            n: ::std::os::raw::c_int,
                            a: *mut ::std::os::raw::c_int,
                            lda: ::std::os::raw::c_int,
                            w: *mut ::std::os::raw::c_int,
                            work: *mut ::std::os::raw::c_int,
                            lwork: ::std::os::raw::c_int,
                            info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_geev(jobvl: ::std::os::raw::c_char,
                            jobvr: ::std::os::raw::c_char,
                            n: ::std::os::raw::c_int,
                            a: *mut ::std::os::raw::c_int,
                            lda: ::std::os::raw::c_int,
                            wr: *mut ::std::os::raw::c_int,
                            wi: *mut ::std::os::raw::c_int,
                            vl: *mut ::std::os::raw::c_int,
                            ldvl: ::std::os::raw::c_int,
                            vr: *mut ::std::os::raw::c_int,
                            ldvr: ::std::os::raw::c_int,
                            work: *mut ::std::os::raw::c_int,
                            lwork: ::std::os::raw::c_int,
                            info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_gesvd(jobu: ::std::os::raw::c_char,
                             jobvt: ::std::os::raw::c_char,
                             m: ::std::os::raw::c_int,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             s: *mut ::std::os::raw::c_int,
                             u: *mut ::std::os::raw::c_int,
                             ldu: ::std::os::raw::c_int,
                             vt: *mut ::std::os::raw::c_int,
                             ldvt: ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_int,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_getrf(m: ::std::os::raw::c_int,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             ipiv: *mut ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_getrs(trans: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             nrhs: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             ipiv: *mut ::std::os::raw::c_int,
                             b: *mut ::std::os::raw::c_int,
                             ldb: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_getri(n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             ipiv: *mut ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_int,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_potrf(uplo: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_potri(uplo: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_potrs(uplo: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             nrhs: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             b: *mut ::std::os::raw::c_int,
                             ldb: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_pstrf(uplo: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             piv: *mut ::std::os::raw::c_int,
                             rank: *mut ::std::os::raw::c_int,
                             tol: ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_geqrf(m: ::std::os::raw::c_int,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             tau: *mut ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_int,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_orgqr(m: ::std::os::raw::c_int,
                             n: ::std::os::raw::c_int,
                             k: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             tau: *mut ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_int,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntLapack_ormqr(side: ::std::os::raw::c_char,
                             trans: ::std::os::raw::c_char,
                             m: ::std::os::raw::c_int,
                             n: ::std::os::raw::c_int,
                             k: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_int,
                             lda: ::std::os::raw::c_int,
                             tau: *mut ::std::os::raw::c_int,
                             c: *mut ::std::os::raw::c_int,
                             ldc: ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_int,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_gesv(n: ::std::os::raw::c_int,
                             nrhs: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_long,
                             lda: ::std::os::raw::c_int,
                             ipiv: *mut ::std::os::raw::c_int,
                             b: *mut ::std::os::raw::c_long,
                             ldb: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_trtrs(uplo: ::std::os::raw::c_char,
                              trans: ::std::os::raw::c_char,
                              diag: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_long,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_gels(trans: ::std::os::raw::c_char,
                             m: ::std::os::raw::c_int,
                             n: ::std::os::raw::c_int,
                             nrhs: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_long,
                             lda: ::std::os::raw::c_int,
                             b: *mut ::std::os::raw::c_long,
                             ldb: ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_long,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_syev(jobz: ::std::os::raw::c_char,
                             uplo: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_long,
                             lda: ::std::os::raw::c_int,
                             w: *mut ::std::os::raw::c_long,
                             work: *mut ::std::os::raw::c_long,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_geev(jobvl: ::std::os::raw::c_char,
                             jobvr: ::std::os::raw::c_char,
                             n: ::std::os::raw::c_int,
                             a: *mut ::std::os::raw::c_long,
                             lda: ::std::os::raw::c_int,
                             wr: *mut ::std::os::raw::c_long,
                             wi: *mut ::std::os::raw::c_long,
                             vl: *mut ::std::os::raw::c_long,
                             ldvl: ::std::os::raw::c_int,
                             vr: *mut ::std::os::raw::c_long,
                             ldvr: ::std::os::raw::c_int,
                             work: *mut ::std::os::raw::c_long,
                             lwork: ::std::os::raw::c_int,
                             info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_gesvd(jobu: ::std::os::raw::c_char,
                              jobvt: ::std::os::raw::c_char,
                              m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              s: *mut ::std::os::raw::c_long,
                              u: *mut ::std::os::raw::c_long,
                              ldu: ::std::os::raw::c_int,
                              vt: *mut ::std::os::raw::c_long,
                              ldvt: ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_long,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_getrf(m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_getrs(trans: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_long,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_getri(n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              ipiv: *mut ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_long,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_potrf(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_potri(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_potrs(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              nrhs: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              b: *mut ::std::os::raw::c_long,
                              ldb: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_pstrf(uplo: ::std::os::raw::c_char,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              piv: *mut ::std::os::raw::c_int,
                              rank: *mut ::std::os::raw::c_int,
                              tol: ::std::os::raw::c_long,
                              work: *mut ::std::os::raw::c_long,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_geqrf(m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              tau: *mut ::std::os::raw::c_long,
                              work: *mut ::std::os::raw::c_long,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_orgqr(m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              k: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              tau: *mut ::std::os::raw::c_long,
                              work: *mut ::std::os::raw::c_long,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongLapack_ormqr(side: ::std::os::raw::c_char,
                              trans: ::std::os::raw::c_char,
                              m: ::std::os::raw::c_int,
                              n: ::std::os::raw::c_int,
                              k: ::std::os::raw::c_int,
                              a: *mut ::std::os::raw::c_long,
                              lda: ::std::os::raw::c_int,
                              tau: *mut ::std::os::raw::c_long,
                              c: *mut ::std::os::raw::c_long,
                              ldc: ::std::os::raw::c_int,
                              work: *mut ::std::os::raw::c_long,
                              lwork: ::std::os::raw::c_int,
                              info: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THAtomicSet(a: *mut ::std::os::raw::c_int,
                       newvalue: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THAtomicGet(a: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THAtomicAdd(a: *mut ::std::os::raw::c_int,
                       value: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THAtomicCompareAndSwap(a: *mut ::std::os::raw::c_int,
                                  oldvalue: ::std::os::raw::c_int,
                                  newvalue: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THAtomicIncrementRef(a: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THAtomicDecrementRef(a: *mut ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THAtomicSetLong(a: *mut ::std::os::raw::c_long,
                           newvalue: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THAtomicGetLong(a: *mut ::std::os::raw::c_long)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THAtomicAddLong(a: *mut ::std::os::raw::c_long,
                           value: ::std::os::raw::c_long)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THAtomicCompareAndSwapLong(a: *mut ::std::os::raw::c_long,
                                      oldvalue: ::std::os::raw::c_long,
                                      newvalue: ::std::os::raw::c_long)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THAtomicSetPtrdiff(a: *mut isize, newvalue: isize);
}
extern "C" {
    pub fn THAtomicGetPtrdiff(a: *mut isize) -> isize;
}
extern "C" {
    pub fn THAtomicAddPtrdiff(a: *mut isize, value: isize) -> isize;
}
extern "C" {
    pub fn THAtomicCompareAndSwapPtrdiff(a: *mut isize, oldvalue: isize,
                                         newvalue: isize) -> isize;
}
extern "C" {
    pub fn THFloatVector_fill(x: *mut f32, c: f32, n: isize);
}
extern "C" {
    pub fn THFloatVector_cadd(z: *mut f32, x: *const f32, y: *const f32,
                              c: f32, n: isize);
}
extern "C" {
    pub fn THFloatVector_adds(y: *mut f32, x: *const f32, c: f32, n: isize);
}
extern "C" {
    pub fn THFloatVector_cmul(z: *mut f32, x: *const f32, y: *const f32,
                              n: isize);
}
extern "C" {
    pub fn THFloatVector_muls(y: *mut f32, x: *const f32, c: f32, n: isize);
}
extern "C" {
    pub fn THFloatVector_cdiv(z: *mut f32, x: *const f32, y: *const f32,
                              n: isize);
}
extern "C" {
    pub fn THFloatVector_divs(y: *mut f32, x: *const f32, c: f32, n: isize);
}
extern "C" {
    pub fn THFloatVector_copy(y: *mut f32, x: *const f32, n: isize);
}
extern "C" {
    pub fn THFloatVector_vectorDispatchInit();
}
extern "C" {
    pub fn THDoubleVector_fill(x: *mut f64, c: f64, n: isize);
}
extern "C" {
    pub fn THDoubleVector_cadd(z: *mut f64, x: *const f64, y: *const f64,
                               c: f64, n: isize);
}
extern "C" {
    pub fn THDoubleVector_adds(y: *mut f64, x: *const f64, c: f64, n: isize);
}
extern "C" {
    pub fn THDoubleVector_cmul(z: *mut f64, x: *const f64, y: *const f64,
                               n: isize);
}
extern "C" {
    pub fn THDoubleVector_muls(y: *mut f64, x: *const f64, c: f64, n: isize);
}
extern "C" {
    pub fn THDoubleVector_cdiv(z: *mut f64, x: *const f64, y: *const f64,
                               n: isize);
}
extern "C" {
    pub fn THDoubleVector_divs(y: *mut f64, x: *const f64, c: f64, n: isize);
}
extern "C" {
    pub fn THDoubleVector_copy(y: *mut f64, x: *const f64, n: isize);
}
extern "C" {
    pub fn THDoubleVector_vectorDispatchInit();
}
extern "C" {
    pub fn THByteVector_fill(x: *mut ::std::os::raw::c_uchar,
                             c: ::std::os::raw::c_uchar, n: isize);
}
extern "C" {
    pub fn THByteVector_cadd(z: *mut ::std::os::raw::c_uchar,
                             x: *const ::std::os::raw::c_uchar,
                             y: *const ::std::os::raw::c_uchar,
                             c: ::std::os::raw::c_uchar, n: isize);
}
extern "C" {
    pub fn THByteVector_adds(y: *mut ::std::os::raw::c_uchar,
                             x: *const ::std::os::raw::c_uchar,
                             c: ::std::os::raw::c_uchar, n: isize);
}
extern "C" {
    pub fn THByteVector_cmul(z: *mut ::std::os::raw::c_uchar,
                             x: *const ::std::os::raw::c_uchar,
                             y: *const ::std::os::raw::c_uchar, n: isize);
}
extern "C" {
    pub fn THByteVector_muls(y: *mut ::std::os::raw::c_uchar,
                             x: *const ::std::os::raw::c_uchar,
                             c: ::std::os::raw::c_uchar, n: isize);
}
extern "C" {
    pub fn THByteVector_cdiv(z: *mut ::std::os::raw::c_uchar,
                             x: *const ::std::os::raw::c_uchar,
                             y: *const ::std::os::raw::c_uchar, n: isize);
}
extern "C" {
    pub fn THByteVector_divs(y: *mut ::std::os::raw::c_uchar,
                             x: *const ::std::os::raw::c_uchar,
                             c: ::std::os::raw::c_uchar, n: isize);
}
extern "C" {
    pub fn THByteVector_copy(y: *mut ::std::os::raw::c_uchar,
                             x: *const ::std::os::raw::c_uchar, n: isize);
}
extern "C" {
    pub fn THByteVector_vectorDispatchInit();
}
extern "C" {
    pub fn THCharVector_fill(x: *mut ::std::os::raw::c_char,
                             c: ::std::os::raw::c_char, n: isize);
}
extern "C" {
    pub fn THCharVector_cadd(z: *mut ::std::os::raw::c_char,
                             x: *const ::std::os::raw::c_char,
                             y: *const ::std::os::raw::c_char,
                             c: ::std::os::raw::c_char, n: isize);
}
extern "C" {
    pub fn THCharVector_adds(y: *mut ::std::os::raw::c_char,
                             x: *const ::std::os::raw::c_char,
                             c: ::std::os::raw::c_char, n: isize);
}
extern "C" {
    pub fn THCharVector_cmul(z: *mut ::std::os::raw::c_char,
                             x: *const ::std::os::raw::c_char,
                             y: *const ::std::os::raw::c_char, n: isize);
}
extern "C" {
    pub fn THCharVector_muls(y: *mut ::std::os::raw::c_char,
                             x: *const ::std::os::raw::c_char,
                             c: ::std::os::raw::c_char, n: isize);
}
extern "C" {
    pub fn THCharVector_cdiv(z: *mut ::std::os::raw::c_char,
                             x: *const ::std::os::raw::c_char,
                             y: *const ::std::os::raw::c_char, n: isize);
}
extern "C" {
    pub fn THCharVector_divs(y: *mut ::std::os::raw::c_char,
                             x: *const ::std::os::raw::c_char,
                             c: ::std::os::raw::c_char, n: isize);
}
extern "C" {
    pub fn THCharVector_copy(y: *mut ::std::os::raw::c_char,
                             x: *const ::std::os::raw::c_char, n: isize);
}
extern "C" {
    pub fn THCharVector_vectorDispatchInit();
}
extern "C" {
    pub fn THShortVector_fill(x: *mut ::std::os::raw::c_short,
                              c: ::std::os::raw::c_short, n: isize);
}
extern "C" {
    pub fn THShortVector_cadd(z: *mut ::std::os::raw::c_short,
                              x: *const ::std::os::raw::c_short,
                              y: *const ::std::os::raw::c_short,
                              c: ::std::os::raw::c_short, n: isize);
}
extern "C" {
    pub fn THShortVector_adds(y: *mut ::std::os::raw::c_short,
                              x: *const ::std::os::raw::c_short,
                              c: ::std::os::raw::c_short, n: isize);
}
extern "C" {
    pub fn THShortVector_cmul(z: *mut ::std::os::raw::c_short,
                              x: *const ::std::os::raw::c_short,
                              y: *const ::std::os::raw::c_short, n: isize);
}
extern "C" {
    pub fn THShortVector_muls(y: *mut ::std::os::raw::c_short,
                              x: *const ::std::os::raw::c_short,
                              c: ::std::os::raw::c_short, n: isize);
}
extern "C" {
    pub fn THShortVector_cdiv(z: *mut ::std::os::raw::c_short,
                              x: *const ::std::os::raw::c_short,
                              y: *const ::std::os::raw::c_short, n: isize);
}
extern "C" {
    pub fn THShortVector_divs(y: *mut ::std::os::raw::c_short,
                              x: *const ::std::os::raw::c_short,
                              c: ::std::os::raw::c_short, n: isize);
}
extern "C" {
    pub fn THShortVector_copy(y: *mut ::std::os::raw::c_short,
                              x: *const ::std::os::raw::c_short, n: isize);
}
extern "C" {
    pub fn THShortVector_vectorDispatchInit();
}
extern "C" {
    pub fn THIntVector_fill(x: *mut ::std::os::raw::c_int,
                            c: ::std::os::raw::c_int, n: isize);
}
extern "C" {
    pub fn THIntVector_cadd(z: *mut ::std::os::raw::c_int,
                            x: *const ::std::os::raw::c_int,
                            y: *const ::std::os::raw::c_int,
                            c: ::std::os::raw::c_int, n: isize);
}
extern "C" {
    pub fn THIntVector_adds(y: *mut ::std::os::raw::c_int,
                            x: *const ::std::os::raw::c_int,
                            c: ::std::os::raw::c_int, n: isize);
}
extern "C" {
    pub fn THIntVector_cmul(z: *mut ::std::os::raw::c_int,
                            x: *const ::std::os::raw::c_int,
                            y: *const ::std::os::raw::c_int, n: isize);
}
extern "C" {
    pub fn THIntVector_muls(y: *mut ::std::os::raw::c_int,
                            x: *const ::std::os::raw::c_int,
                            c: ::std::os::raw::c_int, n: isize);
}
extern "C" {
    pub fn THIntVector_cdiv(z: *mut ::std::os::raw::c_int,
                            x: *const ::std::os::raw::c_int,
                            y: *const ::std::os::raw::c_int, n: isize);
}
extern "C" {
    pub fn THIntVector_divs(y: *mut ::std::os::raw::c_int,
                            x: *const ::std::os::raw::c_int,
                            c: ::std::os::raw::c_int, n: isize);
}
extern "C" {
    pub fn THIntVector_copy(y: *mut ::std::os::raw::c_int,
                            x: *const ::std::os::raw::c_int, n: isize);
}
extern "C" {
    pub fn THIntVector_vectorDispatchInit();
}
extern "C" {
    pub fn THLongVector_fill(x: *mut ::std::os::raw::c_long,
                             c: ::std::os::raw::c_long, n: isize);
}
extern "C" {
    pub fn THLongVector_cadd(z: *mut ::std::os::raw::c_long,
                             x: *const ::std::os::raw::c_long,
                             y: *const ::std::os::raw::c_long,
                             c: ::std::os::raw::c_long, n: isize);
}
extern "C" {
    pub fn THLongVector_adds(y: *mut ::std::os::raw::c_long,
                             x: *const ::std::os::raw::c_long,
                             c: ::std::os::raw::c_long, n: isize);
}
extern "C" {
    pub fn THLongVector_cmul(z: *mut ::std::os::raw::c_long,
                             x: *const ::std::os::raw::c_long,
                             y: *const ::std::os::raw::c_long, n: isize);
}
extern "C" {
    pub fn THLongVector_muls(y: *mut ::std::os::raw::c_long,
                             x: *const ::std::os::raw::c_long,
                             c: ::std::os::raw::c_long, n: isize);
}
extern "C" {
    pub fn THLongVector_cdiv(z: *mut ::std::os::raw::c_long,
                             x: *const ::std::os::raw::c_long,
                             y: *const ::std::os::raw::c_long, n: isize);
}
extern "C" {
    pub fn THLongVector_divs(y: *mut ::std::os::raw::c_long,
                             x: *const ::std::os::raw::c_long,
                             c: ::std::os::raw::c_long, n: isize);
}
extern "C" {
    pub fn THLongVector_copy(y: *mut ::std::os::raw::c_long,
                             x: *const ::std::os::raw::c_long, n: isize);
}
extern "C" {
    pub fn THLongVector_vectorDispatchInit();
}
extern "C" {
    #[link_name = "THLog2Pi"]
    pub static THLog2Pi: f64;
}
extern "C" {
    #[link_name = "THLogZero"]
    pub static THLogZero: f64;
}
extern "C" {
    #[link_name = "THLogOne"]
    pub static THLogOne: f64;
}
extern "C" {
    pub fn THLogAdd(log_a: f64, log_b: f64) -> f64;
}
extern "C" {
    pub fn THLogSub(log_a: f64, log_b: f64) -> f64;
}
extern "C" {
    pub fn THExpMinusApprox(x: f64) -> f64;
}
#[repr(C)]
pub struct THGenerator {
    pub the_initial_seed: ::std::os::raw::c_ulong,
    pub left: ::std::os::raw::c_int,
    pub seeded: ::std::os::raw::c_int,
    pub next: ::std::os::raw::c_ulong,
    pub state: [::std::os::raw::c_ulong; 624usize],
    pub normal_x: f64,
    pub normal_y: f64,
    pub normal_rho: f64,
    pub normal_is_valid: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_THGenerator() {
    assert_eq!(::std::mem::size_of::<THGenerator>() , 5048usize , concat ! (
               "Size of: " , stringify ! ( THGenerator ) ));
    assert_eq! (::std::mem::align_of::<THGenerator>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THGenerator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THGenerator ) ) . the_initial_seed as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THGenerator ) , "::" ,
                stringify ! ( the_initial_seed ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THGenerator ) ) . left as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THGenerator ) , "::" ,
                stringify ! ( left ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THGenerator ) ) . seeded as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( THGenerator ) , "::" ,
                stringify ! ( seeded ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THGenerator ) ) . next as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THGenerator ) , "::" ,
                stringify ! ( next ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THGenerator ) ) . state as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THGenerator ) , "::" ,
                stringify ! ( state ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THGenerator ) ) . normal_x as * const _
                as usize } , 5016usize , concat ! (
                "Alignment of field: " , stringify ! ( THGenerator ) , "::" ,
                stringify ! ( normal_x ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THGenerator ) ) . normal_y as * const _
                as usize } , 5024usize , concat ! (
                "Alignment of field: " , stringify ! ( THGenerator ) , "::" ,
                stringify ! ( normal_y ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THGenerator ) ) . normal_rho as * const _
                as usize } , 5032usize , concat ! (
                "Alignment of field: " , stringify ! ( THGenerator ) , "::" ,
                stringify ! ( normal_rho ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THGenerator ) ) . normal_is_valid as *
                const _ as usize } , 5040usize , concat ! (
                "Alignment of field: " , stringify ! ( THGenerator ) , "::" ,
                stringify ! ( normal_is_valid ) ));
}
extern "C" {
    pub fn THGenerator_new() -> *mut THGenerator;
}
extern "C" {
    pub fn THGenerator_copy(self_: *mut THGenerator, from: *mut THGenerator)
     -> *mut THGenerator;
}
extern "C" {
    pub fn THGenerator_free(gen: *mut THGenerator);
}
extern "C" {
    pub fn THGenerator_isValid(_generator: *mut THGenerator)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THRandom_seed(_generator: *mut THGenerator)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn THRandom_manualSeed(_generator: *mut THGenerator,
                               the_seed_: ::std::os::raw::c_ulong);
}
extern "C" {
    pub fn THRandom_initialSeed(_generator: *mut THGenerator)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn THRandom_random(_generator: *mut THGenerator)
     -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn THRandom_uniform(_generator: *mut THGenerator, a: f64, b: f64)
     -> f64;
}
extern "C" {
    pub fn THRandom_normal(_generator: *mut THGenerator, mean: f64, stdv: f64)
     -> f64;
}
extern "C" {
    pub fn THRandom_exponential(_generator: *mut THGenerator, lambda: f64)
     -> f64;
}
extern "C" {
    pub fn THRandom_cauchy(_generator: *mut THGenerator, median: f64,
                           sigma: f64) -> f64;
}
extern "C" {
    pub fn THRandom_logNormal(_generator: *mut THGenerator, mean: f64,
                              stdv: f64) -> f64;
}
extern "C" {
    pub fn THRandom_geometric(_generator: *mut THGenerator, p: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THRandom_bernoulli(_generator: *mut THGenerator, p: f64)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THSize_isSameSizeAs(sizeA: *const ::std::os::raw::c_long,
                               dimsA: ::std::os::raw::c_long,
                               sizeB: *const ::std::os::raw::c_long,
                               dimsB: ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THSize_nElement(dims: ::std::os::raw::c_long,
                           size: *mut ::std::os::raw::c_long) -> isize;
}
#[repr(C)]
#[derive(Copy)]
pub struct THAllocator {
    pub malloc: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                               *mut ::std::os::raw::c_void,
                                                           arg2: isize)
                                          -> *mut ::std::os::raw::c_void>,
    pub realloc: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                                *mut ::std::os::raw::c_void,
                                                            arg2:
                                                                *mut ::std::os::raw::c_void,
                                                            arg3: isize)
                                           -> *mut ::std::os::raw::c_void>,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1:
                                                             *mut ::std::os::raw::c_void,
                                                         arg2:
                                                             *mut ::std::os::raw::c_void)>,
}
#[test]
fn bindgen_test_layout_THAllocator() {
    assert_eq!(::std::mem::size_of::<THAllocator>() , 24usize , concat ! (
               "Size of: " , stringify ! ( THAllocator ) ));
    assert_eq! (::std::mem::align_of::<THAllocator>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THAllocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THAllocator ) ) . malloc as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THAllocator ) , "::" ,
                stringify ! ( malloc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THAllocator ) ) . realloc as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THAllocator ) , "::" ,
                stringify ! ( realloc ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THAllocator ) ) . free as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THAllocator ) , "::" ,
                stringify ! ( free ) ));
}
impl Clone for THAllocator {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    #[link_name = "THDefaultAllocator"]
    pub static mut THDefaultAllocator: THAllocator;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct THMapAllocatorContext_ {
    _unused: [u8; 0],
}
pub type THMapAllocatorContext = THMapAllocatorContext_;
extern "C" {
    pub fn THMapAllocatorContext_new(filename: *const ::std::os::raw::c_char,
                                     flags: ::std::os::raw::c_int)
     -> *mut THMapAllocatorContext;
}
extern "C" {
    pub fn THMapAllocatorContext_newWithFd(filename:
                                               *const ::std::os::raw::c_char,
                                           fd: ::std::os::raw::c_int,
                                           flags: ::std::os::raw::c_int)
     -> *mut THMapAllocatorContext;
}
extern "C" {
    pub fn THMapAllocatorContext_filename(ctx: *mut THMapAllocatorContext)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn THMapAllocatorContext_fd(ctx: *mut THMapAllocatorContext)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THMapAllocatorContext_size(ctx: *mut THMapAllocatorContext)
     -> isize;
}
extern "C" {
    pub fn THMapAllocatorContext_free(ctx: *mut THMapAllocatorContext);
}
extern "C" {
    pub fn THRefcountedMapAllocator_incref(ctx: *mut THMapAllocatorContext,
                                           data: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn THRefcountedMapAllocator_decref(ctx: *mut THMapAllocatorContext,
                                           data: *mut ::std::os::raw::c_void)
     -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "THMapAllocator"]
    pub static mut THMapAllocator: THAllocator;
}
extern "C" {
    #[link_name = "THRefcountedMapAllocator"]
    pub static mut THRefcountedMapAllocator: THAllocator;
}
#[repr(C)]
#[derive(Copy)]
pub struct THFloatStorage {
    pub data: *mut f32,
    pub size: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
    pub allocator: *mut THAllocator,
    pub allocatorContext: *mut ::std::os::raw::c_void,
    pub view: *mut THFloatStorage,
}
#[test]
fn bindgen_test_layout_THFloatStorage() {
    assert_eq!(::std::mem::size_of::<THFloatStorage>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THFloatStorage ) ));
    assert_eq! (::std::mem::align_of::<THFloatStorage>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THFloatStorage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatStorage ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatStorage ) , "::"
                , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatStorage ) ) . size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatStorage ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatStorage ) ) . refcount as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatStorage ) , "::"
                , stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatStorage ) ) . flag as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatStorage ) , "::"
                , stringify ! ( flag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatStorage ) ) . allocator as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatStorage ) , "::"
                , stringify ! ( allocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatStorage ) ) . allocatorContext as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatStorage ) , "::"
                , stringify ! ( allocatorContext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatStorage ) ) . view as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatStorage ) , "::"
                , stringify ! ( view ) ));
}
impl Clone for THFloatStorage {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THFloatStorage_data(arg1: *const THFloatStorage) -> *mut f32;
}
extern "C" {
    pub fn THFloatStorage_size(arg1: *const THFloatStorage) -> isize;
}
extern "C" {
    pub fn THFloatStorage_elementSize() -> usize;
}
extern "C" {
    pub fn THFloatStorage_set(arg1: *mut THFloatStorage, arg2: isize,
                              arg3: f32);
}
extern "C" {
    pub fn THFloatStorage_get(arg1: *const THFloatStorage, arg2: isize)
     -> f32;
}
extern "C" {
    pub fn THFloatStorage_new() -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatStorage_newWithSize(size: isize) -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatStorage_newWithSize1(arg1: f32) -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatStorage_newWithSize2(arg1: f32, arg2: f32)
     -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatStorage_newWithSize3(arg1: f32, arg2: f32, arg3: f32)
     -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatStorage_newWithSize4(arg1: f32, arg2: f32, arg3: f32,
                                       arg4: f32) -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatStorage_newWithMapping(filename:
                                             *const ::std::os::raw::c_char,
                                         size: isize,
                                         flags: ::std::os::raw::c_int)
     -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatStorage_newWithData(data: *mut f32, size: isize)
     -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatStorage_newWithAllocator(size: isize,
                                           allocator: *mut THAllocator,
                                           allocatorContext:
                                               *mut ::std::os::raw::c_void)
     -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatStorage_newWithDataAndAllocator(data: *mut f32, size: isize,
                                                  allocator: *mut THAllocator,
                                                  allocatorContext:
                                                      *mut ::std::os::raw::c_void)
     -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatStorage_setFlag(storage: *mut THFloatStorage,
                                  flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatStorage_clearFlag(storage: *mut THFloatStorage,
                                    flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatStorage_retain(storage: *mut THFloatStorage);
}
extern "C" {
    pub fn THFloatStorage_swap(storage1: *mut THFloatStorage,
                               storage2: *mut THFloatStorage);
}
extern "C" {
    pub fn THFloatStorage_free(storage: *mut THFloatStorage);
}
extern "C" {
    pub fn THFloatStorage_resize(storage: *mut THFloatStorage, size: isize);
}
extern "C" {
    pub fn THFloatStorage_fill(storage: *mut THFloatStorage, value: f32);
}
#[repr(C)]
#[derive(Copy)]
pub struct THDoubleStorage {
    pub data: *mut f64,
    pub size: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
    pub allocator: *mut THAllocator,
    pub allocatorContext: *mut ::std::os::raw::c_void,
    pub view: *mut THDoubleStorage,
}
#[test]
fn bindgen_test_layout_THDoubleStorage() {
    assert_eq!(::std::mem::size_of::<THDoubleStorage>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THDoubleStorage ) ));
    assert_eq! (::std::mem::align_of::<THDoubleStorage>() , 8usize , concat !
                ( "Alignment of " , stringify ! ( THDoubleStorage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleStorage ) ) . data as * const _
                as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleStorage ) ,
                "::" , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleStorage ) ) . size as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleStorage ) ,
                "::" , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleStorage ) ) . refcount as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleStorage ) ,
                "::" , stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleStorage ) ) . flag as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleStorage ) ,
                "::" , stringify ! ( flag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleStorage ) ) . allocator as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleStorage ) ,
                "::" , stringify ! ( allocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleStorage ) ) . allocatorContext as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleStorage ) ,
                "::" , stringify ! ( allocatorContext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleStorage ) ) . view as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleStorage ) ,
                "::" , stringify ! ( view ) ));
}
impl Clone for THDoubleStorage {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THDoubleStorage_data(arg1: *const THDoubleStorage) -> *mut f64;
}
extern "C" {
    pub fn THDoubleStorage_size(arg1: *const THDoubleStorage) -> isize;
}
extern "C" {
    pub fn THDoubleStorage_elementSize() -> usize;
}
extern "C" {
    pub fn THDoubleStorage_set(arg1: *mut THDoubleStorage, arg2: isize,
                               arg3: f64);
}
extern "C" {
    pub fn THDoubleStorage_get(arg1: *const THDoubleStorage, arg2: isize)
     -> f64;
}
extern "C" {
    pub fn THDoubleStorage_new() -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleStorage_newWithSize(size: isize) -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleStorage_newWithSize1(arg1: f64) -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleStorage_newWithSize2(arg1: f64, arg2: f64)
     -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleStorage_newWithSize3(arg1: f64, arg2: f64, arg3: f64)
     -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleStorage_newWithSize4(arg1: f64, arg2: f64, arg3: f64,
                                        arg4: f64) -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleStorage_newWithMapping(filename:
                                              *const ::std::os::raw::c_char,
                                          size: isize,
                                          flags: ::std::os::raw::c_int)
     -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleStorage_newWithData(data: *mut f64, size: isize)
     -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleStorage_newWithAllocator(size: isize,
                                            allocator: *mut THAllocator,
                                            allocatorContext:
                                                *mut ::std::os::raw::c_void)
     -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleStorage_newWithDataAndAllocator(data: *mut f64,
                                                   size: isize,
                                                   allocator:
                                                       *mut THAllocator,
                                                   allocatorContext:
                                                       *mut ::std::os::raw::c_void)
     -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleStorage_setFlag(storage: *mut THDoubleStorage,
                                   flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleStorage_clearFlag(storage: *mut THDoubleStorage,
                                     flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleStorage_retain(storage: *mut THDoubleStorage);
}
extern "C" {
    pub fn THDoubleStorage_swap(storage1: *mut THDoubleStorage,
                                storage2: *mut THDoubleStorage);
}
extern "C" {
    pub fn THDoubleStorage_free(storage: *mut THDoubleStorage);
}
extern "C" {
    pub fn THDoubleStorage_resize(storage: *mut THDoubleStorage, size: isize);
}
extern "C" {
    pub fn THDoubleStorage_fill(storage: *mut THDoubleStorage, value: f64);
}
#[repr(C)]
#[derive(Copy)]
pub struct THByteStorage {
    pub data: *mut ::std::os::raw::c_uchar,
    pub size: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
    pub allocator: *mut THAllocator,
    pub allocatorContext: *mut ::std::os::raw::c_void,
    pub view: *mut THByteStorage,
}
#[test]
fn bindgen_test_layout_THByteStorage() {
    assert_eq!(::std::mem::size_of::<THByteStorage>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THByteStorage ) ));
    assert_eq! (::std::mem::align_of::<THByteStorage>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THByteStorage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteStorage ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteStorage ) , "::"
                , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteStorage ) ) . size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteStorage ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteStorage ) ) . refcount as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteStorage ) , "::"
                , stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteStorage ) ) . flag as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteStorage ) , "::"
                , stringify ! ( flag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteStorage ) ) . allocator as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteStorage ) , "::"
                , stringify ! ( allocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteStorage ) ) . allocatorContext as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteStorage ) , "::"
                , stringify ! ( allocatorContext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteStorage ) ) . view as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteStorage ) , "::"
                , stringify ! ( view ) ));
}
impl Clone for THByteStorage {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THByteStorage_data(arg1: *const THByteStorage)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteStorage_size(arg1: *const THByteStorage) -> isize;
}
extern "C" {
    pub fn THByteStorage_elementSize() -> usize;
}
extern "C" {
    pub fn THByteStorage_set(arg1: *mut THByteStorage, arg2: isize,
                             arg3: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteStorage_get(arg1: *const THByteStorage, arg2: isize)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteStorage_new() -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteStorage_newWithSize(size: isize) -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteStorage_newWithSize1(arg1: ::std::os::raw::c_uchar)
     -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteStorage_newWithSize2(arg1: ::std::os::raw::c_uchar,
                                      arg2: ::std::os::raw::c_uchar)
     -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteStorage_newWithSize3(arg1: ::std::os::raw::c_uchar,
                                      arg2: ::std::os::raw::c_uchar,
                                      arg3: ::std::os::raw::c_uchar)
     -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteStorage_newWithSize4(arg1: ::std::os::raw::c_uchar,
                                      arg2: ::std::os::raw::c_uchar,
                                      arg3: ::std::os::raw::c_uchar,
                                      arg4: ::std::os::raw::c_uchar)
     -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteStorage_newWithMapping(filename:
                                            *const ::std::os::raw::c_char,
                                        size: isize,
                                        flags: ::std::os::raw::c_int)
     -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteStorage_newWithData(data: *mut ::std::os::raw::c_uchar,
                                     size: isize) -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteStorage_newWithAllocator(size: isize,
                                          allocator: *mut THAllocator,
                                          allocatorContext:
                                              *mut ::std::os::raw::c_void)
     -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteStorage_newWithDataAndAllocator(data:
                                                     *mut ::std::os::raw::c_uchar,
                                                 size: isize,
                                                 allocator: *mut THAllocator,
                                                 allocatorContext:
                                                     *mut ::std::os::raw::c_void)
     -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteStorage_setFlag(storage: *mut THByteStorage,
                                 flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteStorage_clearFlag(storage: *mut THByteStorage,
                                   flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteStorage_retain(storage: *mut THByteStorage);
}
extern "C" {
    pub fn THByteStorage_swap(storage1: *mut THByteStorage,
                              storage2: *mut THByteStorage);
}
extern "C" {
    pub fn THByteStorage_free(storage: *mut THByteStorage);
}
extern "C" {
    pub fn THByteStorage_resize(storage: *mut THByteStorage, size: isize);
}
extern "C" {
    pub fn THByteStorage_fill(storage: *mut THByteStorage,
                              value: ::std::os::raw::c_uchar);
}
#[repr(C)]
#[derive(Copy)]
pub struct THCharStorage {
    pub data: *mut ::std::os::raw::c_char,
    pub size: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
    pub allocator: *mut THAllocator,
    pub allocatorContext: *mut ::std::os::raw::c_void,
    pub view: *mut THCharStorage,
}
#[test]
fn bindgen_test_layout_THCharStorage() {
    assert_eq!(::std::mem::size_of::<THCharStorage>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THCharStorage ) ));
    assert_eq! (::std::mem::align_of::<THCharStorage>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THCharStorage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharStorage ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharStorage ) , "::"
                , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharStorage ) ) . size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharStorage ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharStorage ) ) . refcount as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharStorage ) , "::"
                , stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharStorage ) ) . flag as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharStorage ) , "::"
                , stringify ! ( flag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharStorage ) ) . allocator as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharStorage ) , "::"
                , stringify ! ( allocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharStorage ) ) . allocatorContext as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharStorage ) , "::"
                , stringify ! ( allocatorContext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharStorage ) ) . view as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharStorage ) , "::"
                , stringify ! ( view ) ));
}
impl Clone for THCharStorage {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THCharStorage_data(arg1: *const THCharStorage)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharStorage_size(arg1: *const THCharStorage) -> isize;
}
extern "C" {
    pub fn THCharStorage_elementSize() -> usize;
}
extern "C" {
    pub fn THCharStorage_set(arg1: *mut THCharStorage, arg2: isize,
                             arg3: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharStorage_get(arg1: *const THCharStorage, arg2: isize)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharStorage_new() -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharStorage_newWithSize(size: isize) -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharStorage_newWithSize1(arg1: ::std::os::raw::c_char)
     -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharStorage_newWithSize2(arg1: ::std::os::raw::c_char,
                                      arg2: ::std::os::raw::c_char)
     -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharStorage_newWithSize3(arg1: ::std::os::raw::c_char,
                                      arg2: ::std::os::raw::c_char,
                                      arg3: ::std::os::raw::c_char)
     -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharStorage_newWithSize4(arg1: ::std::os::raw::c_char,
                                      arg2: ::std::os::raw::c_char,
                                      arg3: ::std::os::raw::c_char,
                                      arg4: ::std::os::raw::c_char)
     -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharStorage_newWithMapping(filename:
                                            *const ::std::os::raw::c_char,
                                        size: isize,
                                        flags: ::std::os::raw::c_int)
     -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharStorage_newWithData(data: *mut ::std::os::raw::c_char,
                                     size: isize) -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharStorage_newWithAllocator(size: isize,
                                          allocator: *mut THAllocator,
                                          allocatorContext:
                                              *mut ::std::os::raw::c_void)
     -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharStorage_newWithDataAndAllocator(data:
                                                     *mut ::std::os::raw::c_char,
                                                 size: isize,
                                                 allocator: *mut THAllocator,
                                                 allocatorContext:
                                                     *mut ::std::os::raw::c_void)
     -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharStorage_setFlag(storage: *mut THCharStorage,
                                 flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharStorage_clearFlag(storage: *mut THCharStorage,
                                   flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharStorage_retain(storage: *mut THCharStorage);
}
extern "C" {
    pub fn THCharStorage_swap(storage1: *mut THCharStorage,
                              storage2: *mut THCharStorage);
}
extern "C" {
    pub fn THCharStorage_free(storage: *mut THCharStorage);
}
extern "C" {
    pub fn THCharStorage_resize(storage: *mut THCharStorage, size: isize);
}
extern "C" {
    pub fn THCharStorage_fill(storage: *mut THCharStorage,
                              value: ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Copy)]
pub struct THShortStorage {
    pub data: *mut ::std::os::raw::c_short,
    pub size: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
    pub allocator: *mut THAllocator,
    pub allocatorContext: *mut ::std::os::raw::c_void,
    pub view: *mut THShortStorage,
}
#[test]
fn bindgen_test_layout_THShortStorage() {
    assert_eq!(::std::mem::size_of::<THShortStorage>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THShortStorage ) ));
    assert_eq! (::std::mem::align_of::<THShortStorage>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THShortStorage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortStorage ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortStorage ) , "::"
                , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortStorage ) ) . size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortStorage ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortStorage ) ) . refcount as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortStorage ) , "::"
                , stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortStorage ) ) . flag as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortStorage ) , "::"
                , stringify ! ( flag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortStorage ) ) . allocator as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortStorage ) , "::"
                , stringify ! ( allocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortStorage ) ) . allocatorContext as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortStorage ) , "::"
                , stringify ! ( allocatorContext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortStorage ) ) . view as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortStorage ) , "::"
                , stringify ! ( view ) ));
}
impl Clone for THShortStorage {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THShortStorage_data(arg1: *const THShortStorage)
     -> *mut ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortStorage_size(arg1: *const THShortStorage) -> isize;
}
extern "C" {
    pub fn THShortStorage_elementSize() -> usize;
}
extern "C" {
    pub fn THShortStorage_set(arg1: *mut THShortStorage, arg2: isize,
                              arg3: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortStorage_get(arg1: *const THShortStorage, arg2: isize)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortStorage_new() -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortStorage_newWithSize(size: isize) -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortStorage_newWithSize1(arg1: ::std::os::raw::c_short)
     -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortStorage_newWithSize2(arg1: ::std::os::raw::c_short,
                                       arg2: ::std::os::raw::c_short)
     -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortStorage_newWithSize3(arg1: ::std::os::raw::c_short,
                                       arg2: ::std::os::raw::c_short,
                                       arg3: ::std::os::raw::c_short)
     -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortStorage_newWithSize4(arg1: ::std::os::raw::c_short,
                                       arg2: ::std::os::raw::c_short,
                                       arg3: ::std::os::raw::c_short,
                                       arg4: ::std::os::raw::c_short)
     -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortStorage_newWithMapping(filename:
                                             *const ::std::os::raw::c_char,
                                         size: isize,
                                         flags: ::std::os::raw::c_int)
     -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortStorage_newWithData(data: *mut ::std::os::raw::c_short,
                                      size: isize) -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortStorage_newWithAllocator(size: isize,
                                           allocator: *mut THAllocator,
                                           allocatorContext:
                                               *mut ::std::os::raw::c_void)
     -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortStorage_newWithDataAndAllocator(data:
                                                      *mut ::std::os::raw::c_short,
                                                  size: isize,
                                                  allocator: *mut THAllocator,
                                                  allocatorContext:
                                                      *mut ::std::os::raw::c_void)
     -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortStorage_setFlag(storage: *mut THShortStorage,
                                  flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortStorage_clearFlag(storage: *mut THShortStorage,
                                    flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortStorage_retain(storage: *mut THShortStorage);
}
extern "C" {
    pub fn THShortStorage_swap(storage1: *mut THShortStorage,
                               storage2: *mut THShortStorage);
}
extern "C" {
    pub fn THShortStorage_free(storage: *mut THShortStorage);
}
extern "C" {
    pub fn THShortStorage_resize(storage: *mut THShortStorage, size: isize);
}
extern "C" {
    pub fn THShortStorage_fill(storage: *mut THShortStorage,
                               value: ::std::os::raw::c_short);
}
#[repr(C)]
#[derive(Copy)]
pub struct THIntStorage {
    pub data: *mut ::std::os::raw::c_int,
    pub size: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
    pub allocator: *mut THAllocator,
    pub allocatorContext: *mut ::std::os::raw::c_void,
    pub view: *mut THIntStorage,
}
#[test]
fn bindgen_test_layout_THIntStorage() {
    assert_eq!(::std::mem::size_of::<THIntStorage>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THIntStorage ) ));
    assert_eq! (::std::mem::align_of::<THIntStorage>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THIntStorage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntStorage ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntStorage ) , "::" ,
                stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntStorage ) ) . size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntStorage ) , "::" ,
                stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntStorage ) ) . refcount as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntStorage ) , "::" ,
                stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntStorage ) ) . flag as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntStorage ) , "::" ,
                stringify ! ( flag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntStorage ) ) . allocator as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntStorage ) , "::" ,
                stringify ! ( allocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntStorage ) ) . allocatorContext as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntStorage ) , "::" ,
                stringify ! ( allocatorContext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntStorage ) ) . view as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntStorage ) , "::" ,
                stringify ! ( view ) ));
}
impl Clone for THIntStorage {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THIntStorage_data(arg1: *const THIntStorage)
     -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntStorage_size(arg1: *const THIntStorage) -> isize;
}
extern "C" {
    pub fn THIntStorage_elementSize() -> usize;
}
extern "C" {
    pub fn THIntStorage_set(arg1: *mut THIntStorage, arg2: isize,
                            arg3: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntStorage_get(arg1: *const THIntStorage, arg2: isize)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntStorage_new() -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntStorage_newWithSize(size: isize) -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntStorage_newWithSize1(arg1: ::std::os::raw::c_int)
     -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntStorage_newWithSize2(arg1: ::std::os::raw::c_int,
                                     arg2: ::std::os::raw::c_int)
     -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntStorage_newWithSize3(arg1: ::std::os::raw::c_int,
                                     arg2: ::std::os::raw::c_int,
                                     arg3: ::std::os::raw::c_int)
     -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntStorage_newWithSize4(arg1: ::std::os::raw::c_int,
                                     arg2: ::std::os::raw::c_int,
                                     arg3: ::std::os::raw::c_int,
                                     arg4: ::std::os::raw::c_int)
     -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntStorage_newWithMapping(filename:
                                           *const ::std::os::raw::c_char,
                                       size: isize,
                                       flags: ::std::os::raw::c_int)
     -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntStorage_newWithData(data: *mut ::std::os::raw::c_int,
                                    size: isize) -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntStorage_newWithAllocator(size: isize,
                                         allocator: *mut THAllocator,
                                         allocatorContext:
                                             *mut ::std::os::raw::c_void)
     -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntStorage_newWithDataAndAllocator(data:
                                                    *mut ::std::os::raw::c_int,
                                                size: isize,
                                                allocator: *mut THAllocator,
                                                allocatorContext:
                                                    *mut ::std::os::raw::c_void)
     -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntStorage_setFlag(storage: *mut THIntStorage,
                                flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntStorage_clearFlag(storage: *mut THIntStorage,
                                  flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntStorage_retain(storage: *mut THIntStorage);
}
extern "C" {
    pub fn THIntStorage_swap(storage1: *mut THIntStorage,
                             storage2: *mut THIntStorage);
}
extern "C" {
    pub fn THIntStorage_free(storage: *mut THIntStorage);
}
extern "C" {
    pub fn THIntStorage_resize(storage: *mut THIntStorage, size: isize);
}
extern "C" {
    pub fn THIntStorage_fill(storage: *mut THIntStorage,
                             value: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Copy)]
pub struct THLongStorage {
    pub data: *mut ::std::os::raw::c_long,
    pub size: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
    pub allocator: *mut THAllocator,
    pub allocatorContext: *mut ::std::os::raw::c_void,
    pub view: *mut THLongStorage,
}
#[test]
fn bindgen_test_layout_THLongStorage() {
    assert_eq!(::std::mem::size_of::<THLongStorage>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THLongStorage ) ));
    assert_eq! (::std::mem::align_of::<THLongStorage>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THLongStorage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongStorage ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongStorage ) , "::"
                , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongStorage ) ) . size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongStorage ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongStorage ) ) . refcount as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongStorage ) , "::"
                , stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongStorage ) ) . flag as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongStorage ) , "::"
                , stringify ! ( flag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongStorage ) ) . allocator as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongStorage ) , "::"
                , stringify ! ( allocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongStorage ) ) . allocatorContext as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongStorage ) , "::"
                , stringify ! ( allocatorContext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongStorage ) ) . view as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongStorage ) , "::"
                , stringify ! ( view ) ));
}
impl Clone for THLongStorage {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THLongStorage_data(arg1: *const THLongStorage)
     -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongStorage_size(arg1: *const THLongStorage) -> isize;
}
extern "C" {
    pub fn THLongStorage_elementSize() -> usize;
}
extern "C" {
    pub fn THLongStorage_set(arg1: *mut THLongStorage, arg2: isize,
                             arg3: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongStorage_get(arg1: *const THLongStorage, arg2: isize)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongStorage_new() -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_newWithSize(size: isize) -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_newWithSize1(arg1: ::std::os::raw::c_long)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_newWithSize2(arg1: ::std::os::raw::c_long,
                                      arg2: ::std::os::raw::c_long)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_newWithSize3(arg1: ::std::os::raw::c_long,
                                      arg2: ::std::os::raw::c_long,
                                      arg3: ::std::os::raw::c_long)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_newWithSize4(arg1: ::std::os::raw::c_long,
                                      arg2: ::std::os::raw::c_long,
                                      arg3: ::std::os::raw::c_long,
                                      arg4: ::std::os::raw::c_long)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_newWithMapping(filename:
                                            *const ::std::os::raw::c_char,
                                        size: isize,
                                        flags: ::std::os::raw::c_int)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_newWithData(data: *mut ::std::os::raw::c_long,
                                     size: isize) -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_newWithAllocator(size: isize,
                                          allocator: *mut THAllocator,
                                          allocatorContext:
                                              *mut ::std::os::raw::c_void)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_newWithDataAndAllocator(data:
                                                     *mut ::std::os::raw::c_long,
                                                 size: isize,
                                                 allocator: *mut THAllocator,
                                                 allocatorContext:
                                                     *mut ::std::os::raw::c_void)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_setFlag(storage: *mut THLongStorage,
                                 flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongStorage_clearFlag(storage: *mut THLongStorage,
                                   flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongStorage_retain(storage: *mut THLongStorage);
}
extern "C" {
    pub fn THLongStorage_swap(storage1: *mut THLongStorage,
                              storage2: *mut THLongStorage);
}
extern "C" {
    pub fn THLongStorage_free(storage: *mut THLongStorage);
}
extern "C" {
    pub fn THLongStorage_resize(storage: *mut THLongStorage, size: isize);
}
extern "C" {
    pub fn THLongStorage_fill(storage: *mut THLongStorage,
                              value: ::std::os::raw::c_long);
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct __THHalf {
    pub x: ::std::os::raw::c_ushort,
}
#[test]
fn bindgen_test_layout___THHalf() {
    assert_eq!(::std::mem::size_of::<__THHalf>() , 2usize , concat ! (
               "Size of: " , stringify ! ( __THHalf ) ));
    assert_eq! (::std::mem::align_of::<__THHalf>() , 2usize , concat ! (
                "Alignment of " , stringify ! ( __THHalf ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __THHalf ) ) . x as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __THHalf ) , "::" ,
                stringify ! ( x ) ));
}
impl Clone for __THHalf {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Copy)]
pub struct __THHalf2 {
    pub x: ::std::os::raw::c_uint,
}
#[test]
fn bindgen_test_layout___THHalf2() {
    assert_eq!(::std::mem::size_of::<__THHalf2>() , 4usize , concat ! (
               "Size of: " , stringify ! ( __THHalf2 ) ));
    assert_eq! (::std::mem::align_of::<__THHalf2>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( __THHalf2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __THHalf2 ) ) . x as * const _ as usize }
                , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __THHalf2 ) , "::" ,
                stringify ! ( x ) ));
}
impl Clone for __THHalf2 {
    fn clone(&self) -> Self { *self }
}
pub type THHalf = __THHalf;
pub type THHalf2 = __THHalf2;
extern "C" {
    pub fn TH_float2halfbits(arg1: *mut f32,
                             arg2: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn TH_halfbits2float(arg1: *mut ::std::os::raw::c_ushort,
                             arg2: *mut f32);
}
extern "C" {
    pub fn TH_float2half(arg1: f32) -> THHalf;
}
extern "C" {
    pub fn TH_half2float(arg1: THHalf) -> f32;
}
#[repr(C)]
#[derive(Copy)]
pub struct THHalfStorage {
    pub data: *mut THHalf,
    pub size: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
    pub allocator: *mut THAllocator,
    pub allocatorContext: *mut ::std::os::raw::c_void,
    pub view: *mut THHalfStorage,
}
#[test]
fn bindgen_test_layout_THHalfStorage() {
    assert_eq!(::std::mem::size_of::<THHalfStorage>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THHalfStorage ) ));
    assert_eq! (::std::mem::align_of::<THHalfStorage>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THHalfStorage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfStorage ) ) . data as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfStorage ) , "::"
                , stringify ! ( data ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfStorage ) ) . size as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfStorage ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfStorage ) ) . refcount as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfStorage ) , "::"
                , stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfStorage ) ) . flag as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfStorage ) , "::"
                , stringify ! ( flag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfStorage ) ) . allocator as * const
                _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfStorage ) , "::"
                , stringify ! ( allocator ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfStorage ) ) . allocatorContext as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfStorage ) , "::"
                , stringify ! ( allocatorContext ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfStorage ) ) . view as * const _ as
                usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfStorage ) , "::"
                , stringify ! ( view ) ));
}
impl Clone for THHalfStorage {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THHalfStorage_data(arg1: *const THHalfStorage) -> *mut THHalf;
}
extern "C" {
    pub fn THHalfStorage_size(arg1: *const THHalfStorage) -> isize;
}
extern "C" {
    pub fn THHalfStorage_elementSize() -> usize;
}
extern "C" {
    pub fn THHalfStorage_set(arg1: *mut THHalfStorage, arg2: isize,
                             arg3: THHalf);
}
extern "C" {
    pub fn THHalfStorage_get(arg1: *const THHalfStorage, arg2: isize)
     -> THHalf;
}
extern "C" {
    pub fn THHalfStorage_new() -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfStorage_newWithSize(size: isize) -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfStorage_newWithSize1(arg1: THHalf) -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfStorage_newWithSize2(arg1: THHalf, arg2: THHalf)
     -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfStorage_newWithSize3(arg1: THHalf, arg2: THHalf,
                                      arg3: THHalf) -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfStorage_newWithSize4(arg1: THHalf, arg2: THHalf,
                                      arg3: THHalf, arg4: THHalf)
     -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfStorage_newWithMapping(filename:
                                            *const ::std::os::raw::c_char,
                                        size: isize,
                                        flags: ::std::os::raw::c_int)
     -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfStorage_newWithData(data: *mut THHalf, size: isize)
     -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfStorage_newWithAllocator(size: isize,
                                          allocator: *mut THAllocator,
                                          allocatorContext:
                                              *mut ::std::os::raw::c_void)
     -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfStorage_newWithDataAndAllocator(data: *mut THHalf,
                                                 size: isize,
                                                 allocator: *mut THAllocator,
                                                 allocatorContext:
                                                     *mut ::std::os::raw::c_void)
     -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfStorage_setFlag(storage: *mut THHalfStorage,
                                 flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THHalfStorage_clearFlag(storage: *mut THHalfStorage,
                                   flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THHalfStorage_retain(storage: *mut THHalfStorage);
}
extern "C" {
    pub fn THHalfStorage_swap(storage1: *mut THHalfStorage,
                              storage2: *mut THHalfStorage);
}
extern "C" {
    pub fn THHalfStorage_free(storage: *mut THHalfStorage);
}
extern "C" {
    pub fn THHalfStorage_resize(storage: *mut THHalfStorage, size: isize);
}
extern "C" {
    pub fn THHalfStorage_fill(storage: *mut THHalfStorage, value: THHalf);
}
extern "C" {
    pub fn THFloatStorage_rawCopy(storage: *mut THFloatStorage,
                                  src: *mut f32);
}
extern "C" {
    pub fn THFloatStorage_copy(storage: *mut THFloatStorage,
                               src: *mut THFloatStorage);
}
extern "C" {
    pub fn THFloatStorage_copyByte(storage: *mut THFloatStorage,
                                   src: *mut THByteStorage);
}
extern "C" {
    pub fn THFloatStorage_copyChar(storage: *mut THFloatStorage,
                                   src: *mut THCharStorage);
}
extern "C" {
    pub fn THFloatStorage_copyShort(storage: *mut THFloatStorage,
                                    src: *mut THShortStorage);
}
extern "C" {
    pub fn THFloatStorage_copyInt(storage: *mut THFloatStorage,
                                  src: *mut THIntStorage);
}
extern "C" {
    pub fn THFloatStorage_copyLong(storage: *mut THFloatStorage,
                                   src: *mut THLongStorage);
}
extern "C" {
    pub fn THFloatStorage_copyFloat(storage: *mut THFloatStorage,
                                    src: *mut THFloatStorage);
}
extern "C" {
    pub fn THFloatStorage_copyDouble(storage: *mut THFloatStorage,
                                     src: *mut THDoubleStorage);
}
extern "C" {
    pub fn THFloatStorage_copyHalf(storage: *mut THFloatStorage,
                                   src: *mut THHalfStorage);
}
extern "C" {
    pub fn THDoubleStorage_rawCopy(storage: *mut THDoubleStorage,
                                   src: *mut f64);
}
extern "C" {
    pub fn THDoubleStorage_copy(storage: *mut THDoubleStorage,
                                src: *mut THDoubleStorage);
}
extern "C" {
    pub fn THDoubleStorage_copyByte(storage: *mut THDoubleStorage,
                                    src: *mut THByteStorage);
}
extern "C" {
    pub fn THDoubleStorage_copyChar(storage: *mut THDoubleStorage,
                                    src: *mut THCharStorage);
}
extern "C" {
    pub fn THDoubleStorage_copyShort(storage: *mut THDoubleStorage,
                                     src: *mut THShortStorage);
}
extern "C" {
    pub fn THDoubleStorage_copyInt(storage: *mut THDoubleStorage,
                                   src: *mut THIntStorage);
}
extern "C" {
    pub fn THDoubleStorage_copyLong(storage: *mut THDoubleStorage,
                                    src: *mut THLongStorage);
}
extern "C" {
    pub fn THDoubleStorage_copyFloat(storage: *mut THDoubleStorage,
                                     src: *mut THFloatStorage);
}
extern "C" {
    pub fn THDoubleStorage_copyDouble(storage: *mut THDoubleStorage,
                                      src: *mut THDoubleStorage);
}
extern "C" {
    pub fn THDoubleStorage_copyHalf(storage: *mut THDoubleStorage,
                                    src: *mut THHalfStorage);
}
extern "C" {
    pub fn THByteStorage_rawCopy(storage: *mut THByteStorage,
                                 src: *mut ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteStorage_copy(storage: *mut THByteStorage,
                              src: *mut THByteStorage);
}
extern "C" {
    pub fn THByteStorage_copyByte(storage: *mut THByteStorage,
                                  src: *mut THByteStorage);
}
extern "C" {
    pub fn THByteStorage_copyChar(storage: *mut THByteStorage,
                                  src: *mut THCharStorage);
}
extern "C" {
    pub fn THByteStorage_copyShort(storage: *mut THByteStorage,
                                   src: *mut THShortStorage);
}
extern "C" {
    pub fn THByteStorage_copyInt(storage: *mut THByteStorage,
                                 src: *mut THIntStorage);
}
extern "C" {
    pub fn THByteStorage_copyLong(storage: *mut THByteStorage,
                                  src: *mut THLongStorage);
}
extern "C" {
    pub fn THByteStorage_copyFloat(storage: *mut THByteStorage,
                                   src: *mut THFloatStorage);
}
extern "C" {
    pub fn THByteStorage_copyDouble(storage: *mut THByteStorage,
                                    src: *mut THDoubleStorage);
}
extern "C" {
    pub fn THByteStorage_copyHalf(storage: *mut THByteStorage,
                                  src: *mut THHalfStorage);
}
extern "C" {
    pub fn THCharStorage_rawCopy(storage: *mut THCharStorage,
                                 src: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharStorage_copy(storage: *mut THCharStorage,
                              src: *mut THCharStorage);
}
extern "C" {
    pub fn THCharStorage_copyByte(storage: *mut THCharStorage,
                                  src: *mut THByteStorage);
}
extern "C" {
    pub fn THCharStorage_copyChar(storage: *mut THCharStorage,
                                  src: *mut THCharStorage);
}
extern "C" {
    pub fn THCharStorage_copyShort(storage: *mut THCharStorage,
                                   src: *mut THShortStorage);
}
extern "C" {
    pub fn THCharStorage_copyInt(storage: *mut THCharStorage,
                                 src: *mut THIntStorage);
}
extern "C" {
    pub fn THCharStorage_copyLong(storage: *mut THCharStorage,
                                  src: *mut THLongStorage);
}
extern "C" {
    pub fn THCharStorage_copyFloat(storage: *mut THCharStorage,
                                   src: *mut THFloatStorage);
}
extern "C" {
    pub fn THCharStorage_copyDouble(storage: *mut THCharStorage,
                                    src: *mut THDoubleStorage);
}
extern "C" {
    pub fn THCharStorage_copyHalf(storage: *mut THCharStorage,
                                  src: *mut THHalfStorage);
}
extern "C" {
    pub fn THShortStorage_rawCopy(storage: *mut THShortStorage,
                                  src: *mut ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortStorage_copy(storage: *mut THShortStorage,
                               src: *mut THShortStorage);
}
extern "C" {
    pub fn THShortStorage_copyByte(storage: *mut THShortStorage,
                                   src: *mut THByteStorage);
}
extern "C" {
    pub fn THShortStorage_copyChar(storage: *mut THShortStorage,
                                   src: *mut THCharStorage);
}
extern "C" {
    pub fn THShortStorage_copyShort(storage: *mut THShortStorage,
                                    src: *mut THShortStorage);
}
extern "C" {
    pub fn THShortStorage_copyInt(storage: *mut THShortStorage,
                                  src: *mut THIntStorage);
}
extern "C" {
    pub fn THShortStorage_copyLong(storage: *mut THShortStorage,
                                   src: *mut THLongStorage);
}
extern "C" {
    pub fn THShortStorage_copyFloat(storage: *mut THShortStorage,
                                    src: *mut THFloatStorage);
}
extern "C" {
    pub fn THShortStorage_copyDouble(storage: *mut THShortStorage,
                                     src: *mut THDoubleStorage);
}
extern "C" {
    pub fn THShortStorage_copyHalf(storage: *mut THShortStorage,
                                   src: *mut THHalfStorage);
}
extern "C" {
    pub fn THIntStorage_rawCopy(storage: *mut THIntStorage,
                                src: *mut ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntStorage_copy(storage: *mut THIntStorage,
                             src: *mut THIntStorage);
}
extern "C" {
    pub fn THIntStorage_copyByte(storage: *mut THIntStorage,
                                 src: *mut THByteStorage);
}
extern "C" {
    pub fn THIntStorage_copyChar(storage: *mut THIntStorage,
                                 src: *mut THCharStorage);
}
extern "C" {
    pub fn THIntStorage_copyShort(storage: *mut THIntStorage,
                                  src: *mut THShortStorage);
}
extern "C" {
    pub fn THIntStorage_copyInt(storage: *mut THIntStorage,
                                src: *mut THIntStorage);
}
extern "C" {
    pub fn THIntStorage_copyLong(storage: *mut THIntStorage,
                                 src: *mut THLongStorage);
}
extern "C" {
    pub fn THIntStorage_copyFloat(storage: *mut THIntStorage,
                                  src: *mut THFloatStorage);
}
extern "C" {
    pub fn THIntStorage_copyDouble(storage: *mut THIntStorage,
                                   src: *mut THDoubleStorage);
}
extern "C" {
    pub fn THIntStorage_copyHalf(storage: *mut THIntStorage,
                                 src: *mut THHalfStorage);
}
extern "C" {
    pub fn THLongStorage_rawCopy(storage: *mut THLongStorage,
                                 src: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongStorage_copy(storage: *mut THLongStorage,
                              src: *mut THLongStorage);
}
extern "C" {
    pub fn THLongStorage_copyByte(storage: *mut THLongStorage,
                                  src: *mut THByteStorage);
}
extern "C" {
    pub fn THLongStorage_copyChar(storage: *mut THLongStorage,
                                  src: *mut THCharStorage);
}
extern "C" {
    pub fn THLongStorage_copyShort(storage: *mut THLongStorage,
                                   src: *mut THShortStorage);
}
extern "C" {
    pub fn THLongStorage_copyInt(storage: *mut THLongStorage,
                                 src: *mut THIntStorage);
}
extern "C" {
    pub fn THLongStorage_copyLong(storage: *mut THLongStorage,
                                  src: *mut THLongStorage);
}
extern "C" {
    pub fn THLongStorage_copyFloat(storage: *mut THLongStorage,
                                   src: *mut THFloatStorage);
}
extern "C" {
    pub fn THLongStorage_copyDouble(storage: *mut THLongStorage,
                                    src: *mut THDoubleStorage);
}
extern "C" {
    pub fn THLongStorage_copyHalf(storage: *mut THLongStorage,
                                  src: *mut THHalfStorage);
}
extern "C" {
    pub fn THHalfStorage_rawCopy(storage: *mut THHalfStorage,
                                 src: *mut THHalf);
}
extern "C" {
    pub fn THHalfStorage_copy(storage: *mut THHalfStorage,
                              src: *mut THHalfStorage);
}
extern "C" {
    pub fn THHalfStorage_copyByte(storage: *mut THHalfStorage,
                                  src: *mut THByteStorage);
}
extern "C" {
    pub fn THHalfStorage_copyChar(storage: *mut THHalfStorage,
                                  src: *mut THCharStorage);
}
extern "C" {
    pub fn THHalfStorage_copyShort(storage: *mut THHalfStorage,
                                   src: *mut THShortStorage);
}
extern "C" {
    pub fn THHalfStorage_copyInt(storage: *mut THHalfStorage,
                                 src: *mut THIntStorage);
}
extern "C" {
    pub fn THHalfStorage_copyLong(storage: *mut THHalfStorage,
                                  src: *mut THLongStorage);
}
extern "C" {
    pub fn THHalfStorage_copyFloat(storage: *mut THHalfStorage,
                                   src: *mut THFloatStorage);
}
extern "C" {
    pub fn THHalfStorage_copyDouble(storage: *mut THHalfStorage,
                                    src: *mut THDoubleStorage);
}
extern "C" {
    pub fn THHalfStorage_copyHalf(storage: *mut THHalfStorage,
                                  src: *mut THHalfStorage);
}
extern "C" {
    pub fn THLongStorage_sizeDesc(size: *const THLongStorage) -> THDescBuff;
}
extern "C" {
    pub fn THLongStorage_newInferSize(size: *mut THLongStorage,
                                      nElement: isize) -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongStorage_inferSize2(output: *mut THLongStorage,
                                    sizesA: *mut ::std::os::raw::c_long,
                                    dimsA: ::std::os::raw::c_long,
                                    sizesB: *mut ::std::os::raw::c_long,
                                    dimsB: ::std::os::raw::c_long,
                                    error_buffer: *mut ::std::os::raw::c_char,
                                    buffer_len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THLongStorage_inferSizeN(output: *mut THLongStorage,
                                    n: ::std::os::raw::c_int,
                                    sizes: *mut *mut ::std::os::raw::c_long,
                                    dims: *mut ::std::os::raw::c_long,
                                    error_buffer: *mut ::std::os::raw::c_char,
                                    buffer_len: ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THLongStorage_inferExpandGeometry(tensorSizes:
                                                 *mut ::std::os::raw::c_long,
                                             tensorStrides:
                                                 *mut ::std::os::raw::c_long,
                                             tensorDim:
                                                 ::std::os::raw::c_long,
                                             sizes: *mut THLongStorage,
                                             expandedSizes:
                                                 *mut *mut ::std::os::raw::c_long,
                                             expandedStrides:
                                                 *mut *mut ::std::os::raw::c_long,
                                             error_buffer:
                                                 *mut ::std::os::raw::c_char,
                                             buffer_len:
                                                 ::std::os::raw::c_int)
     -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Copy)]
pub struct THFloatTensor {
    pub size: *mut ::std::os::raw::c_long,
    pub stride: *mut ::std::os::raw::c_long,
    pub nDimension: ::std::os::raw::c_int,
    pub storage: *mut THFloatStorage,
    pub storageOffset: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_THFloatTensor() {
    assert_eq!(::std::mem::size_of::<THFloatTensor>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THFloatTensor ) ));
    assert_eq! (::std::mem::align_of::<THFloatTensor>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THFloatTensor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatTensor ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatTensor ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatTensor ) ) . stride as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatTensor ) , "::"
                , stringify ! ( stride ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatTensor ) ) . nDimension as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatTensor ) , "::"
                , stringify ! ( nDimension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatTensor ) ) . storage as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatTensor ) , "::"
                , stringify ! ( storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatTensor ) ) . storageOffset as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatTensor ) , "::"
                , stringify ! ( storageOffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatTensor ) ) . refcount as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatTensor ) , "::"
                , stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THFloatTensor ) ) . flag as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( THFloatTensor ) , "::"
                , stringify ! ( flag ) ));
}
impl Clone for THFloatTensor {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THFloatTensor_storage(self_: *const THFloatTensor)
     -> *mut THFloatStorage;
}
extern "C" {
    pub fn THFloatTensor_storageOffset(self_: *const THFloatTensor) -> isize;
}
extern "C" {
    pub fn THFloatTensor_nDimension(self_: *const THFloatTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFloatTensor_size(self_: *const THFloatTensor,
                              dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THFloatTensor_stride(self_: *const THFloatTensor,
                                dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THFloatTensor_newSizeOf(self_: *mut THFloatTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THFloatTensor_newStrideOf(self_: *mut THFloatTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THFloatTensor_data(self_: *const THFloatTensor) -> *mut f32;
}
extern "C" {
    pub fn THFloatTensor_setFlag(self_: *mut THFloatTensor,
                                 flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_clearFlag(self_: *mut THFloatTensor,
                                   flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_new() -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithTensor(tensor: *mut THFloatTensor)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithStorage(storage_: *mut THFloatStorage,
                                        storageOffset_: isize,
                                        size_: *mut THLongStorage,
                                        stride_: *mut THLongStorage)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithStorage1d(storage_: *mut THFloatStorage,
                                          storageOffset_: isize,
                                          size0_: ::std::os::raw::c_long,
                                          stride0_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithStorage2d(storage_: *mut THFloatStorage,
                                          storageOffset_: isize,
                                          size0_: ::std::os::raw::c_long,
                                          stride0_: ::std::os::raw::c_long,
                                          size1_: ::std::os::raw::c_long,
                                          stride1_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithStorage3d(storage_: *mut THFloatStorage,
                                          storageOffset_: isize,
                                          size0_: ::std::os::raw::c_long,
                                          stride0_: ::std::os::raw::c_long,
                                          size1_: ::std::os::raw::c_long,
                                          stride1_: ::std::os::raw::c_long,
                                          size2_: ::std::os::raw::c_long,
                                          stride2_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithStorage4d(storage_: *mut THFloatStorage,
                                          storageOffset_: isize,
                                          size0_: ::std::os::raw::c_long,
                                          stride0_: ::std::os::raw::c_long,
                                          size1_: ::std::os::raw::c_long,
                                          stride1_: ::std::os::raw::c_long,
                                          size2_: ::std::os::raw::c_long,
                                          stride2_: ::std::os::raw::c_long,
                                          size3_: ::std::os::raw::c_long,
                                          stride3_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithSize(size_: *mut THLongStorage,
                                     stride_: *mut THLongStorage)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithSize1d(size0_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithSize2d(size0_: ::std::os::raw::c_long,
                                       size1_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithSize3d(size0_: ::std::os::raw::c_long,
                                       size1_: ::std::os::raw::c_long,
                                       size2_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newWithSize4d(size0_: ::std::os::raw::c_long,
                                       size1_: ::std::os::raw::c_long,
                                       size2_: ::std::os::raw::c_long,
                                       size3_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newClone(self_: *mut THFloatTensor)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newContiguous(tensor: *mut THFloatTensor)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newSelect(tensor: *mut THFloatTensor,
                                   dimension_: ::std::os::raw::c_int,
                                   sliceIndex_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newNarrow(tensor: *mut THFloatTensor,
                                   dimension_: ::std::os::raw::c_int,
                                   firstIndex_: ::std::os::raw::c_long,
                                   size_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newTranspose(tensor: *mut THFloatTensor,
                                      dimension1_: ::std::os::raw::c_int,
                                      dimension2_: ::std::os::raw::c_int)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newUnfold(tensor: *mut THFloatTensor,
                                   dimension_: ::std::os::raw::c_int,
                                   size_: ::std::os::raw::c_long,
                                   step_: ::std::os::raw::c_long)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newView(tensor: *mut THFloatTensor,
                                 size: *mut THLongStorage)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_newExpand(tensor: *mut THFloatTensor,
                                   size: *mut THLongStorage)
     -> *mut THFloatTensor;
}
extern "C" {
    pub fn THFloatTensor_expand(r: *mut THFloatTensor,
                                tensor: *mut THFloatTensor,
                                size: *mut THLongStorage);
}
extern "C" {
    pub fn THFloatTensor_expandNd(rets: *mut *mut THFloatTensor,
                                  ops: *mut *mut THFloatTensor,
                                  count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_resize(tensor: *mut THFloatTensor,
                                size: *mut THLongStorage,
                                stride: *mut THLongStorage);
}
extern "C" {
    pub fn THFloatTensor_resizeAs(tensor: *mut THFloatTensor,
                                  src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_resizeNd(tensor: *mut THFloatTensor,
                                  nDimension: ::std::os::raw::c_int,
                                  size: *mut ::std::os::raw::c_long,
                                  stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_resize1d(tensor: *mut THFloatTensor,
                                  size0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_resize2d(tensor: *mut THFloatTensor,
                                  size0_: ::std::os::raw::c_long,
                                  size1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_resize3d(tensor: *mut THFloatTensor,
                                  size0_: ::std::os::raw::c_long,
                                  size1_: ::std::os::raw::c_long,
                                  size2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_resize4d(tensor: *mut THFloatTensor,
                                  size0_: ::std::os::raw::c_long,
                                  size1_: ::std::os::raw::c_long,
                                  size2_: ::std::os::raw::c_long,
                                  size3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_resize5d(tensor: *mut THFloatTensor,
                                  size0_: ::std::os::raw::c_long,
                                  size1_: ::std::os::raw::c_long,
                                  size2_: ::std::os::raw::c_long,
                                  size3_: ::std::os::raw::c_long,
                                  size4_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_set(self_: *mut THFloatTensor,
                             src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_setStorage(self_: *mut THFloatTensor,
                                    storage_: *mut THFloatStorage,
                                    storageOffset_: isize,
                                    size_: *mut THLongStorage,
                                    stride_: *mut THLongStorage);
}
extern "C" {
    pub fn THFloatTensor_setStorageNd(self_: *mut THFloatTensor,
                                      storage_: *mut THFloatStorage,
                                      storageOffset_: isize,
                                      nDimension: ::std::os::raw::c_int,
                                      size: *mut ::std::os::raw::c_long,
                                      stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_setStorage1d(self_: *mut THFloatTensor,
                                      storage_: *mut THFloatStorage,
                                      storageOffset_: isize,
                                      size0_: ::std::os::raw::c_long,
                                      stride0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_setStorage2d(self_: *mut THFloatTensor,
                                      storage_: *mut THFloatStorage,
                                      storageOffset_: isize,
                                      size0_: ::std::os::raw::c_long,
                                      stride0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      stride1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_setStorage3d(self_: *mut THFloatTensor,
                                      storage_: *mut THFloatStorage,
                                      storageOffset_: isize,
                                      size0_: ::std::os::raw::c_long,
                                      stride0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      stride1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long,
                                      stride2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_setStorage4d(self_: *mut THFloatTensor,
                                      storage_: *mut THFloatStorage,
                                      storageOffset_: isize,
                                      size0_: ::std::os::raw::c_long,
                                      stride0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      stride1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long,
                                      stride2_: ::std::os::raw::c_long,
                                      size3_: ::std::os::raw::c_long,
                                      stride3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_narrow(self_: *mut THFloatTensor,
                                src: *mut THFloatTensor,
                                dimension_: ::std::os::raw::c_int,
                                firstIndex_: ::std::os::raw::c_long,
                                size_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_select(self_: *mut THFloatTensor,
                                src: *mut THFloatTensor,
                                dimension_: ::std::os::raw::c_int,
                                sliceIndex_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_transpose(self_: *mut THFloatTensor,
                                   src: *mut THFloatTensor,
                                   dimension1_: ::std::os::raw::c_int,
                                   dimension2_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_unfold(self_: *mut THFloatTensor,
                                src: *mut THFloatTensor,
                                dimension_: ::std::os::raw::c_int,
                                size_: ::std::os::raw::c_long,
                                step_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_squeeze(self_: *mut THFloatTensor,
                                 src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_squeeze1d(self_: *mut THFloatTensor,
                                   src: *mut THFloatTensor,
                                   dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_unsqueeze1d(self_: *mut THFloatTensor,
                                     src: *mut THFloatTensor,
                                     dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_isContiguous(self_: *const THFloatTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFloatTensor_isSameSizeAs(self_: *const THFloatTensor,
                                      src: *const THFloatTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFloatTensor_isSetTo(self_: *const THFloatTensor,
                                 src: *const THFloatTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFloatTensor_isSize(self_: *const THFloatTensor,
                                dims: *const THLongStorage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFloatTensor_nElement(self_: *const THFloatTensor) -> isize;
}
extern "C" {
    pub fn THFloatTensor_retain(self_: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_free(self_: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_freeCopyTo(self_: *mut THFloatTensor,
                                    dst: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_set1d(tensor: *mut THFloatTensor,
                               x0: ::std::os::raw::c_long, value: f32);
}
extern "C" {
    pub fn THFloatTensor_set2d(tensor: *mut THFloatTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long, value: f32);
}
extern "C" {
    pub fn THFloatTensor_set3d(tensor: *mut THFloatTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long,
                               x2: ::std::os::raw::c_long, value: f32);
}
extern "C" {
    pub fn THFloatTensor_set4d(tensor: *mut THFloatTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long,
                               x2: ::std::os::raw::c_long,
                               x3: ::std::os::raw::c_long, value: f32);
}
extern "C" {
    pub fn THFloatTensor_get1d(tensor: *const THFloatTensor,
                               x0: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn THFloatTensor_get2d(tensor: *const THFloatTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn THFloatTensor_get3d(tensor: *const THFloatTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long,
                               x2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn THFloatTensor_get4d(tensor: *const THFloatTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long,
                               x2: ::std::os::raw::c_long,
                               x3: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn THFloatTensor_desc(tensor: *const THFloatTensor) -> THDescBuff;
}
extern "C" {
    pub fn THFloatTensor_sizeDesc(tensor: *const THFloatTensor) -> THDescBuff;
}
#[repr(C)]
#[derive(Copy)]
pub struct THDoubleTensor {
    pub size: *mut ::std::os::raw::c_long,
    pub stride: *mut ::std::os::raw::c_long,
    pub nDimension: ::std::os::raw::c_int,
    pub storage: *mut THDoubleStorage,
    pub storageOffset: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_THDoubleTensor() {
    assert_eq!(::std::mem::size_of::<THDoubleTensor>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THDoubleTensor ) ));
    assert_eq! (::std::mem::align_of::<THDoubleTensor>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THDoubleTensor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleTensor ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleTensor ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleTensor ) ) . stride as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleTensor ) , "::"
                , stringify ! ( stride ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleTensor ) ) . nDimension as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleTensor ) , "::"
                , stringify ! ( nDimension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleTensor ) ) . storage as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleTensor ) , "::"
                , stringify ! ( storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleTensor ) ) . storageOffset as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleTensor ) , "::"
                , stringify ! ( storageOffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleTensor ) ) . refcount as * const
                _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleTensor ) , "::"
                , stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THDoubleTensor ) ) . flag as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( THDoubleTensor ) , "::"
                , stringify ! ( flag ) ));
}
impl Clone for THDoubleTensor {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THDoubleTensor_storage(self_: *const THDoubleTensor)
     -> *mut THDoubleStorage;
}
extern "C" {
    pub fn THDoubleTensor_storageOffset(self_: *const THDoubleTensor)
     -> isize;
}
extern "C" {
    pub fn THDoubleTensor_nDimension(self_: *const THDoubleTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THDoubleTensor_size(self_: *const THDoubleTensor,
                               dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THDoubleTensor_stride(self_: *const THDoubleTensor,
                                 dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THDoubleTensor_newSizeOf(self_: *mut THDoubleTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THDoubleTensor_newStrideOf(self_: *mut THDoubleTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THDoubleTensor_data(self_: *const THDoubleTensor) -> *mut f64;
}
extern "C" {
    pub fn THDoubleTensor_setFlag(self_: *mut THDoubleTensor,
                                  flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_clearFlag(self_: *mut THDoubleTensor,
                                    flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_new() -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithTensor(tensor: *mut THDoubleTensor)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithStorage(storage_: *mut THDoubleStorage,
                                         storageOffset_: isize,
                                         size_: *mut THLongStorage,
                                         stride_: *mut THLongStorage)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithStorage1d(storage_: *mut THDoubleStorage,
                                           storageOffset_: isize,
                                           size0_: ::std::os::raw::c_long,
                                           stride0_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithStorage2d(storage_: *mut THDoubleStorage,
                                           storageOffset_: isize,
                                           size0_: ::std::os::raw::c_long,
                                           stride0_: ::std::os::raw::c_long,
                                           size1_: ::std::os::raw::c_long,
                                           stride1_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithStorage3d(storage_: *mut THDoubleStorage,
                                           storageOffset_: isize,
                                           size0_: ::std::os::raw::c_long,
                                           stride0_: ::std::os::raw::c_long,
                                           size1_: ::std::os::raw::c_long,
                                           stride1_: ::std::os::raw::c_long,
                                           size2_: ::std::os::raw::c_long,
                                           stride2_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithStorage4d(storage_: *mut THDoubleStorage,
                                           storageOffset_: isize,
                                           size0_: ::std::os::raw::c_long,
                                           stride0_: ::std::os::raw::c_long,
                                           size1_: ::std::os::raw::c_long,
                                           stride1_: ::std::os::raw::c_long,
                                           size2_: ::std::os::raw::c_long,
                                           stride2_: ::std::os::raw::c_long,
                                           size3_: ::std::os::raw::c_long,
                                           stride3_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithSize(size_: *mut THLongStorage,
                                      stride_: *mut THLongStorage)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithSize1d(size0_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithSize2d(size0_: ::std::os::raw::c_long,
                                        size1_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithSize3d(size0_: ::std::os::raw::c_long,
                                        size1_: ::std::os::raw::c_long,
                                        size2_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newWithSize4d(size0_: ::std::os::raw::c_long,
                                        size1_: ::std::os::raw::c_long,
                                        size2_: ::std::os::raw::c_long,
                                        size3_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newClone(self_: *mut THDoubleTensor)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newContiguous(tensor: *mut THDoubleTensor)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newSelect(tensor: *mut THDoubleTensor,
                                    dimension_: ::std::os::raw::c_int,
                                    sliceIndex_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newNarrow(tensor: *mut THDoubleTensor,
                                    dimension_: ::std::os::raw::c_int,
                                    firstIndex_: ::std::os::raw::c_long,
                                    size_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newTranspose(tensor: *mut THDoubleTensor,
                                       dimension1_: ::std::os::raw::c_int,
                                       dimension2_: ::std::os::raw::c_int)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newUnfold(tensor: *mut THDoubleTensor,
                                    dimension_: ::std::os::raw::c_int,
                                    size_: ::std::os::raw::c_long,
                                    step_: ::std::os::raw::c_long)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newView(tensor: *mut THDoubleTensor,
                                  size: *mut THLongStorage)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_newExpand(tensor: *mut THDoubleTensor,
                                    size: *mut THLongStorage)
     -> *mut THDoubleTensor;
}
extern "C" {
    pub fn THDoubleTensor_expand(r: *mut THDoubleTensor,
                                 tensor: *mut THDoubleTensor,
                                 size: *mut THLongStorage);
}
extern "C" {
    pub fn THDoubleTensor_expandNd(rets: *mut *mut THDoubleTensor,
                                   ops: *mut *mut THDoubleTensor,
                                   count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_resize(tensor: *mut THDoubleTensor,
                                 size: *mut THLongStorage,
                                 stride: *mut THLongStorage);
}
extern "C" {
    pub fn THDoubleTensor_resizeAs(tensor: *mut THDoubleTensor,
                                   src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_resizeNd(tensor: *mut THDoubleTensor,
                                   nDimension: ::std::os::raw::c_int,
                                   size: *mut ::std::os::raw::c_long,
                                   stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_resize1d(tensor: *mut THDoubleTensor,
                                   size0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_resize2d(tensor: *mut THDoubleTensor,
                                   size0_: ::std::os::raw::c_long,
                                   size1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_resize3d(tensor: *mut THDoubleTensor,
                                   size0_: ::std::os::raw::c_long,
                                   size1_: ::std::os::raw::c_long,
                                   size2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_resize4d(tensor: *mut THDoubleTensor,
                                   size0_: ::std::os::raw::c_long,
                                   size1_: ::std::os::raw::c_long,
                                   size2_: ::std::os::raw::c_long,
                                   size3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_resize5d(tensor: *mut THDoubleTensor,
                                   size0_: ::std::os::raw::c_long,
                                   size1_: ::std::os::raw::c_long,
                                   size2_: ::std::os::raw::c_long,
                                   size3_: ::std::os::raw::c_long,
                                   size4_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_set(self_: *mut THDoubleTensor,
                              src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_setStorage(self_: *mut THDoubleTensor,
                                     storage_: *mut THDoubleStorage,
                                     storageOffset_: isize,
                                     size_: *mut THLongStorage,
                                     stride_: *mut THLongStorage);
}
extern "C" {
    pub fn THDoubleTensor_setStorageNd(self_: *mut THDoubleTensor,
                                       storage_: *mut THDoubleStorage,
                                       storageOffset_: isize,
                                       nDimension: ::std::os::raw::c_int,
                                       size: *mut ::std::os::raw::c_long,
                                       stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_setStorage1d(self_: *mut THDoubleTensor,
                                       storage_: *mut THDoubleStorage,
                                       storageOffset_: isize,
                                       size0_: ::std::os::raw::c_long,
                                       stride0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_setStorage2d(self_: *mut THDoubleTensor,
                                       storage_: *mut THDoubleStorage,
                                       storageOffset_: isize,
                                       size0_: ::std::os::raw::c_long,
                                       stride0_: ::std::os::raw::c_long,
                                       size1_: ::std::os::raw::c_long,
                                       stride1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_setStorage3d(self_: *mut THDoubleTensor,
                                       storage_: *mut THDoubleStorage,
                                       storageOffset_: isize,
                                       size0_: ::std::os::raw::c_long,
                                       stride0_: ::std::os::raw::c_long,
                                       size1_: ::std::os::raw::c_long,
                                       stride1_: ::std::os::raw::c_long,
                                       size2_: ::std::os::raw::c_long,
                                       stride2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_setStorage4d(self_: *mut THDoubleTensor,
                                       storage_: *mut THDoubleStorage,
                                       storageOffset_: isize,
                                       size0_: ::std::os::raw::c_long,
                                       stride0_: ::std::os::raw::c_long,
                                       size1_: ::std::os::raw::c_long,
                                       stride1_: ::std::os::raw::c_long,
                                       size2_: ::std::os::raw::c_long,
                                       stride2_: ::std::os::raw::c_long,
                                       size3_: ::std::os::raw::c_long,
                                       stride3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_narrow(self_: *mut THDoubleTensor,
                                 src: *mut THDoubleTensor,
                                 dimension_: ::std::os::raw::c_int,
                                 firstIndex_: ::std::os::raw::c_long,
                                 size_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_select(self_: *mut THDoubleTensor,
                                 src: *mut THDoubleTensor,
                                 dimension_: ::std::os::raw::c_int,
                                 sliceIndex_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_transpose(self_: *mut THDoubleTensor,
                                    src: *mut THDoubleTensor,
                                    dimension1_: ::std::os::raw::c_int,
                                    dimension2_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_unfold(self_: *mut THDoubleTensor,
                                 src: *mut THDoubleTensor,
                                 dimension_: ::std::os::raw::c_int,
                                 size_: ::std::os::raw::c_long,
                                 step_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_squeeze(self_: *mut THDoubleTensor,
                                  src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_squeeze1d(self_: *mut THDoubleTensor,
                                    src: *mut THDoubleTensor,
                                    dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_unsqueeze1d(self_: *mut THDoubleTensor,
                                      src: *mut THDoubleTensor,
                                      dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_isContiguous(self_: *const THDoubleTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THDoubleTensor_isSameSizeAs(self_: *const THDoubleTensor,
                                       src: *const THDoubleTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THDoubleTensor_isSetTo(self_: *const THDoubleTensor,
                                  src: *const THDoubleTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THDoubleTensor_isSize(self_: *const THDoubleTensor,
                                 dims: *const THLongStorage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THDoubleTensor_nElement(self_: *const THDoubleTensor) -> isize;
}
extern "C" {
    pub fn THDoubleTensor_retain(self_: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_free(self_: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_freeCopyTo(self_: *mut THDoubleTensor,
                                     dst: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_set1d(tensor: *mut THDoubleTensor,
                                x0: ::std::os::raw::c_long, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_set2d(tensor: *mut THDoubleTensor,
                                x0: ::std::os::raw::c_long,
                                x1: ::std::os::raw::c_long, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_set3d(tensor: *mut THDoubleTensor,
                                x0: ::std::os::raw::c_long,
                                x1: ::std::os::raw::c_long,
                                x2: ::std::os::raw::c_long, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_set4d(tensor: *mut THDoubleTensor,
                                x0: ::std::os::raw::c_long,
                                x1: ::std::os::raw::c_long,
                                x2: ::std::os::raw::c_long,
                                x3: ::std::os::raw::c_long, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_get1d(tensor: *const THDoubleTensor,
                                x0: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_get2d(tensor: *const THDoubleTensor,
                                x0: ::std::os::raw::c_long,
                                x1: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_get3d(tensor: *const THDoubleTensor,
                                x0: ::std::os::raw::c_long,
                                x1: ::std::os::raw::c_long,
                                x2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_get4d(tensor: *const THDoubleTensor,
                                x0: ::std::os::raw::c_long,
                                x1: ::std::os::raw::c_long,
                                x2: ::std::os::raw::c_long,
                                x3: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_desc(tensor: *const THDoubleTensor) -> THDescBuff;
}
extern "C" {
    pub fn THDoubleTensor_sizeDesc(tensor: *const THDoubleTensor)
     -> THDescBuff;
}
#[repr(C)]
#[derive(Copy)]
pub struct THByteTensor {
    pub size: *mut ::std::os::raw::c_long,
    pub stride: *mut ::std::os::raw::c_long,
    pub nDimension: ::std::os::raw::c_int,
    pub storage: *mut THByteStorage,
    pub storageOffset: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_THByteTensor() {
    assert_eq!(::std::mem::size_of::<THByteTensor>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THByteTensor ) ));
    assert_eq! (::std::mem::align_of::<THByteTensor>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THByteTensor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteTensor ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteTensor ) , "::" ,
                stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteTensor ) ) . stride as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteTensor ) , "::" ,
                stringify ! ( stride ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteTensor ) ) . nDimension as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteTensor ) , "::" ,
                stringify ! ( nDimension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteTensor ) ) . storage as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteTensor ) , "::" ,
                stringify ! ( storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteTensor ) ) . storageOffset as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteTensor ) , "::" ,
                stringify ! ( storageOffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteTensor ) ) . refcount as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteTensor ) , "::" ,
                stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THByteTensor ) ) . flag as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( THByteTensor ) , "::" ,
                stringify ! ( flag ) ));
}
impl Clone for THByteTensor {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THByteTensor_storage(self_: *const THByteTensor)
     -> *mut THByteStorage;
}
extern "C" {
    pub fn THByteTensor_storageOffset(self_: *const THByteTensor) -> isize;
}
extern "C" {
    pub fn THByteTensor_nDimension(self_: *const THByteTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THByteTensor_size(self_: *const THByteTensor,
                             dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THByteTensor_stride(self_: *const THByteTensor,
                               dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THByteTensor_newSizeOf(self_: *mut THByteTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THByteTensor_newStrideOf(self_: *mut THByteTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THByteTensor_data(self_: *const THByteTensor)
     -> *mut ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteTensor_setFlag(self_: *mut THByteTensor,
                                flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_clearFlag(self_: *mut THByteTensor,
                                  flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_new() -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithTensor(tensor: *mut THByteTensor)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithStorage(storage_: *mut THByteStorage,
                                       storageOffset_: isize,
                                       size_: *mut THLongStorage,
                                       stride_: *mut THLongStorage)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithStorage1d(storage_: *mut THByteStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithStorage2d(storage_: *mut THByteStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithStorage3d(storage_: *mut THByteStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long,
                                         size2_: ::std::os::raw::c_long,
                                         stride2_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithStorage4d(storage_: *mut THByteStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long,
                                         size2_: ::std::os::raw::c_long,
                                         stride2_: ::std::os::raw::c_long,
                                         size3_: ::std::os::raw::c_long,
                                         stride3_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithSize(size_: *mut THLongStorage,
                                    stride_: *mut THLongStorage)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithSize1d(size0_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithSize2d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithSize3d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newWithSize4d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long,
                                      size3_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newClone(self_: *mut THByteTensor)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newContiguous(tensor: *mut THByteTensor)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newSelect(tensor: *mut THByteTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  sliceIndex_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newNarrow(tensor: *mut THByteTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  firstIndex_: ::std::os::raw::c_long,
                                  size_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newTranspose(tensor: *mut THByteTensor,
                                     dimension1_: ::std::os::raw::c_int,
                                     dimension2_: ::std::os::raw::c_int)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newUnfold(tensor: *mut THByteTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  size_: ::std::os::raw::c_long,
                                  step_: ::std::os::raw::c_long)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newView(tensor: *mut THByteTensor,
                                size: *mut THLongStorage)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_newExpand(tensor: *mut THByteTensor,
                                  size: *mut THLongStorage)
     -> *mut THByteTensor;
}
extern "C" {
    pub fn THByteTensor_expand(r: *mut THByteTensor,
                               tensor: *mut THByteTensor,
                               size: *mut THLongStorage);
}
extern "C" {
    pub fn THByteTensor_expandNd(rets: *mut *mut THByteTensor,
                                 ops: *mut *mut THByteTensor,
                                 count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_resize(tensor: *mut THByteTensor,
                               size: *mut THLongStorage,
                               stride: *mut THLongStorage);
}
extern "C" {
    pub fn THByteTensor_resizeAs(tensor: *mut THByteTensor,
                                 src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_resizeNd(tensor: *mut THByteTensor,
                                 nDimension: ::std::os::raw::c_int,
                                 size: *mut ::std::os::raw::c_long,
                                 stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_resize1d(tensor: *mut THByteTensor,
                                 size0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_resize2d(tensor: *mut THByteTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_resize3d(tensor: *mut THByteTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_resize4d(tensor: *mut THByteTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long,
                                 size3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_resize5d(tensor: *mut THByteTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long,
                                 size3_: ::std::os::raw::c_long,
                                 size4_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_set(self_: *mut THByteTensor, src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_setStorage(self_: *mut THByteTensor,
                                   storage_: *mut THByteStorage,
                                   storageOffset_: isize,
                                   size_: *mut THLongStorage,
                                   stride_: *mut THLongStorage);
}
extern "C" {
    pub fn THByteTensor_setStorageNd(self_: *mut THByteTensor,
                                     storage_: *mut THByteStorage,
                                     storageOffset_: isize,
                                     nDimension: ::std::os::raw::c_int,
                                     size: *mut ::std::os::raw::c_long,
                                     stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_setStorage1d(self_: *mut THByteTensor,
                                     storage_: *mut THByteStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_setStorage2d(self_: *mut THByteTensor,
                                     storage_: *mut THByteStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_setStorage3d(self_: *mut THByteTensor,
                                     storage_: *mut THByteStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long,
                                     size2_: ::std::os::raw::c_long,
                                     stride2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_setStorage4d(self_: *mut THByteTensor,
                                     storage_: *mut THByteStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long,
                                     size2_: ::std::os::raw::c_long,
                                     stride2_: ::std::os::raw::c_long,
                                     size3_: ::std::os::raw::c_long,
                                     stride3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_narrow(self_: *mut THByteTensor,
                               src: *mut THByteTensor,
                               dimension_: ::std::os::raw::c_int,
                               firstIndex_: ::std::os::raw::c_long,
                               size_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_select(self_: *mut THByteTensor,
                               src: *mut THByteTensor,
                               dimension_: ::std::os::raw::c_int,
                               sliceIndex_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_transpose(self_: *mut THByteTensor,
                                  src: *mut THByteTensor,
                                  dimension1_: ::std::os::raw::c_int,
                                  dimension2_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_unfold(self_: *mut THByteTensor,
                               src: *mut THByteTensor,
                               dimension_: ::std::os::raw::c_int,
                               size_: ::std::os::raw::c_long,
                               step_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_squeeze(self_: *mut THByteTensor,
                                src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_squeeze1d(self_: *mut THByteTensor,
                                  src: *mut THByteTensor,
                                  dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_unsqueeze1d(self_: *mut THByteTensor,
                                    src: *mut THByteTensor,
                                    dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_isContiguous(self_: *const THByteTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THByteTensor_isSameSizeAs(self_: *const THByteTensor,
                                     src: *const THByteTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THByteTensor_isSetTo(self_: *const THByteTensor,
                                src: *const THByteTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THByteTensor_isSize(self_: *const THByteTensor,
                               dims: *const THLongStorage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THByteTensor_nElement(self_: *const THByteTensor) -> isize;
}
extern "C" {
    pub fn THByteTensor_retain(self_: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_free(self_: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_freeCopyTo(self_: *mut THByteTensor,
                                   dst: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_set1d(tensor: *mut THByteTensor,
                              x0: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_set2d(tensor: *mut THByteTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_set3d(tensor: *mut THByteTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_set4d(tensor: *mut THByteTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              x3: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_get1d(tensor: *const THByteTensor,
                              x0: ::std::os::raw::c_long)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteTensor_get2d(tensor: *const THByteTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteTensor_get3d(tensor: *const THByteTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteTensor_get4d(tensor: *const THByteTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              x3: ::std::os::raw::c_long)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteTensor_desc(tensor: *const THByteTensor) -> THDescBuff;
}
extern "C" {
    pub fn THByteTensor_sizeDesc(tensor: *const THByteTensor) -> THDescBuff;
}
#[repr(C)]
#[derive(Copy)]
pub struct THCharTensor {
    pub size: *mut ::std::os::raw::c_long,
    pub stride: *mut ::std::os::raw::c_long,
    pub nDimension: ::std::os::raw::c_int,
    pub storage: *mut THCharStorage,
    pub storageOffset: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_THCharTensor() {
    assert_eq!(::std::mem::size_of::<THCharTensor>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THCharTensor ) ));
    assert_eq! (::std::mem::align_of::<THCharTensor>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THCharTensor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharTensor ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharTensor ) , "::" ,
                stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharTensor ) ) . stride as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharTensor ) , "::" ,
                stringify ! ( stride ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharTensor ) ) . nDimension as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharTensor ) , "::" ,
                stringify ! ( nDimension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharTensor ) ) . storage as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharTensor ) , "::" ,
                stringify ! ( storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharTensor ) ) . storageOffset as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharTensor ) , "::" ,
                stringify ! ( storageOffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharTensor ) ) . refcount as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharTensor ) , "::" ,
                stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THCharTensor ) ) . flag as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( THCharTensor ) , "::" ,
                stringify ! ( flag ) ));
}
impl Clone for THCharTensor {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THCharTensor_storage(self_: *const THCharTensor)
     -> *mut THCharStorage;
}
extern "C" {
    pub fn THCharTensor_storageOffset(self_: *const THCharTensor) -> isize;
}
extern "C" {
    pub fn THCharTensor_nDimension(self_: *const THCharTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THCharTensor_size(self_: *const THCharTensor,
                             dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THCharTensor_stride(self_: *const THCharTensor,
                               dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THCharTensor_newSizeOf(self_: *mut THCharTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THCharTensor_newStrideOf(self_: *mut THCharTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THCharTensor_data(self_: *const THCharTensor)
     -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharTensor_setFlag(self_: *mut THCharTensor,
                                flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_clearFlag(self_: *mut THCharTensor,
                                  flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_new() -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithTensor(tensor: *mut THCharTensor)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithStorage(storage_: *mut THCharStorage,
                                       storageOffset_: isize,
                                       size_: *mut THLongStorage,
                                       stride_: *mut THLongStorage)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithStorage1d(storage_: *mut THCharStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithStorage2d(storage_: *mut THCharStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithStorage3d(storage_: *mut THCharStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long,
                                         size2_: ::std::os::raw::c_long,
                                         stride2_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithStorage4d(storage_: *mut THCharStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long,
                                         size2_: ::std::os::raw::c_long,
                                         stride2_: ::std::os::raw::c_long,
                                         size3_: ::std::os::raw::c_long,
                                         stride3_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithSize(size_: *mut THLongStorage,
                                    stride_: *mut THLongStorage)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithSize1d(size0_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithSize2d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithSize3d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newWithSize4d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long,
                                      size3_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newClone(self_: *mut THCharTensor)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newContiguous(tensor: *mut THCharTensor)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newSelect(tensor: *mut THCharTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  sliceIndex_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newNarrow(tensor: *mut THCharTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  firstIndex_: ::std::os::raw::c_long,
                                  size_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newTranspose(tensor: *mut THCharTensor,
                                     dimension1_: ::std::os::raw::c_int,
                                     dimension2_: ::std::os::raw::c_int)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newUnfold(tensor: *mut THCharTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  size_: ::std::os::raw::c_long,
                                  step_: ::std::os::raw::c_long)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newView(tensor: *mut THCharTensor,
                                size: *mut THLongStorage)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_newExpand(tensor: *mut THCharTensor,
                                  size: *mut THLongStorage)
     -> *mut THCharTensor;
}
extern "C" {
    pub fn THCharTensor_expand(r: *mut THCharTensor,
                               tensor: *mut THCharTensor,
                               size: *mut THLongStorage);
}
extern "C" {
    pub fn THCharTensor_expandNd(rets: *mut *mut THCharTensor,
                                 ops: *mut *mut THCharTensor,
                                 count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_resize(tensor: *mut THCharTensor,
                               size: *mut THLongStorage,
                               stride: *mut THLongStorage);
}
extern "C" {
    pub fn THCharTensor_resizeAs(tensor: *mut THCharTensor,
                                 src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_resizeNd(tensor: *mut THCharTensor,
                                 nDimension: ::std::os::raw::c_int,
                                 size: *mut ::std::os::raw::c_long,
                                 stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_resize1d(tensor: *mut THCharTensor,
                                 size0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_resize2d(tensor: *mut THCharTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_resize3d(tensor: *mut THCharTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_resize4d(tensor: *mut THCharTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long,
                                 size3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_resize5d(tensor: *mut THCharTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long,
                                 size3_: ::std::os::raw::c_long,
                                 size4_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_set(self_: *mut THCharTensor, src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_setStorage(self_: *mut THCharTensor,
                                   storage_: *mut THCharStorage,
                                   storageOffset_: isize,
                                   size_: *mut THLongStorage,
                                   stride_: *mut THLongStorage);
}
extern "C" {
    pub fn THCharTensor_setStorageNd(self_: *mut THCharTensor,
                                     storage_: *mut THCharStorage,
                                     storageOffset_: isize,
                                     nDimension: ::std::os::raw::c_int,
                                     size: *mut ::std::os::raw::c_long,
                                     stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_setStorage1d(self_: *mut THCharTensor,
                                     storage_: *mut THCharStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_setStorage2d(self_: *mut THCharTensor,
                                     storage_: *mut THCharStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_setStorage3d(self_: *mut THCharTensor,
                                     storage_: *mut THCharStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long,
                                     size2_: ::std::os::raw::c_long,
                                     stride2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_setStorage4d(self_: *mut THCharTensor,
                                     storage_: *mut THCharStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long,
                                     size2_: ::std::os::raw::c_long,
                                     stride2_: ::std::os::raw::c_long,
                                     size3_: ::std::os::raw::c_long,
                                     stride3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_narrow(self_: *mut THCharTensor,
                               src: *mut THCharTensor,
                               dimension_: ::std::os::raw::c_int,
                               firstIndex_: ::std::os::raw::c_long,
                               size_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_select(self_: *mut THCharTensor,
                               src: *mut THCharTensor,
                               dimension_: ::std::os::raw::c_int,
                               sliceIndex_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_transpose(self_: *mut THCharTensor,
                                  src: *mut THCharTensor,
                                  dimension1_: ::std::os::raw::c_int,
                                  dimension2_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_unfold(self_: *mut THCharTensor,
                               src: *mut THCharTensor,
                               dimension_: ::std::os::raw::c_int,
                               size_: ::std::os::raw::c_long,
                               step_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_squeeze(self_: *mut THCharTensor,
                                src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_squeeze1d(self_: *mut THCharTensor,
                                  src: *mut THCharTensor,
                                  dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_unsqueeze1d(self_: *mut THCharTensor,
                                    src: *mut THCharTensor,
                                    dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_isContiguous(self_: *const THCharTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THCharTensor_isSameSizeAs(self_: *const THCharTensor,
                                     src: *const THCharTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THCharTensor_isSetTo(self_: *const THCharTensor,
                                src: *const THCharTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THCharTensor_isSize(self_: *const THCharTensor,
                               dims: *const THLongStorage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THCharTensor_nElement(self_: *const THCharTensor) -> isize;
}
extern "C" {
    pub fn THCharTensor_retain(self_: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_free(self_: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_freeCopyTo(self_: *mut THCharTensor,
                                   dst: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_set1d(tensor: *mut THCharTensor,
                              x0: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_set2d(tensor: *mut THCharTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_set3d(tensor: *mut THCharTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_set4d(tensor: *mut THCharTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              x3: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_get1d(tensor: *const THCharTensor,
                              x0: ::std::os::raw::c_long)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharTensor_get2d(tensor: *const THCharTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharTensor_get3d(tensor: *const THCharTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharTensor_get4d(tensor: *const THCharTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              x3: ::std::os::raw::c_long)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharTensor_desc(tensor: *const THCharTensor) -> THDescBuff;
}
extern "C" {
    pub fn THCharTensor_sizeDesc(tensor: *const THCharTensor) -> THDescBuff;
}
#[repr(C)]
#[derive(Copy)]
pub struct THShortTensor {
    pub size: *mut ::std::os::raw::c_long,
    pub stride: *mut ::std::os::raw::c_long,
    pub nDimension: ::std::os::raw::c_int,
    pub storage: *mut THShortStorage,
    pub storageOffset: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_THShortTensor() {
    assert_eq!(::std::mem::size_of::<THShortTensor>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THShortTensor ) ));
    assert_eq! (::std::mem::align_of::<THShortTensor>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THShortTensor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortTensor ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortTensor ) , "::"
                , stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortTensor ) ) . stride as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortTensor ) , "::"
                , stringify ! ( stride ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortTensor ) ) . nDimension as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortTensor ) , "::"
                , stringify ! ( nDimension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortTensor ) ) . storage as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortTensor ) , "::"
                , stringify ! ( storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortTensor ) ) . storageOffset as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortTensor ) , "::"
                , stringify ! ( storageOffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortTensor ) ) . refcount as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortTensor ) , "::"
                , stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THShortTensor ) ) . flag as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( THShortTensor ) , "::"
                , stringify ! ( flag ) ));
}
impl Clone for THShortTensor {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THShortTensor_storage(self_: *const THShortTensor)
     -> *mut THShortStorage;
}
extern "C" {
    pub fn THShortTensor_storageOffset(self_: *const THShortTensor) -> isize;
}
extern "C" {
    pub fn THShortTensor_nDimension(self_: *const THShortTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THShortTensor_size(self_: *const THShortTensor,
                              dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THShortTensor_stride(self_: *const THShortTensor,
                                dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THShortTensor_newSizeOf(self_: *mut THShortTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THShortTensor_newStrideOf(self_: *mut THShortTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THShortTensor_data(self_: *const THShortTensor)
     -> *mut ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortTensor_setFlag(self_: *mut THShortTensor,
                                 flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_clearFlag(self_: *mut THShortTensor,
                                   flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_new() -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithTensor(tensor: *mut THShortTensor)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithStorage(storage_: *mut THShortStorage,
                                        storageOffset_: isize,
                                        size_: *mut THLongStorage,
                                        stride_: *mut THLongStorage)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithStorage1d(storage_: *mut THShortStorage,
                                          storageOffset_: isize,
                                          size0_: ::std::os::raw::c_long,
                                          stride0_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithStorage2d(storage_: *mut THShortStorage,
                                          storageOffset_: isize,
                                          size0_: ::std::os::raw::c_long,
                                          stride0_: ::std::os::raw::c_long,
                                          size1_: ::std::os::raw::c_long,
                                          stride1_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithStorage3d(storage_: *mut THShortStorage,
                                          storageOffset_: isize,
                                          size0_: ::std::os::raw::c_long,
                                          stride0_: ::std::os::raw::c_long,
                                          size1_: ::std::os::raw::c_long,
                                          stride1_: ::std::os::raw::c_long,
                                          size2_: ::std::os::raw::c_long,
                                          stride2_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithStorage4d(storage_: *mut THShortStorage,
                                          storageOffset_: isize,
                                          size0_: ::std::os::raw::c_long,
                                          stride0_: ::std::os::raw::c_long,
                                          size1_: ::std::os::raw::c_long,
                                          stride1_: ::std::os::raw::c_long,
                                          size2_: ::std::os::raw::c_long,
                                          stride2_: ::std::os::raw::c_long,
                                          size3_: ::std::os::raw::c_long,
                                          stride3_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithSize(size_: *mut THLongStorage,
                                     stride_: *mut THLongStorage)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithSize1d(size0_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithSize2d(size0_: ::std::os::raw::c_long,
                                       size1_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithSize3d(size0_: ::std::os::raw::c_long,
                                       size1_: ::std::os::raw::c_long,
                                       size2_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newWithSize4d(size0_: ::std::os::raw::c_long,
                                       size1_: ::std::os::raw::c_long,
                                       size2_: ::std::os::raw::c_long,
                                       size3_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newClone(self_: *mut THShortTensor)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newContiguous(tensor: *mut THShortTensor)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newSelect(tensor: *mut THShortTensor,
                                   dimension_: ::std::os::raw::c_int,
                                   sliceIndex_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newNarrow(tensor: *mut THShortTensor,
                                   dimension_: ::std::os::raw::c_int,
                                   firstIndex_: ::std::os::raw::c_long,
                                   size_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newTranspose(tensor: *mut THShortTensor,
                                      dimension1_: ::std::os::raw::c_int,
                                      dimension2_: ::std::os::raw::c_int)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newUnfold(tensor: *mut THShortTensor,
                                   dimension_: ::std::os::raw::c_int,
                                   size_: ::std::os::raw::c_long,
                                   step_: ::std::os::raw::c_long)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newView(tensor: *mut THShortTensor,
                                 size: *mut THLongStorage)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_newExpand(tensor: *mut THShortTensor,
                                   size: *mut THLongStorage)
     -> *mut THShortTensor;
}
extern "C" {
    pub fn THShortTensor_expand(r: *mut THShortTensor,
                                tensor: *mut THShortTensor,
                                size: *mut THLongStorage);
}
extern "C" {
    pub fn THShortTensor_expandNd(rets: *mut *mut THShortTensor,
                                  ops: *mut *mut THShortTensor,
                                  count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_resize(tensor: *mut THShortTensor,
                                size: *mut THLongStorage,
                                stride: *mut THLongStorage);
}
extern "C" {
    pub fn THShortTensor_resizeAs(tensor: *mut THShortTensor,
                                  src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_resizeNd(tensor: *mut THShortTensor,
                                  nDimension: ::std::os::raw::c_int,
                                  size: *mut ::std::os::raw::c_long,
                                  stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_resize1d(tensor: *mut THShortTensor,
                                  size0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_resize2d(tensor: *mut THShortTensor,
                                  size0_: ::std::os::raw::c_long,
                                  size1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_resize3d(tensor: *mut THShortTensor,
                                  size0_: ::std::os::raw::c_long,
                                  size1_: ::std::os::raw::c_long,
                                  size2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_resize4d(tensor: *mut THShortTensor,
                                  size0_: ::std::os::raw::c_long,
                                  size1_: ::std::os::raw::c_long,
                                  size2_: ::std::os::raw::c_long,
                                  size3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_resize5d(tensor: *mut THShortTensor,
                                  size0_: ::std::os::raw::c_long,
                                  size1_: ::std::os::raw::c_long,
                                  size2_: ::std::os::raw::c_long,
                                  size3_: ::std::os::raw::c_long,
                                  size4_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_set(self_: *mut THShortTensor,
                             src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_setStorage(self_: *mut THShortTensor,
                                    storage_: *mut THShortStorage,
                                    storageOffset_: isize,
                                    size_: *mut THLongStorage,
                                    stride_: *mut THLongStorage);
}
extern "C" {
    pub fn THShortTensor_setStorageNd(self_: *mut THShortTensor,
                                      storage_: *mut THShortStorage,
                                      storageOffset_: isize,
                                      nDimension: ::std::os::raw::c_int,
                                      size: *mut ::std::os::raw::c_long,
                                      stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_setStorage1d(self_: *mut THShortTensor,
                                      storage_: *mut THShortStorage,
                                      storageOffset_: isize,
                                      size0_: ::std::os::raw::c_long,
                                      stride0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_setStorage2d(self_: *mut THShortTensor,
                                      storage_: *mut THShortStorage,
                                      storageOffset_: isize,
                                      size0_: ::std::os::raw::c_long,
                                      stride0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      stride1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_setStorage3d(self_: *mut THShortTensor,
                                      storage_: *mut THShortStorage,
                                      storageOffset_: isize,
                                      size0_: ::std::os::raw::c_long,
                                      stride0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      stride1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long,
                                      stride2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_setStorage4d(self_: *mut THShortTensor,
                                      storage_: *mut THShortStorage,
                                      storageOffset_: isize,
                                      size0_: ::std::os::raw::c_long,
                                      stride0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      stride1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long,
                                      stride2_: ::std::os::raw::c_long,
                                      size3_: ::std::os::raw::c_long,
                                      stride3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_narrow(self_: *mut THShortTensor,
                                src: *mut THShortTensor,
                                dimension_: ::std::os::raw::c_int,
                                firstIndex_: ::std::os::raw::c_long,
                                size_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_select(self_: *mut THShortTensor,
                                src: *mut THShortTensor,
                                dimension_: ::std::os::raw::c_int,
                                sliceIndex_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_transpose(self_: *mut THShortTensor,
                                   src: *mut THShortTensor,
                                   dimension1_: ::std::os::raw::c_int,
                                   dimension2_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_unfold(self_: *mut THShortTensor,
                                src: *mut THShortTensor,
                                dimension_: ::std::os::raw::c_int,
                                size_: ::std::os::raw::c_long,
                                step_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_squeeze(self_: *mut THShortTensor,
                                 src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_squeeze1d(self_: *mut THShortTensor,
                                   src: *mut THShortTensor,
                                   dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_unsqueeze1d(self_: *mut THShortTensor,
                                     src: *mut THShortTensor,
                                     dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_isContiguous(self_: *const THShortTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THShortTensor_isSameSizeAs(self_: *const THShortTensor,
                                      src: *const THShortTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THShortTensor_isSetTo(self_: *const THShortTensor,
                                 src: *const THShortTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THShortTensor_isSize(self_: *const THShortTensor,
                                dims: *const THLongStorage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THShortTensor_nElement(self_: *const THShortTensor) -> isize;
}
extern "C" {
    pub fn THShortTensor_retain(self_: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_free(self_: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_freeCopyTo(self_: *mut THShortTensor,
                                    dst: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_set1d(tensor: *mut THShortTensor,
                               x0: ::std::os::raw::c_long,
                               value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_set2d(tensor: *mut THShortTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long,
                               value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_set3d(tensor: *mut THShortTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long,
                               x2: ::std::os::raw::c_long,
                               value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_set4d(tensor: *mut THShortTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long,
                               x2: ::std::os::raw::c_long,
                               x3: ::std::os::raw::c_long,
                               value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_get1d(tensor: *const THShortTensor,
                               x0: ::std::os::raw::c_long)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortTensor_get2d(tensor: *const THShortTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortTensor_get3d(tensor: *const THShortTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long,
                               x2: ::std::os::raw::c_long)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortTensor_get4d(tensor: *const THShortTensor,
                               x0: ::std::os::raw::c_long,
                               x1: ::std::os::raw::c_long,
                               x2: ::std::os::raw::c_long,
                               x3: ::std::os::raw::c_long)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortTensor_desc(tensor: *const THShortTensor) -> THDescBuff;
}
extern "C" {
    pub fn THShortTensor_sizeDesc(tensor: *const THShortTensor) -> THDescBuff;
}
#[repr(C)]
#[derive(Copy)]
pub struct THIntTensor {
    pub size: *mut ::std::os::raw::c_long,
    pub stride: *mut ::std::os::raw::c_long,
    pub nDimension: ::std::os::raw::c_int,
    pub storage: *mut THIntStorage,
    pub storageOffset: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_THIntTensor() {
    assert_eq!(::std::mem::size_of::<THIntTensor>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THIntTensor ) ));
    assert_eq! (::std::mem::align_of::<THIntTensor>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THIntTensor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntTensor ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntTensor ) , "::" ,
                stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntTensor ) ) . stride as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntTensor ) , "::" ,
                stringify ! ( stride ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntTensor ) ) . nDimension as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntTensor ) , "::" ,
                stringify ! ( nDimension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntTensor ) ) . storage as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntTensor ) , "::" ,
                stringify ! ( storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntTensor ) ) . storageOffset as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntTensor ) , "::" ,
                stringify ! ( storageOffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntTensor ) ) . refcount as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntTensor ) , "::" ,
                stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THIntTensor ) ) . flag as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( THIntTensor ) , "::" ,
                stringify ! ( flag ) ));
}
impl Clone for THIntTensor {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THIntTensor_storage(self_: *const THIntTensor)
     -> *mut THIntStorage;
}
extern "C" {
    pub fn THIntTensor_storageOffset(self_: *const THIntTensor) -> isize;
}
extern "C" {
    pub fn THIntTensor_nDimension(self_: *const THIntTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_size(self_: *const THIntTensor,
                            dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THIntTensor_stride(self_: *const THIntTensor,
                              dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THIntTensor_newSizeOf(self_: *mut THIntTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THIntTensor_newStrideOf(self_: *mut THIntTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THIntTensor_data(self_: *const THIntTensor)
     -> *mut ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_setFlag(self_: *mut THIntTensor,
                               flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_clearFlag(self_: *mut THIntTensor,
                                 flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_new() -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithTensor(tensor: *mut THIntTensor)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithStorage(storage_: *mut THIntStorage,
                                      storageOffset_: isize,
                                      size_: *mut THLongStorage,
                                      stride_: *mut THLongStorage)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithStorage1d(storage_: *mut THIntStorage,
                                        storageOffset_: isize,
                                        size0_: ::std::os::raw::c_long,
                                        stride0_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithStorage2d(storage_: *mut THIntStorage,
                                        storageOffset_: isize,
                                        size0_: ::std::os::raw::c_long,
                                        stride0_: ::std::os::raw::c_long,
                                        size1_: ::std::os::raw::c_long,
                                        stride1_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithStorage3d(storage_: *mut THIntStorage,
                                        storageOffset_: isize,
                                        size0_: ::std::os::raw::c_long,
                                        stride0_: ::std::os::raw::c_long,
                                        size1_: ::std::os::raw::c_long,
                                        stride1_: ::std::os::raw::c_long,
                                        size2_: ::std::os::raw::c_long,
                                        stride2_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithStorage4d(storage_: *mut THIntStorage,
                                        storageOffset_: isize,
                                        size0_: ::std::os::raw::c_long,
                                        stride0_: ::std::os::raw::c_long,
                                        size1_: ::std::os::raw::c_long,
                                        stride1_: ::std::os::raw::c_long,
                                        size2_: ::std::os::raw::c_long,
                                        stride2_: ::std::os::raw::c_long,
                                        size3_: ::std::os::raw::c_long,
                                        stride3_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithSize(size_: *mut THLongStorage,
                                   stride_: *mut THLongStorage)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithSize1d(size0_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithSize2d(size0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithSize3d(size0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     size2_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newWithSize4d(size0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     size2_: ::std::os::raw::c_long,
                                     size3_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newClone(self_: *mut THIntTensor) -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newContiguous(tensor: *mut THIntTensor)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newSelect(tensor: *mut THIntTensor,
                                 dimension_: ::std::os::raw::c_int,
                                 sliceIndex_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newNarrow(tensor: *mut THIntTensor,
                                 dimension_: ::std::os::raw::c_int,
                                 firstIndex_: ::std::os::raw::c_long,
                                 size_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newTranspose(tensor: *mut THIntTensor,
                                    dimension1_: ::std::os::raw::c_int,
                                    dimension2_: ::std::os::raw::c_int)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newUnfold(tensor: *mut THIntTensor,
                                 dimension_: ::std::os::raw::c_int,
                                 size_: ::std::os::raw::c_long,
                                 step_: ::std::os::raw::c_long)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newView(tensor: *mut THIntTensor,
                               size: *mut THLongStorage) -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_newExpand(tensor: *mut THIntTensor,
                                 size: *mut THLongStorage)
     -> *mut THIntTensor;
}
extern "C" {
    pub fn THIntTensor_expand(r: *mut THIntTensor, tensor: *mut THIntTensor,
                              size: *mut THLongStorage);
}
extern "C" {
    pub fn THIntTensor_expandNd(rets: *mut *mut THIntTensor,
                                ops: *mut *mut THIntTensor,
                                count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_resize(tensor: *mut THIntTensor,
                              size: *mut THLongStorage,
                              stride: *mut THLongStorage);
}
extern "C" {
    pub fn THIntTensor_resizeAs(tensor: *mut THIntTensor,
                                src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_resizeNd(tensor: *mut THIntTensor,
                                nDimension: ::std::os::raw::c_int,
                                size: *mut ::std::os::raw::c_long,
                                stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_resize1d(tensor: *mut THIntTensor,
                                size0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_resize2d(tensor: *mut THIntTensor,
                                size0_: ::std::os::raw::c_long,
                                size1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_resize3d(tensor: *mut THIntTensor,
                                size0_: ::std::os::raw::c_long,
                                size1_: ::std::os::raw::c_long,
                                size2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_resize4d(tensor: *mut THIntTensor,
                                size0_: ::std::os::raw::c_long,
                                size1_: ::std::os::raw::c_long,
                                size2_: ::std::os::raw::c_long,
                                size3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_resize5d(tensor: *mut THIntTensor,
                                size0_: ::std::os::raw::c_long,
                                size1_: ::std::os::raw::c_long,
                                size2_: ::std::os::raw::c_long,
                                size3_: ::std::os::raw::c_long,
                                size4_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_set(self_: *mut THIntTensor, src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_setStorage(self_: *mut THIntTensor,
                                  storage_: *mut THIntStorage,
                                  storageOffset_: isize,
                                  size_: *mut THLongStorage,
                                  stride_: *mut THLongStorage);
}
extern "C" {
    pub fn THIntTensor_setStorageNd(self_: *mut THIntTensor,
                                    storage_: *mut THIntStorage,
                                    storageOffset_: isize,
                                    nDimension: ::std::os::raw::c_int,
                                    size: *mut ::std::os::raw::c_long,
                                    stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_setStorage1d(self_: *mut THIntTensor,
                                    storage_: *mut THIntStorage,
                                    storageOffset_: isize,
                                    size0_: ::std::os::raw::c_long,
                                    stride0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_setStorage2d(self_: *mut THIntTensor,
                                    storage_: *mut THIntStorage,
                                    storageOffset_: isize,
                                    size0_: ::std::os::raw::c_long,
                                    stride0_: ::std::os::raw::c_long,
                                    size1_: ::std::os::raw::c_long,
                                    stride1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_setStorage3d(self_: *mut THIntTensor,
                                    storage_: *mut THIntStorage,
                                    storageOffset_: isize,
                                    size0_: ::std::os::raw::c_long,
                                    stride0_: ::std::os::raw::c_long,
                                    size1_: ::std::os::raw::c_long,
                                    stride1_: ::std::os::raw::c_long,
                                    size2_: ::std::os::raw::c_long,
                                    stride2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_setStorage4d(self_: *mut THIntTensor,
                                    storage_: *mut THIntStorage,
                                    storageOffset_: isize,
                                    size0_: ::std::os::raw::c_long,
                                    stride0_: ::std::os::raw::c_long,
                                    size1_: ::std::os::raw::c_long,
                                    stride1_: ::std::os::raw::c_long,
                                    size2_: ::std::os::raw::c_long,
                                    stride2_: ::std::os::raw::c_long,
                                    size3_: ::std::os::raw::c_long,
                                    stride3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_narrow(self_: *mut THIntTensor, src: *mut THIntTensor,
                              dimension_: ::std::os::raw::c_int,
                              firstIndex_: ::std::os::raw::c_long,
                              size_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_select(self_: *mut THIntTensor, src: *mut THIntTensor,
                              dimension_: ::std::os::raw::c_int,
                              sliceIndex_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_transpose(self_: *mut THIntTensor,
                                 src: *mut THIntTensor,
                                 dimension1_: ::std::os::raw::c_int,
                                 dimension2_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_unfold(self_: *mut THIntTensor, src: *mut THIntTensor,
                              dimension_: ::std::os::raw::c_int,
                              size_: ::std::os::raw::c_long,
                              step_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_squeeze(self_: *mut THIntTensor,
                               src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_squeeze1d(self_: *mut THIntTensor,
                                 src: *mut THIntTensor,
                                 dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_unsqueeze1d(self_: *mut THIntTensor,
                                   src: *mut THIntTensor,
                                   dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_isContiguous(self_: *const THIntTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_isSameSizeAs(self_: *const THIntTensor,
                                    src: *const THIntTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_isSetTo(self_: *const THIntTensor,
                               src: *const THIntTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_isSize(self_: *const THIntTensor,
                              dims: *const THLongStorage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_nElement(self_: *const THIntTensor) -> isize;
}
extern "C" {
    pub fn THIntTensor_retain(self_: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_free(self_: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_freeCopyTo(self_: *mut THIntTensor,
                                  dst: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_set1d(tensor: *mut THIntTensor,
                             x0: ::std::os::raw::c_long,
                             value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_set2d(tensor: *mut THIntTensor,
                             x0: ::std::os::raw::c_long,
                             x1: ::std::os::raw::c_long,
                             value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_set3d(tensor: *mut THIntTensor,
                             x0: ::std::os::raw::c_long,
                             x1: ::std::os::raw::c_long,
                             x2: ::std::os::raw::c_long,
                             value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_set4d(tensor: *mut THIntTensor,
                             x0: ::std::os::raw::c_long,
                             x1: ::std::os::raw::c_long,
                             x2: ::std::os::raw::c_long,
                             x3: ::std::os::raw::c_long,
                             value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_get1d(tensor: *const THIntTensor,
                             x0: ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_get2d(tensor: *const THIntTensor,
                             x0: ::std::os::raw::c_long,
                             x1: ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_get3d(tensor: *const THIntTensor,
                             x0: ::std::os::raw::c_long,
                             x1: ::std::os::raw::c_long,
                             x2: ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_get4d(tensor: *const THIntTensor,
                             x0: ::std::os::raw::c_long,
                             x1: ::std::os::raw::c_long,
                             x2: ::std::os::raw::c_long,
                             x3: ::std::os::raw::c_long)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_desc(tensor: *const THIntTensor) -> THDescBuff;
}
extern "C" {
    pub fn THIntTensor_sizeDesc(tensor: *const THIntTensor) -> THDescBuff;
}
#[repr(C)]
#[derive(Copy)]
pub struct THLongTensor {
    pub size: *mut ::std::os::raw::c_long,
    pub stride: *mut ::std::os::raw::c_long,
    pub nDimension: ::std::os::raw::c_int,
    pub storage: *mut THLongStorage,
    pub storageOffset: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_THLongTensor() {
    assert_eq!(::std::mem::size_of::<THLongTensor>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THLongTensor ) ));
    assert_eq! (::std::mem::align_of::<THLongTensor>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THLongTensor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongTensor ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongTensor ) , "::" ,
                stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongTensor ) ) . stride as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongTensor ) , "::" ,
                stringify ! ( stride ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongTensor ) ) . nDimension as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongTensor ) , "::" ,
                stringify ! ( nDimension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongTensor ) ) . storage as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongTensor ) , "::" ,
                stringify ! ( storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongTensor ) ) . storageOffset as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongTensor ) , "::" ,
                stringify ! ( storageOffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongTensor ) ) . refcount as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongTensor ) , "::" ,
                stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THLongTensor ) ) . flag as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( THLongTensor ) , "::" ,
                stringify ! ( flag ) ));
}
impl Clone for THLongTensor {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THLongTensor_storage(self_: *const THLongTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongTensor_storageOffset(self_: *const THLongTensor) -> isize;
}
extern "C" {
    pub fn THLongTensor_nDimension(self_: *const THLongTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THLongTensor_size(self_: *const THLongTensor,
                             dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_stride(self_: *const THLongTensor,
                               dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_newSizeOf(self_: *mut THLongTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongTensor_newStrideOf(self_: *mut THLongTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THLongTensor_data(self_: *const THLongTensor)
     -> *mut ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_setFlag(self_: *mut THLongTensor,
                                flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_clearFlag(self_: *mut THLongTensor,
                                  flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_new() -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithTensor(tensor: *mut THLongTensor)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithStorage(storage_: *mut THLongStorage,
                                       storageOffset_: isize,
                                       size_: *mut THLongStorage,
                                       stride_: *mut THLongStorage)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithStorage1d(storage_: *mut THLongStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithStorage2d(storage_: *mut THLongStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithStorage3d(storage_: *mut THLongStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long,
                                         size2_: ::std::os::raw::c_long,
                                         stride2_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithStorage4d(storage_: *mut THLongStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long,
                                         size2_: ::std::os::raw::c_long,
                                         stride2_: ::std::os::raw::c_long,
                                         size3_: ::std::os::raw::c_long,
                                         stride3_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithSize(size_: *mut THLongStorage,
                                    stride_: *mut THLongStorage)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithSize1d(size0_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithSize2d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithSize3d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newWithSize4d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long,
                                      size3_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newClone(self_: *mut THLongTensor)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newContiguous(tensor: *mut THLongTensor)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newSelect(tensor: *mut THLongTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  sliceIndex_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newNarrow(tensor: *mut THLongTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  firstIndex_: ::std::os::raw::c_long,
                                  size_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newTranspose(tensor: *mut THLongTensor,
                                     dimension1_: ::std::os::raw::c_int,
                                     dimension2_: ::std::os::raw::c_int)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newUnfold(tensor: *mut THLongTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  size_: ::std::os::raw::c_long,
                                  step_: ::std::os::raw::c_long)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newView(tensor: *mut THLongTensor,
                                size: *mut THLongStorage)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_newExpand(tensor: *mut THLongTensor,
                                  size: *mut THLongStorage)
     -> *mut THLongTensor;
}
extern "C" {
    pub fn THLongTensor_expand(r: *mut THLongTensor,
                               tensor: *mut THLongTensor,
                               size: *mut THLongStorage);
}
extern "C" {
    pub fn THLongTensor_expandNd(rets: *mut *mut THLongTensor,
                                 ops: *mut *mut THLongTensor,
                                 count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_resize(tensor: *mut THLongTensor,
                               size: *mut THLongStorage,
                               stride: *mut THLongStorage);
}
extern "C" {
    pub fn THLongTensor_resizeAs(tensor: *mut THLongTensor,
                                 src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_resizeNd(tensor: *mut THLongTensor,
                                 nDimension: ::std::os::raw::c_int,
                                 size: *mut ::std::os::raw::c_long,
                                 stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_resize1d(tensor: *mut THLongTensor,
                                 size0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_resize2d(tensor: *mut THLongTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_resize3d(tensor: *mut THLongTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_resize4d(tensor: *mut THLongTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long,
                                 size3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_resize5d(tensor: *mut THLongTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long,
                                 size3_: ::std::os::raw::c_long,
                                 size4_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_set(self_: *mut THLongTensor, src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_setStorage(self_: *mut THLongTensor,
                                   storage_: *mut THLongStorage,
                                   storageOffset_: isize,
                                   size_: *mut THLongStorage,
                                   stride_: *mut THLongStorage);
}
extern "C" {
    pub fn THLongTensor_setStorageNd(self_: *mut THLongTensor,
                                     storage_: *mut THLongStorage,
                                     storageOffset_: isize,
                                     nDimension: ::std::os::raw::c_int,
                                     size: *mut ::std::os::raw::c_long,
                                     stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_setStorage1d(self_: *mut THLongTensor,
                                     storage_: *mut THLongStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_setStorage2d(self_: *mut THLongTensor,
                                     storage_: *mut THLongStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_setStorage3d(self_: *mut THLongTensor,
                                     storage_: *mut THLongStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long,
                                     size2_: ::std::os::raw::c_long,
                                     stride2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_setStorage4d(self_: *mut THLongTensor,
                                     storage_: *mut THLongStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long,
                                     size2_: ::std::os::raw::c_long,
                                     stride2_: ::std::os::raw::c_long,
                                     size3_: ::std::os::raw::c_long,
                                     stride3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_narrow(self_: *mut THLongTensor,
                               src: *mut THLongTensor,
                               dimension_: ::std::os::raw::c_int,
                               firstIndex_: ::std::os::raw::c_long,
                               size_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_select(self_: *mut THLongTensor,
                               src: *mut THLongTensor,
                               dimension_: ::std::os::raw::c_int,
                               sliceIndex_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_transpose(self_: *mut THLongTensor,
                                  src: *mut THLongTensor,
                                  dimension1_: ::std::os::raw::c_int,
                                  dimension2_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_unfold(self_: *mut THLongTensor,
                               src: *mut THLongTensor,
                               dimension_: ::std::os::raw::c_int,
                               size_: ::std::os::raw::c_long,
                               step_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_squeeze(self_: *mut THLongTensor,
                                src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_squeeze1d(self_: *mut THLongTensor,
                                  src: *mut THLongTensor,
                                  dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_unsqueeze1d(self_: *mut THLongTensor,
                                    src: *mut THLongTensor,
                                    dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_isContiguous(self_: *const THLongTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THLongTensor_isSameSizeAs(self_: *const THLongTensor,
                                     src: *const THLongTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THLongTensor_isSetTo(self_: *const THLongTensor,
                                src: *const THLongTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THLongTensor_isSize(self_: *const THLongTensor,
                               dims: *const THLongStorage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THLongTensor_nElement(self_: *const THLongTensor) -> isize;
}
extern "C" {
    pub fn THLongTensor_retain(self_: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_free(self_: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_freeCopyTo(self_: *mut THLongTensor,
                                   dst: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_set1d(tensor: *mut THLongTensor,
                              x0: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_set2d(tensor: *mut THLongTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_set3d(tensor: *mut THLongTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_set4d(tensor: *mut THLongTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              x3: ::std::os::raw::c_long,
                              value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_get1d(tensor: *const THLongTensor,
                              x0: ::std::os::raw::c_long)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_get2d(tensor: *const THLongTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_get3d(tensor: *const THLongTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_get4d(tensor: *const THLongTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              x3: ::std::os::raw::c_long)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_desc(tensor: *const THLongTensor) -> THDescBuff;
}
extern "C" {
    pub fn THLongTensor_sizeDesc(tensor: *const THLongTensor) -> THDescBuff;
}
#[repr(C)]
#[derive(Copy)]
pub struct THHalfTensor {
    pub size: *mut ::std::os::raw::c_long,
    pub stride: *mut ::std::os::raw::c_long,
    pub nDimension: ::std::os::raw::c_int,
    pub storage: *mut THHalfStorage,
    pub storageOffset: isize,
    pub refcount: ::std::os::raw::c_int,
    pub flag: ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_THHalfTensor() {
    assert_eq!(::std::mem::size_of::<THHalfTensor>() , 48usize , concat ! (
               "Size of: " , stringify ! ( THHalfTensor ) ));
    assert_eq! (::std::mem::align_of::<THHalfTensor>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( THHalfTensor ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfTensor ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfTensor ) , "::" ,
                stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfTensor ) ) . stride as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfTensor ) , "::" ,
                stringify ! ( stride ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfTensor ) ) . nDimension as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfTensor ) , "::" ,
                stringify ! ( nDimension ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfTensor ) ) . storage as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfTensor ) , "::" ,
                stringify ! ( storage ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfTensor ) ) . storageOffset as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfTensor ) , "::" ,
                stringify ! ( storageOffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfTensor ) ) . refcount as * const _
                as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfTensor ) , "::" ,
                stringify ! ( refcount ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const THHalfTensor ) ) . flag as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( THHalfTensor ) , "::" ,
                stringify ! ( flag ) ));
}
impl Clone for THHalfTensor {
    fn clone(&self) -> Self { *self }
}
extern "C" {
    pub fn THHalfTensor_storage(self_: *const THHalfTensor)
     -> *mut THHalfStorage;
}
extern "C" {
    pub fn THHalfTensor_storageOffset(self_: *const THHalfTensor) -> isize;
}
extern "C" {
    pub fn THHalfTensor_nDimension(self_: *const THHalfTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THHalfTensor_size(self_: *const THHalfTensor,
                             dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THHalfTensor_stride(self_: *const THHalfTensor,
                               dim: ::std::os::raw::c_int)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THHalfTensor_newSizeOf(self_: *mut THHalfTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THHalfTensor_newStrideOf(self_: *mut THHalfTensor)
     -> *mut THLongStorage;
}
extern "C" {
    pub fn THHalfTensor_data(self_: *const THHalfTensor) -> *mut THHalf;
}
extern "C" {
    pub fn THHalfTensor_setFlag(self_: *mut THHalfTensor,
                                flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THHalfTensor_clearFlag(self_: *mut THHalfTensor,
                                  flag: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THHalfTensor_new() -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithTensor(tensor: *mut THHalfTensor)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithStorage(storage_: *mut THHalfStorage,
                                       storageOffset_: isize,
                                       size_: *mut THLongStorage,
                                       stride_: *mut THLongStorage)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithStorage1d(storage_: *mut THHalfStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithStorage2d(storage_: *mut THHalfStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithStorage3d(storage_: *mut THHalfStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long,
                                         size2_: ::std::os::raw::c_long,
                                         stride2_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithStorage4d(storage_: *mut THHalfStorage,
                                         storageOffset_: isize,
                                         size0_: ::std::os::raw::c_long,
                                         stride0_: ::std::os::raw::c_long,
                                         size1_: ::std::os::raw::c_long,
                                         stride1_: ::std::os::raw::c_long,
                                         size2_: ::std::os::raw::c_long,
                                         stride2_: ::std::os::raw::c_long,
                                         size3_: ::std::os::raw::c_long,
                                         stride3_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithSize(size_: *mut THLongStorage,
                                    stride_: *mut THLongStorage)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithSize1d(size0_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithSize2d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithSize3d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newWithSize4d(size0_: ::std::os::raw::c_long,
                                      size1_: ::std::os::raw::c_long,
                                      size2_: ::std::os::raw::c_long,
                                      size3_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newClone(self_: *mut THHalfTensor)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newContiguous(tensor: *mut THHalfTensor)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newSelect(tensor: *mut THHalfTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  sliceIndex_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newNarrow(tensor: *mut THHalfTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  firstIndex_: ::std::os::raw::c_long,
                                  size_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newTranspose(tensor: *mut THHalfTensor,
                                     dimension1_: ::std::os::raw::c_int,
                                     dimension2_: ::std::os::raw::c_int)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newUnfold(tensor: *mut THHalfTensor,
                                  dimension_: ::std::os::raw::c_int,
                                  size_: ::std::os::raw::c_long,
                                  step_: ::std::os::raw::c_long)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newView(tensor: *mut THHalfTensor,
                                size: *mut THLongStorage)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_newExpand(tensor: *mut THHalfTensor,
                                  size: *mut THLongStorage)
     -> *mut THHalfTensor;
}
extern "C" {
    pub fn THHalfTensor_expand(r: *mut THHalfTensor,
                               tensor: *mut THHalfTensor,
                               size: *mut THLongStorage);
}
extern "C" {
    pub fn THHalfTensor_expandNd(rets: *mut *mut THHalfTensor,
                                 ops: *mut *mut THHalfTensor,
                                 count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THHalfTensor_resize(tensor: *mut THHalfTensor,
                               size: *mut THLongStorage,
                               stride: *mut THLongStorage);
}
extern "C" {
    pub fn THHalfTensor_resizeAs(tensor: *mut THHalfTensor,
                                 src: *mut THHalfTensor);
}
extern "C" {
    pub fn THHalfTensor_resizeNd(tensor: *mut THHalfTensor,
                                 nDimension: ::std::os::raw::c_int,
                                 size: *mut ::std::os::raw::c_long,
                                 stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_resize1d(tensor: *mut THHalfTensor,
                                 size0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_resize2d(tensor: *mut THHalfTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_resize3d(tensor: *mut THHalfTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_resize4d(tensor: *mut THHalfTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long,
                                 size3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_resize5d(tensor: *mut THHalfTensor,
                                 size0_: ::std::os::raw::c_long,
                                 size1_: ::std::os::raw::c_long,
                                 size2_: ::std::os::raw::c_long,
                                 size3_: ::std::os::raw::c_long,
                                 size4_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_set(self_: *mut THHalfTensor, src: *mut THHalfTensor);
}
extern "C" {
    pub fn THHalfTensor_setStorage(self_: *mut THHalfTensor,
                                   storage_: *mut THHalfStorage,
                                   storageOffset_: isize,
                                   size_: *mut THLongStorage,
                                   stride_: *mut THLongStorage);
}
extern "C" {
    pub fn THHalfTensor_setStorageNd(self_: *mut THHalfTensor,
                                     storage_: *mut THHalfStorage,
                                     storageOffset_: isize,
                                     nDimension: ::std::os::raw::c_int,
                                     size: *mut ::std::os::raw::c_long,
                                     stride: *mut ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_setStorage1d(self_: *mut THHalfTensor,
                                     storage_: *mut THHalfStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_setStorage2d(self_: *mut THHalfTensor,
                                     storage_: *mut THHalfStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_setStorage3d(self_: *mut THHalfTensor,
                                     storage_: *mut THHalfStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long,
                                     size2_: ::std::os::raw::c_long,
                                     stride2_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_setStorage4d(self_: *mut THHalfTensor,
                                     storage_: *mut THHalfStorage,
                                     storageOffset_: isize,
                                     size0_: ::std::os::raw::c_long,
                                     stride0_: ::std::os::raw::c_long,
                                     size1_: ::std::os::raw::c_long,
                                     stride1_: ::std::os::raw::c_long,
                                     size2_: ::std::os::raw::c_long,
                                     stride2_: ::std::os::raw::c_long,
                                     size3_: ::std::os::raw::c_long,
                                     stride3_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_narrow(self_: *mut THHalfTensor,
                               src: *mut THHalfTensor,
                               dimension_: ::std::os::raw::c_int,
                               firstIndex_: ::std::os::raw::c_long,
                               size_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_select(self_: *mut THHalfTensor,
                               src: *mut THHalfTensor,
                               dimension_: ::std::os::raw::c_int,
                               sliceIndex_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_transpose(self_: *mut THHalfTensor,
                                  src: *mut THHalfTensor,
                                  dimension1_: ::std::os::raw::c_int,
                                  dimension2_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THHalfTensor_unfold(self_: *mut THHalfTensor,
                               src: *mut THHalfTensor,
                               dimension_: ::std::os::raw::c_int,
                               size_: ::std::os::raw::c_long,
                               step_: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THHalfTensor_squeeze(self_: *mut THHalfTensor,
                                src: *mut THHalfTensor);
}
extern "C" {
    pub fn THHalfTensor_squeeze1d(self_: *mut THHalfTensor,
                                  src: *mut THHalfTensor,
                                  dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THHalfTensor_unsqueeze1d(self_: *mut THHalfTensor,
                                    src: *mut THHalfTensor,
                                    dimension_: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THHalfTensor_isContiguous(self_: *const THHalfTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THHalfTensor_isSameSizeAs(self_: *const THHalfTensor,
                                     src: *const THHalfTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THHalfTensor_isSetTo(self_: *const THHalfTensor,
                                src: *const THHalfTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THHalfTensor_isSize(self_: *const THHalfTensor,
                               dims: *const THLongStorage)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THHalfTensor_nElement(self_: *const THHalfTensor) -> isize;
}
extern "C" {
    pub fn THHalfTensor_retain(self_: *mut THHalfTensor);
}
extern "C" {
    pub fn THHalfTensor_free(self_: *mut THHalfTensor);
}
extern "C" {
    pub fn THHalfTensor_freeCopyTo(self_: *mut THHalfTensor,
                                   dst: *mut THHalfTensor);
}
extern "C" {
    pub fn THHalfTensor_set1d(tensor: *mut THHalfTensor,
                              x0: ::std::os::raw::c_long, value: THHalf);
}
extern "C" {
    pub fn THHalfTensor_set2d(tensor: *mut THHalfTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long, value: THHalf);
}
extern "C" {
    pub fn THHalfTensor_set3d(tensor: *mut THHalfTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long, value: THHalf);
}
extern "C" {
    pub fn THHalfTensor_set4d(tensor: *mut THHalfTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              x3: ::std::os::raw::c_long, value: THHalf);
}
extern "C" {
    pub fn THHalfTensor_get1d(tensor: *const THHalfTensor,
                              x0: ::std::os::raw::c_long) -> THHalf;
}
extern "C" {
    pub fn THHalfTensor_get2d(tensor: *const THHalfTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long) -> THHalf;
}
extern "C" {
    pub fn THHalfTensor_get3d(tensor: *const THHalfTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long) -> THHalf;
}
extern "C" {
    pub fn THHalfTensor_get4d(tensor: *const THHalfTensor,
                              x0: ::std::os::raw::c_long,
                              x1: ::std::os::raw::c_long,
                              x2: ::std::os::raw::c_long,
                              x3: ::std::os::raw::c_long) -> THHalf;
}
extern "C" {
    pub fn THHalfTensor_desc(tensor: *const THHalfTensor) -> THDescBuff;
}
extern "C" {
    pub fn THHalfTensor_sizeDesc(tensor: *const THHalfTensor) -> THDescBuff;
}
extern "C" {
    pub fn THFloatTensor_copy(tensor: *mut THFloatTensor,
                              src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_copyByte(tensor: *mut THFloatTensor,
                                  src: *mut THByteTensor);
}
extern "C" {
    pub fn THFloatTensor_copyChar(tensor: *mut THFloatTensor,
                                  src: *mut THCharTensor);
}
extern "C" {
    pub fn THFloatTensor_copyShort(tensor: *mut THFloatTensor,
                                   src: *mut THShortTensor);
}
extern "C" {
    pub fn THFloatTensor_copyInt(tensor: *mut THFloatTensor,
                                 src: *mut THIntTensor);
}
extern "C" {
    pub fn THFloatTensor_copyLong(tensor: *mut THFloatTensor,
                                  src: *mut THLongTensor);
}
extern "C" {
    pub fn THFloatTensor_copyFloat(tensor: *mut THFloatTensor,
                                   src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_copyDouble(tensor: *mut THFloatTensor,
                                    src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THFloatTensor_copyHalf(tensor: *mut THFloatTensor,
                                  src: *mut THHalfTensor);
}
extern "C" {
    pub fn THDoubleTensor_copy(tensor: *mut THDoubleTensor,
                               src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_copyByte(tensor: *mut THDoubleTensor,
                                   src: *mut THByteTensor);
}
extern "C" {
    pub fn THDoubleTensor_copyChar(tensor: *mut THDoubleTensor,
                                   src: *mut THCharTensor);
}
extern "C" {
    pub fn THDoubleTensor_copyShort(tensor: *mut THDoubleTensor,
                                    src: *mut THShortTensor);
}
extern "C" {
    pub fn THDoubleTensor_copyInt(tensor: *mut THDoubleTensor,
                                  src: *mut THIntTensor);
}
extern "C" {
    pub fn THDoubleTensor_copyLong(tensor: *mut THDoubleTensor,
                                   src: *mut THLongTensor);
}
extern "C" {
    pub fn THDoubleTensor_copyFloat(tensor: *mut THDoubleTensor,
                                    src: *mut THFloatTensor);
}
extern "C" {
    pub fn THDoubleTensor_copyDouble(tensor: *mut THDoubleTensor,
                                     src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_copyHalf(tensor: *mut THDoubleTensor,
                                   src: *mut THHalfTensor);
}
extern "C" {
    pub fn THByteTensor_copy(tensor: *mut THByteTensor,
                             src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_copyByte(tensor: *mut THByteTensor,
                                 src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_copyChar(tensor: *mut THByteTensor,
                                 src: *mut THCharTensor);
}
extern "C" {
    pub fn THByteTensor_copyShort(tensor: *mut THByteTensor,
                                  src: *mut THShortTensor);
}
extern "C" {
    pub fn THByteTensor_copyInt(tensor: *mut THByteTensor,
                                src: *mut THIntTensor);
}
extern "C" {
    pub fn THByteTensor_copyLong(tensor: *mut THByteTensor,
                                 src: *mut THLongTensor);
}
extern "C" {
    pub fn THByteTensor_copyFloat(tensor: *mut THByteTensor,
                                  src: *mut THFloatTensor);
}
extern "C" {
    pub fn THByteTensor_copyDouble(tensor: *mut THByteTensor,
                                   src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THByteTensor_copyHalf(tensor: *mut THByteTensor,
                                 src: *mut THHalfTensor);
}
extern "C" {
    pub fn THCharTensor_copy(tensor: *mut THCharTensor,
                             src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_copyByte(tensor: *mut THCharTensor,
                                 src: *mut THByteTensor);
}
extern "C" {
    pub fn THCharTensor_copyChar(tensor: *mut THCharTensor,
                                 src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_copyShort(tensor: *mut THCharTensor,
                                  src: *mut THShortTensor);
}
extern "C" {
    pub fn THCharTensor_copyInt(tensor: *mut THCharTensor,
                                src: *mut THIntTensor);
}
extern "C" {
    pub fn THCharTensor_copyLong(tensor: *mut THCharTensor,
                                 src: *mut THLongTensor);
}
extern "C" {
    pub fn THCharTensor_copyFloat(tensor: *mut THCharTensor,
                                  src: *mut THFloatTensor);
}
extern "C" {
    pub fn THCharTensor_copyDouble(tensor: *mut THCharTensor,
                                   src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THCharTensor_copyHalf(tensor: *mut THCharTensor,
                                 src: *mut THHalfTensor);
}
extern "C" {
    pub fn THShortTensor_copy(tensor: *mut THShortTensor,
                              src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_copyByte(tensor: *mut THShortTensor,
                                  src: *mut THByteTensor);
}
extern "C" {
    pub fn THShortTensor_copyChar(tensor: *mut THShortTensor,
                                  src: *mut THCharTensor);
}
extern "C" {
    pub fn THShortTensor_copyShort(tensor: *mut THShortTensor,
                                   src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_copyInt(tensor: *mut THShortTensor,
                                 src: *mut THIntTensor);
}
extern "C" {
    pub fn THShortTensor_copyLong(tensor: *mut THShortTensor,
                                  src: *mut THLongTensor);
}
extern "C" {
    pub fn THShortTensor_copyFloat(tensor: *mut THShortTensor,
                                   src: *mut THFloatTensor);
}
extern "C" {
    pub fn THShortTensor_copyDouble(tensor: *mut THShortTensor,
                                    src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THShortTensor_copyHalf(tensor: *mut THShortTensor,
                                  src: *mut THHalfTensor);
}
extern "C" {
    pub fn THIntTensor_copy(tensor: *mut THIntTensor, src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_copyByte(tensor: *mut THIntTensor,
                                src: *mut THByteTensor);
}
extern "C" {
    pub fn THIntTensor_copyChar(tensor: *mut THIntTensor,
                                src: *mut THCharTensor);
}
extern "C" {
    pub fn THIntTensor_copyShort(tensor: *mut THIntTensor,
                                 src: *mut THShortTensor);
}
extern "C" {
    pub fn THIntTensor_copyInt(tensor: *mut THIntTensor,
                               src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_copyLong(tensor: *mut THIntTensor,
                                src: *mut THLongTensor);
}
extern "C" {
    pub fn THIntTensor_copyFloat(tensor: *mut THIntTensor,
                                 src: *mut THFloatTensor);
}
extern "C" {
    pub fn THIntTensor_copyDouble(tensor: *mut THIntTensor,
                                  src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THIntTensor_copyHalf(tensor: *mut THIntTensor,
                                src: *mut THHalfTensor);
}
extern "C" {
    pub fn THLongTensor_copy(tensor: *mut THLongTensor,
                             src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_copyByte(tensor: *mut THLongTensor,
                                 src: *mut THByteTensor);
}
extern "C" {
    pub fn THLongTensor_copyChar(tensor: *mut THLongTensor,
                                 src: *mut THCharTensor);
}
extern "C" {
    pub fn THLongTensor_copyShort(tensor: *mut THLongTensor,
                                  src: *mut THShortTensor);
}
extern "C" {
    pub fn THLongTensor_copyInt(tensor: *mut THLongTensor,
                                src: *mut THIntTensor);
}
extern "C" {
    pub fn THLongTensor_copyLong(tensor: *mut THLongTensor,
                                 src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_copyFloat(tensor: *mut THLongTensor,
                                  src: *mut THFloatTensor);
}
extern "C" {
    pub fn THLongTensor_copyDouble(tensor: *mut THLongTensor,
                                   src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THLongTensor_copyHalf(tensor: *mut THLongTensor,
                                 src: *mut THHalfTensor);
}
extern "C" {
    pub fn THHalfTensor_copy(tensor: *mut THHalfTensor,
                             src: *mut THHalfTensor);
}
extern "C" {
    pub fn THHalfTensor_copyByte(tensor: *mut THHalfTensor,
                                 src: *mut THByteTensor);
}
extern "C" {
    pub fn THHalfTensor_copyChar(tensor: *mut THHalfTensor,
                                 src: *mut THCharTensor);
}
extern "C" {
    pub fn THHalfTensor_copyShort(tensor: *mut THHalfTensor,
                                  src: *mut THShortTensor);
}
extern "C" {
    pub fn THHalfTensor_copyInt(tensor: *mut THHalfTensor,
                                src: *mut THIntTensor);
}
extern "C" {
    pub fn THHalfTensor_copyLong(tensor: *mut THHalfTensor,
                                 src: *mut THLongTensor);
}
extern "C" {
    pub fn THHalfTensor_copyFloat(tensor: *mut THHalfTensor,
                                  src: *mut THFloatTensor);
}
extern "C" {
    pub fn THHalfTensor_copyDouble(tensor: *mut THHalfTensor,
                                   src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THHalfTensor_copyHalf(tensor: *mut THHalfTensor,
                                 src: *mut THHalfTensor);
}
extern "C" {
    pub fn THFloatTensor_random(self_: *mut THFloatTensor,
                                _generator: *mut THGenerator);
}
extern "C" {
    pub fn THFloatTensor_geometric(self_: *mut THFloatTensor,
                                   _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THFloatTensor_bernoulli(self_: *mut THFloatTensor,
                                   _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THFloatTensor_bernoulli_FloatTensor(self_: *mut THFloatTensor,
                                               _generator: *mut THGenerator,
                                               p: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_bernoulli_DoubleTensor(self_: *mut THFloatTensor,
                                                _generator: *mut THGenerator,
                                                p: *mut THDoubleTensor);
}
extern "C" {
    pub fn THFloatTensor_uniform(self_: *mut THFloatTensor,
                                 _generator: *mut THGenerator, a: f64,
                                 b: f64);
}
extern "C" {
    pub fn THFloatTensor_normal(self_: *mut THFloatTensor,
                                _generator: *mut THGenerator, mean: f64,
                                stdv: f64);
}
extern "C" {
    pub fn THFloatTensor_exponential(self_: *mut THFloatTensor,
                                     _generator: *mut THGenerator,
                                     lambda: f64);
}
extern "C" {
    pub fn THFloatTensor_cauchy(self_: *mut THFloatTensor,
                                _generator: *mut THGenerator, median: f64,
                                sigma: f64);
}
extern "C" {
    pub fn THFloatTensor_logNormal(self_: *mut THFloatTensor,
                                   _generator: *mut THGenerator, mean: f64,
                                   stdv: f64);
}
extern "C" {
    pub fn THFloatTensor_multinomial(self_: *mut THLongTensor,
                                     _generator: *mut THGenerator,
                                     prob_dist: *mut THFloatTensor,
                                     n_sample: ::std::os::raw::c_int,
                                     with_replacement: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_multinomialAliasSetup(prob_dist: *mut THFloatTensor,
                                               J: *mut THLongTensor,
                                               q: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_multinomialAliasDraw(self_: *mut THLongTensor,
                                              _generator: *mut THGenerator,
                                              J: *mut THLongTensor,
                                              q: *mut THFloatTensor);
}
extern "C" {
    pub fn THDoubleTensor_random(self_: *mut THDoubleTensor,
                                 _generator: *mut THGenerator);
}
extern "C" {
    pub fn THDoubleTensor_geometric(self_: *mut THDoubleTensor,
                                    _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THDoubleTensor_bernoulli(self_: *mut THDoubleTensor,
                                    _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THDoubleTensor_bernoulli_FloatTensor(self_: *mut THDoubleTensor,
                                                _generator: *mut THGenerator,
                                                p: *mut THFloatTensor);
}
extern "C" {
    pub fn THDoubleTensor_bernoulli_DoubleTensor(self_: *mut THDoubleTensor,
                                                 _generator: *mut THGenerator,
                                                 p: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_uniform(self_: *mut THDoubleTensor,
                                  _generator: *mut THGenerator, a: f64,
                                  b: f64);
}
extern "C" {
    pub fn THDoubleTensor_normal(self_: *mut THDoubleTensor,
                                 _generator: *mut THGenerator, mean: f64,
                                 stdv: f64);
}
extern "C" {
    pub fn THDoubleTensor_exponential(self_: *mut THDoubleTensor,
                                      _generator: *mut THGenerator,
                                      lambda: f64);
}
extern "C" {
    pub fn THDoubleTensor_cauchy(self_: *mut THDoubleTensor,
                                 _generator: *mut THGenerator, median: f64,
                                 sigma: f64);
}
extern "C" {
    pub fn THDoubleTensor_logNormal(self_: *mut THDoubleTensor,
                                    _generator: *mut THGenerator, mean: f64,
                                    stdv: f64);
}
extern "C" {
    pub fn THDoubleTensor_multinomial(self_: *mut THLongTensor,
                                      _generator: *mut THGenerator,
                                      prob_dist: *mut THDoubleTensor,
                                      n_sample: ::std::os::raw::c_int,
                                      with_replacement:
                                          ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_multinomialAliasSetup(prob_dist:
                                                    *mut THDoubleTensor,
                                                J: *mut THLongTensor,
                                                q: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_multinomialAliasDraw(self_: *mut THLongTensor,
                                               _generator: *mut THGenerator,
                                               J: *mut THLongTensor,
                                               q: *mut THDoubleTensor);
}
extern "C" {
    pub fn THByteTensor_random(self_: *mut THByteTensor,
                               _generator: *mut THGenerator);
}
extern "C" {
    pub fn THByteTensor_geometric(self_: *mut THByteTensor,
                                  _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THByteTensor_bernoulli(self_: *mut THByteTensor,
                                  _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THByteTensor_bernoulli_FloatTensor(self_: *mut THByteTensor,
                                              _generator: *mut THGenerator,
                                              p: *mut THFloatTensor);
}
extern "C" {
    pub fn THByteTensor_bernoulli_DoubleTensor(self_: *mut THByteTensor,
                                               _generator: *mut THGenerator,
                                               p: *mut THDoubleTensor);
}
extern "C" {
    pub fn THByteTensor_getRNGState(_generator: *mut THGenerator,
                                    self_: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_setRNGState(_generator: *mut THGenerator,
                                    self_: *mut THByteTensor);
}
extern "C" {
    pub fn THCharTensor_random(self_: *mut THCharTensor,
                               _generator: *mut THGenerator);
}
extern "C" {
    pub fn THCharTensor_geometric(self_: *mut THCharTensor,
                                  _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THCharTensor_bernoulli(self_: *mut THCharTensor,
                                  _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THCharTensor_bernoulli_FloatTensor(self_: *mut THCharTensor,
                                              _generator: *mut THGenerator,
                                              p: *mut THFloatTensor);
}
extern "C" {
    pub fn THCharTensor_bernoulli_DoubleTensor(self_: *mut THCharTensor,
                                               _generator: *mut THGenerator,
                                               p: *mut THDoubleTensor);
}
extern "C" {
    pub fn THShortTensor_random(self_: *mut THShortTensor,
                                _generator: *mut THGenerator);
}
extern "C" {
    pub fn THShortTensor_geometric(self_: *mut THShortTensor,
                                   _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THShortTensor_bernoulli(self_: *mut THShortTensor,
                                   _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THShortTensor_bernoulli_FloatTensor(self_: *mut THShortTensor,
                                               _generator: *mut THGenerator,
                                               p: *mut THFloatTensor);
}
extern "C" {
    pub fn THShortTensor_bernoulli_DoubleTensor(self_: *mut THShortTensor,
                                                _generator: *mut THGenerator,
                                                p: *mut THDoubleTensor);
}
extern "C" {
    pub fn THIntTensor_random(self_: *mut THIntTensor,
                              _generator: *mut THGenerator);
}
extern "C" {
    pub fn THIntTensor_geometric(self_: *mut THIntTensor,
                                 _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THIntTensor_bernoulli(self_: *mut THIntTensor,
                                 _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THIntTensor_bernoulli_FloatTensor(self_: *mut THIntTensor,
                                             _generator: *mut THGenerator,
                                             p: *mut THFloatTensor);
}
extern "C" {
    pub fn THIntTensor_bernoulli_DoubleTensor(self_: *mut THIntTensor,
                                              _generator: *mut THGenerator,
                                              p: *mut THDoubleTensor);
}
extern "C" {
    pub fn THLongTensor_random(self_: *mut THLongTensor,
                               _generator: *mut THGenerator);
}
extern "C" {
    pub fn THLongTensor_geometric(self_: *mut THLongTensor,
                                  _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THLongTensor_bernoulli(self_: *mut THLongTensor,
                                  _generator: *mut THGenerator, p: f64);
}
extern "C" {
    pub fn THLongTensor_bernoulli_FloatTensor(self_: *mut THLongTensor,
                                              _generator: *mut THGenerator,
                                              p: *mut THFloatTensor);
}
extern "C" {
    pub fn THLongTensor_bernoulli_DoubleTensor(self_: *mut THLongTensor,
                                               _generator: *mut THGenerator,
                                               p: *mut THDoubleTensor);
}
extern "C" {
    pub fn THFloatTensor_fill(r_: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_zero(r_: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_maskedFill(tensor: *mut THFloatTensor,
                                    mask: *mut THByteTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_maskedCopy(tensor: *mut THFloatTensor,
                                    mask: *mut THByteTensor,
                                    src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_maskedSelect(tensor: *mut THFloatTensor,
                                      src: *mut THFloatTensor,
                                      mask: *mut THByteTensor);
}
extern "C" {
    pub fn THFloatTensor_nonzero(subscript: *mut THLongTensor,
                                 tensor: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_indexSelect(tensor: *mut THFloatTensor,
                                     src: *mut THFloatTensor,
                                     dim: ::std::os::raw::c_int,
                                     index: *mut THLongTensor);
}
extern "C" {
    pub fn THFloatTensor_indexCopy(tensor: *mut THFloatTensor,
                                   dim: ::std::os::raw::c_int,
                                   index: *mut THLongTensor,
                                   src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_indexAdd(tensor: *mut THFloatTensor,
                                  dim: ::std::os::raw::c_int,
                                  index: *mut THLongTensor,
                                  src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_indexFill(tensor: *mut THFloatTensor,
                                   dim: ::std::os::raw::c_int,
                                   index: *mut THLongTensor, val: f32);
}
extern "C" {
    pub fn THFloatTensor_gather(tensor: *mut THFloatTensor,
                                src: *mut THFloatTensor,
                                dim: ::std::os::raw::c_int,
                                index: *mut THLongTensor);
}
extern "C" {
    pub fn THFloatTensor_scatter(tensor: *mut THFloatTensor,
                                 dim: ::std::os::raw::c_int,
                                 index: *mut THLongTensor,
                                 src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_scatterAdd(tensor: *mut THFloatTensor,
                                    dim: ::std::os::raw::c_int,
                                    index: *mut THLongTensor,
                                    src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_scatterFill(tensor: *mut THFloatTensor,
                                     dim: ::std::os::raw::c_int,
                                     index: *mut THLongTensor, val: f32);
}
extern "C" {
    pub fn THFloatTensor_dot(t: *mut THFloatTensor, src: *mut THFloatTensor)
     -> f64;
}
extern "C" {
    pub fn THFloatTensor_minall(t: *mut THFloatTensor) -> f32;
}
extern "C" {
    pub fn THFloatTensor_maxall(t: *mut THFloatTensor) -> f32;
}
extern "C" {
    pub fn THFloatTensor_medianall(t: *mut THFloatTensor) -> f32;
}
extern "C" {
    pub fn THFloatTensor_sumall(t: *mut THFloatTensor) -> f64;
}
extern "C" {
    pub fn THFloatTensor_prodall(t: *mut THFloatTensor) -> f64;
}
extern "C" {
    pub fn THFloatTensor_neg(self_: *mut THFloatTensor,
                             src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cinv(self_: *mut THFloatTensor,
                              src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_add(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                             value: f32);
}
extern "C" {
    pub fn THFloatTensor_sub(self_: *mut THFloatTensor,
                             src: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_mul(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                             value: f32);
}
extern "C" {
    pub fn THFloatTensor_div(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                             value: f32);
}
extern "C" {
    pub fn THFloatTensor_lshift(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                                value: f32);
}
extern "C" {
    pub fn THFloatTensor_rshift(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                                value: f32);
}
extern "C" {
    pub fn THFloatTensor_fmod(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              value: f32);
}
extern "C" {
    pub fn THFloatTensor_remainder(r_: *mut THFloatTensor,
                                   t: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_clamp(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                               min_value: f32, max_value: f32);
}
extern "C" {
    pub fn THFloatTensor_bitand(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                                value: f32);
}
extern "C" {
    pub fn THFloatTensor_bitor(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                               value: f32);
}
extern "C" {
    pub fn THFloatTensor_bitxor(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                                value: f32);
}
extern "C" {
    pub fn THFloatTensor_cadd(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              value: f32, src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_csub(self_: *mut THFloatTensor,
                              src1: *mut THFloatTensor, value: f32,
                              src2: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cmul(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cpow(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cdiv(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_clshift(r_: *mut THFloatTensor,
                                 t: *mut THFloatTensor,
                                 src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_crshift(r_: *mut THFloatTensor,
                                 t: *mut THFloatTensor,
                                 src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cfmod(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                               src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cremainder(r_: *mut THFloatTensor,
                                    t: *mut THFloatTensor,
                                    src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cbitand(r_: *mut THFloatTensor,
                                 t: *mut THFloatTensor,
                                 src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cbitor(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                                src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cbitxor(r_: *mut THFloatTensor,
                                 t: *mut THFloatTensor,
                                 src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_addcmul(r_: *mut THFloatTensor,
                                 t: *mut THFloatTensor, value: f32,
                                 src1: *mut THFloatTensor,
                                 src2: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_addcdiv(r_: *mut THFloatTensor,
                                 t: *mut THFloatTensor, value: f32,
                                 src1: *mut THFloatTensor,
                                 src2: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_addmv(r_: *mut THFloatTensor, beta: f32,
                               t: *mut THFloatTensor, alpha: f32,
                               mat: *mut THFloatTensor,
                               vec: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_addmm(r_: *mut THFloatTensor, beta: f32,
                               t: *mut THFloatTensor, alpha: f32,
                               mat1: *mut THFloatTensor,
                               mat2: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_addr(r_: *mut THFloatTensor, beta: f32,
                              t: *mut THFloatTensor, alpha: f32,
                              vec1: *mut THFloatTensor,
                              vec2: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_addbmm(r_: *mut THFloatTensor, beta: f32,
                                t: *mut THFloatTensor, alpha: f32,
                                batch1: *mut THFloatTensor,
                                batch2: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_baddbmm(r_: *mut THFloatTensor, beta: f32,
                                 t: *mut THFloatTensor, alpha: f32,
                                 batch1: *mut THFloatTensor,
                                 batch2: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_match(r_: *mut THFloatTensor, m1: *mut THFloatTensor,
                               m2: *mut THFloatTensor, gain: f32);
}
extern "C" {
    pub fn THFloatTensor_numel(t: *mut THFloatTensor) -> isize;
}
extern "C" {
    pub fn THFloatTensor_max(values_: *mut THFloatTensor,
                             indices_: *mut THLongTensor,
                             t: *mut THFloatTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_min(values_: *mut THFloatTensor,
                             indices_: *mut THLongTensor,
                             t: *mut THFloatTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_kthvalue(values_: *mut THFloatTensor,
                                  indices_: *mut THLongTensor,
                                  t: *mut THFloatTensor,
                                  k: ::std::os::raw::c_long,
                                  dimension: ::std::os::raw::c_int,
                                  keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_mode(values_: *mut THFloatTensor,
                              indices_: *mut THLongTensor,
                              t: *mut THFloatTensor,
                              dimension: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_median(values_: *mut THFloatTensor,
                                indices_: *mut THLongTensor,
                                t: *mut THFloatTensor,
                                dimension: ::std::os::raw::c_int,
                                keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_sum(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_prod(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              dimension: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_cumsum(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                                dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_cumprod(r_: *mut THFloatTensor,
                                 t: *mut THFloatTensor,
                                 dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_sign(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_trace(t: *mut THFloatTensor) -> f64;
}
extern "C" {
    pub fn THFloatTensor_cross(r_: *mut THFloatTensor, a: *mut THFloatTensor,
                               b: *mut THFloatTensor,
                               dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_cmax(r: *mut THFloatTensor, t: *mut THFloatTensor,
                              src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cmin(r: *mut THFloatTensor, t: *mut THFloatTensor,
                              src: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cmaxValue(r: *mut THFloatTensor,
                                   t: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_cminValue(r: *mut THFloatTensor,
                                   t: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_zeros(r_: *mut THFloatTensor,
                               size: *mut THLongStorage);
}
extern "C" {
    pub fn THFloatTensor_ones(r_: *mut THFloatTensor,
                              size: *mut THLongStorage);
}
extern "C" {
    pub fn THFloatTensor_diag(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_eye(r_: *mut THFloatTensor,
                             n: ::std::os::raw::c_long,
                             m: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_arange(r_: *mut THFloatTensor, xmin: f64, xmax: f64,
                                step: f64);
}
extern "C" {
    pub fn THFloatTensor_range(r_: *mut THFloatTensor, xmin: f64, xmax: f64,
                               step: f64);
}
extern "C" {
    pub fn THFloatTensor_randperm(r_: *mut THFloatTensor,
                                  _generator: *mut THGenerator,
                                  n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_reshape(r_: *mut THFloatTensor,
                                 t: *mut THFloatTensor,
                                 size: *mut THLongStorage);
}
extern "C" {
    pub fn THFloatTensor_sort(rt_: *mut THFloatTensor, ri_: *mut THLongTensor,
                              t: *mut THFloatTensor,
                              dimension: ::std::os::raw::c_int,
                              descendingOrder: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_topk(rt_: *mut THFloatTensor, ri_: *mut THLongTensor,
                              t: *mut THFloatTensor,
                              k: ::std::os::raw::c_long,
                              dim: ::std::os::raw::c_int,
                              dir: ::std::os::raw::c_int,
                              sorted: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_tril(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_triu(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_cat(r_: *mut THFloatTensor, ta: *mut THFloatTensor,
                             tb: *mut THFloatTensor,
                             dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_catArray(result: *mut THFloatTensor,
                                  inputs: *mut *mut THFloatTensor,
                                  numInputs: ::std::os::raw::c_int,
                                  dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_equal(ta: *mut THFloatTensor, tb: *mut THFloatTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFloatTensor_ltValue(r_: *mut THByteTensor, t: *mut THFloatTensor,
                                 value: f32);
}
extern "C" {
    pub fn THFloatTensor_leValue(r_: *mut THByteTensor, t: *mut THFloatTensor,
                                 value: f32);
}
extern "C" {
    pub fn THFloatTensor_gtValue(r_: *mut THByteTensor, t: *mut THFloatTensor,
                                 value: f32);
}
extern "C" {
    pub fn THFloatTensor_geValue(r_: *mut THByteTensor, t: *mut THFloatTensor,
                                 value: f32);
}
extern "C" {
    pub fn THFloatTensor_neValue(r_: *mut THByteTensor, t: *mut THFloatTensor,
                                 value: f32);
}
extern "C" {
    pub fn THFloatTensor_eqValue(r_: *mut THByteTensor, t: *mut THFloatTensor,
                                 value: f32);
}
extern "C" {
    pub fn THFloatTensor_ltValueT(r_: *mut THFloatTensor,
                                  t: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_leValueT(r_: *mut THFloatTensor,
                                  t: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_gtValueT(r_: *mut THFloatTensor,
                                  t: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_geValueT(r_: *mut THFloatTensor,
                                  t: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_neValueT(r_: *mut THFloatTensor,
                                  t: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_eqValueT(r_: *mut THFloatTensor,
                                  t: *mut THFloatTensor, value: f32);
}
extern "C" {
    pub fn THFloatTensor_ltTensor(r_: *mut THByteTensor,
                                  ta: *mut THFloatTensor,
                                  tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_leTensor(r_: *mut THByteTensor,
                                  ta: *mut THFloatTensor,
                                  tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_gtTensor(r_: *mut THByteTensor,
                                  ta: *mut THFloatTensor,
                                  tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_geTensor(r_: *mut THByteTensor,
                                  ta: *mut THFloatTensor,
                                  tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_neTensor(r_: *mut THByteTensor,
                                  ta: *mut THFloatTensor,
                                  tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_eqTensor(r_: *mut THByteTensor,
                                  ta: *mut THFloatTensor,
                                  tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_ltTensorT(r_: *mut THFloatTensor,
                                   ta: *mut THFloatTensor,
                                   tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_leTensorT(r_: *mut THFloatTensor,
                                   ta: *mut THFloatTensor,
                                   tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_gtTensorT(r_: *mut THFloatTensor,
                                   ta: *mut THFloatTensor,
                                   tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_geTensorT(r_: *mut THFloatTensor,
                                   ta: *mut THFloatTensor,
                                   tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_neTensorT(r_: *mut THFloatTensor,
                                   ta: *mut THFloatTensor,
                                   tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_eqTensorT(r_: *mut THFloatTensor,
                                   ta: *mut THFloatTensor,
                                   tb: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_sigmoid(r_: *mut THFloatTensor,
                                 t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_log(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_lgamma(r_: *mut THFloatTensor,
                                t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_log1p(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_exp(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cos(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_acos(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_cosh(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_sin(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_asin(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_sinh(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_tan(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_atan(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_atan2(r_: *mut THFloatTensor, tx: *mut THFloatTensor,
                               ty: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_tanh(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_pow(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                             value: f32);
}
extern "C" {
    pub fn THFloatTensor_tpow(r_: *mut THFloatTensor, value: f32,
                              t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_sqrt(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_rsqrt(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_ceil(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_floor(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_round(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_abs(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_trunc(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_frac(r_: *mut THFloatTensor, t: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_lerp(r_: *mut THFloatTensor, a: *mut THFloatTensor,
                              b: *mut THFloatTensor, weight: f32);
}
extern "C" {
    pub fn THFloatTensor_mean(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              dimension: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_std(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                             dimension: ::std::os::raw::c_int,
                             biased: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_var(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                             dimension: ::std::os::raw::c_int,
                             biased: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_norm(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                              value: f32, dimension: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFloatTensor_renorm(r_: *mut THFloatTensor, t: *mut THFloatTensor,
                                value: f32, dimension: ::std::os::raw::c_int,
                                maxnorm: f32);
}
extern "C" {
    pub fn THFloatTensor_dist(a: *mut THFloatTensor, b: *mut THFloatTensor,
                              value: f32) -> f64;
}
extern "C" {
    pub fn THFloatTensor_histc(hist: *mut THFloatTensor,
                               tensor: *mut THFloatTensor,
                               nbins: ::std::os::raw::c_long, minvalue: f32,
                               maxvalue: f32);
}
extern "C" {
    pub fn THFloatTensor_bhistc(hist: *mut THFloatTensor,
                                tensor: *mut THFloatTensor,
                                nbins: ::std::os::raw::c_long, minvalue: f32,
                                maxvalue: f32);
}
extern "C" {
    pub fn THFloatTensor_meanall(self_: *mut THFloatTensor) -> f64;
}
extern "C" {
    pub fn THFloatTensor_varall(self_: *mut THFloatTensor,
                                biased: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn THFloatTensor_stdall(self_: *mut THFloatTensor,
                                biased: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn THFloatTensor_normall(t: *mut THFloatTensor, value: f32) -> f64;
}
extern "C" {
    pub fn THFloatTensor_linspace(r_: *mut THFloatTensor, a: f32, b: f32,
                                  n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_logspace(r_: *mut THFloatTensor, a: f32, b: f32,
                                  n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_rand(r_: *mut THFloatTensor,
                              _generator: *mut THGenerator,
                              size: *mut THLongStorage);
}
extern "C" {
    pub fn THFloatTensor_randn(r_: *mut THFloatTensor,
                               _generator: *mut THGenerator,
                               size: *mut THLongStorage);
}
extern "C" {
    pub fn THDoubleTensor_fill(r_: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_zero(r_: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_maskedFill(tensor: *mut THDoubleTensor,
                                     mask: *mut THByteTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_maskedCopy(tensor: *mut THDoubleTensor,
                                     mask: *mut THByteTensor,
                                     src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_maskedSelect(tensor: *mut THDoubleTensor,
                                       src: *mut THDoubleTensor,
                                       mask: *mut THByteTensor);
}
extern "C" {
    pub fn THDoubleTensor_nonzero(subscript: *mut THLongTensor,
                                  tensor: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_indexSelect(tensor: *mut THDoubleTensor,
                                      src: *mut THDoubleTensor,
                                      dim: ::std::os::raw::c_int,
                                      index: *mut THLongTensor);
}
extern "C" {
    pub fn THDoubleTensor_indexCopy(tensor: *mut THDoubleTensor,
                                    dim: ::std::os::raw::c_int,
                                    index: *mut THLongTensor,
                                    src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_indexAdd(tensor: *mut THDoubleTensor,
                                   dim: ::std::os::raw::c_int,
                                   index: *mut THLongTensor,
                                   src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_indexFill(tensor: *mut THDoubleTensor,
                                    dim: ::std::os::raw::c_int,
                                    index: *mut THLongTensor, val: f64);
}
extern "C" {
    pub fn THDoubleTensor_gather(tensor: *mut THDoubleTensor,
                                 src: *mut THDoubleTensor,
                                 dim: ::std::os::raw::c_int,
                                 index: *mut THLongTensor);
}
extern "C" {
    pub fn THDoubleTensor_scatter(tensor: *mut THDoubleTensor,
                                  dim: ::std::os::raw::c_int,
                                  index: *mut THLongTensor,
                                  src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_scatterAdd(tensor: *mut THDoubleTensor,
                                     dim: ::std::os::raw::c_int,
                                     index: *mut THLongTensor,
                                     src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_scatterFill(tensor: *mut THDoubleTensor,
                                      dim: ::std::os::raw::c_int,
                                      index: *mut THLongTensor, val: f64);
}
extern "C" {
    pub fn THDoubleTensor_dot(t: *mut THDoubleTensor,
                              src: *mut THDoubleTensor) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_minall(t: *mut THDoubleTensor) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_maxall(t: *mut THDoubleTensor) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_medianall(t: *mut THDoubleTensor) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_sumall(t: *mut THDoubleTensor) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_prodall(t: *mut THDoubleTensor) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_neg(self_: *mut THDoubleTensor,
                              src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cinv(self_: *mut THDoubleTensor,
                               src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_add(r_: *mut THDoubleTensor, t: *mut THDoubleTensor,
                              value: f64);
}
extern "C" {
    pub fn THDoubleTensor_sub(self_: *mut THDoubleTensor,
                              src: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_mul(r_: *mut THDoubleTensor, t: *mut THDoubleTensor,
                              value: f64);
}
extern "C" {
    pub fn THDoubleTensor_div(r_: *mut THDoubleTensor, t: *mut THDoubleTensor,
                              value: f64);
}
extern "C" {
    pub fn THDoubleTensor_lshift(r_: *mut THDoubleTensor,
                                 t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_rshift(r_: *mut THDoubleTensor,
                                 t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_fmod(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_remainder(r_: *mut THDoubleTensor,
                                    t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_clamp(r_: *mut THDoubleTensor,
                                t: *mut THDoubleTensor, min_value: f64,
                                max_value: f64);
}
extern "C" {
    pub fn THDoubleTensor_bitand(r_: *mut THDoubleTensor,
                                 t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_bitor(r_: *mut THDoubleTensor,
                                t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_bitxor(r_: *mut THDoubleTensor,
                                 t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_cadd(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor, value: f64,
                               src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_csub(self_: *mut THDoubleTensor,
                               src1: *mut THDoubleTensor, value: f64,
                               src2: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cmul(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor,
                               src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cpow(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor,
                               src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cdiv(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor,
                               src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_clshift(r_: *mut THDoubleTensor,
                                  t: *mut THDoubleTensor,
                                  src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_crshift(r_: *mut THDoubleTensor,
                                  t: *mut THDoubleTensor,
                                  src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cfmod(r_: *mut THDoubleTensor,
                                t: *mut THDoubleTensor,
                                src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cremainder(r_: *mut THDoubleTensor,
                                     t: *mut THDoubleTensor,
                                     src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cbitand(r_: *mut THDoubleTensor,
                                  t: *mut THDoubleTensor,
                                  src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cbitor(r_: *mut THDoubleTensor,
                                 t: *mut THDoubleTensor,
                                 src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cbitxor(r_: *mut THDoubleTensor,
                                  t: *mut THDoubleTensor,
                                  src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_addcmul(r_: *mut THDoubleTensor,
                                  t: *mut THDoubleTensor, value: f64,
                                  src1: *mut THDoubleTensor,
                                  src2: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_addcdiv(r_: *mut THDoubleTensor,
                                  t: *mut THDoubleTensor, value: f64,
                                  src1: *mut THDoubleTensor,
                                  src2: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_addmv(r_: *mut THDoubleTensor, beta: f64,
                                t: *mut THDoubleTensor, alpha: f64,
                                mat: *mut THDoubleTensor,
                                vec: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_addmm(r_: *mut THDoubleTensor, beta: f64,
                                t: *mut THDoubleTensor, alpha: f64,
                                mat1: *mut THDoubleTensor,
                                mat2: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_addr(r_: *mut THDoubleTensor, beta: f64,
                               t: *mut THDoubleTensor, alpha: f64,
                               vec1: *mut THDoubleTensor,
                               vec2: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_addbmm(r_: *mut THDoubleTensor, beta: f64,
                                 t: *mut THDoubleTensor, alpha: f64,
                                 batch1: *mut THDoubleTensor,
                                 batch2: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_baddbmm(r_: *mut THDoubleTensor, beta: f64,
                                  t: *mut THDoubleTensor, alpha: f64,
                                  batch1: *mut THDoubleTensor,
                                  batch2: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_match(r_: *mut THDoubleTensor,
                                m1: *mut THDoubleTensor,
                                m2: *mut THDoubleTensor, gain: f64);
}
extern "C" {
    pub fn THDoubleTensor_numel(t: *mut THDoubleTensor) -> isize;
}
extern "C" {
    pub fn THDoubleTensor_max(values_: *mut THDoubleTensor,
                              indices_: *mut THLongTensor,
                              t: *mut THDoubleTensor,
                              dimension: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_min(values_: *mut THDoubleTensor,
                              indices_: *mut THLongTensor,
                              t: *mut THDoubleTensor,
                              dimension: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_kthvalue(values_: *mut THDoubleTensor,
                                   indices_: *mut THLongTensor,
                                   t: *mut THDoubleTensor,
                                   k: ::std::os::raw::c_long,
                                   dimension: ::std::os::raw::c_int,
                                   keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_mode(values_: *mut THDoubleTensor,
                               indices_: *mut THLongTensor,
                               t: *mut THDoubleTensor,
                               dimension: ::std::os::raw::c_int,
                               keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_median(values_: *mut THDoubleTensor,
                                 indices_: *mut THLongTensor,
                                 t: *mut THDoubleTensor,
                                 dimension: ::std::os::raw::c_int,
                                 keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_sum(r_: *mut THDoubleTensor, t: *mut THDoubleTensor,
                              dimension: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_prod(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor,
                               dimension: ::std::os::raw::c_int,
                               keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_cumsum(r_: *mut THDoubleTensor,
                                 t: *mut THDoubleTensor,
                                 dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_cumprod(r_: *mut THDoubleTensor,
                                  t: *mut THDoubleTensor,
                                  dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_sign(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_trace(t: *mut THDoubleTensor) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_cross(r_: *mut THDoubleTensor,
                                a: *mut THDoubleTensor,
                                b: *mut THDoubleTensor,
                                dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_cmax(r: *mut THDoubleTensor, t: *mut THDoubleTensor,
                               src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cmin(r: *mut THDoubleTensor, t: *mut THDoubleTensor,
                               src: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cmaxValue(r: *mut THDoubleTensor,
                                    t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_cminValue(r: *mut THDoubleTensor,
                                    t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_zeros(r_: *mut THDoubleTensor,
                                size: *mut THLongStorage);
}
extern "C" {
    pub fn THDoubleTensor_ones(r_: *mut THDoubleTensor,
                               size: *mut THLongStorage);
}
extern "C" {
    pub fn THDoubleTensor_diag(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor,
                               k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_eye(r_: *mut THDoubleTensor,
                              n: ::std::os::raw::c_long,
                              m: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_arange(r_: *mut THDoubleTensor, xmin: f64,
                                 xmax: f64, step: f64);
}
extern "C" {
    pub fn THDoubleTensor_range(r_: *mut THDoubleTensor, xmin: f64, xmax: f64,
                                step: f64);
}
extern "C" {
    pub fn THDoubleTensor_randperm(r_: *mut THDoubleTensor,
                                   _generator: *mut THGenerator,
                                   n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_reshape(r_: *mut THDoubleTensor,
                                  t: *mut THDoubleTensor,
                                  size: *mut THLongStorage);
}
extern "C" {
    pub fn THDoubleTensor_sort(rt_: *mut THDoubleTensor,
                               ri_: *mut THLongTensor, t: *mut THDoubleTensor,
                               dimension: ::std::os::raw::c_int,
                               descendingOrder: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_topk(rt_: *mut THDoubleTensor,
                               ri_: *mut THLongTensor, t: *mut THDoubleTensor,
                               k: ::std::os::raw::c_long,
                               dim: ::std::os::raw::c_int,
                               dir: ::std::os::raw::c_int,
                               sorted: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_tril(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor,
                               k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_triu(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor,
                               k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_cat(r_: *mut THDoubleTensor,
                              ta: *mut THDoubleTensor,
                              tb: *mut THDoubleTensor,
                              dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_catArray(result: *mut THDoubleTensor,
                                   inputs: *mut *mut THDoubleTensor,
                                   numInputs: ::std::os::raw::c_int,
                                   dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_equal(ta: *mut THDoubleTensor,
                                tb: *mut THDoubleTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THDoubleTensor_ltValue(r_: *mut THByteTensor,
                                  t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_leValue(r_: *mut THByteTensor,
                                  t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_gtValue(r_: *mut THByteTensor,
                                  t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_geValue(r_: *mut THByteTensor,
                                  t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_neValue(r_: *mut THByteTensor,
                                  t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_eqValue(r_: *mut THByteTensor,
                                  t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_ltValueT(r_: *mut THDoubleTensor,
                                   t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_leValueT(r_: *mut THDoubleTensor,
                                   t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_gtValueT(r_: *mut THDoubleTensor,
                                   t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_geValueT(r_: *mut THDoubleTensor,
                                   t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_neValueT(r_: *mut THDoubleTensor,
                                   t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_eqValueT(r_: *mut THDoubleTensor,
                                   t: *mut THDoubleTensor, value: f64);
}
extern "C" {
    pub fn THDoubleTensor_ltTensor(r_: *mut THByteTensor,
                                   ta: *mut THDoubleTensor,
                                   tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_leTensor(r_: *mut THByteTensor,
                                   ta: *mut THDoubleTensor,
                                   tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_gtTensor(r_: *mut THByteTensor,
                                   ta: *mut THDoubleTensor,
                                   tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_geTensor(r_: *mut THByteTensor,
                                   ta: *mut THDoubleTensor,
                                   tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_neTensor(r_: *mut THByteTensor,
                                   ta: *mut THDoubleTensor,
                                   tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_eqTensor(r_: *mut THByteTensor,
                                   ta: *mut THDoubleTensor,
                                   tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_ltTensorT(r_: *mut THDoubleTensor,
                                    ta: *mut THDoubleTensor,
                                    tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_leTensorT(r_: *mut THDoubleTensor,
                                    ta: *mut THDoubleTensor,
                                    tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_gtTensorT(r_: *mut THDoubleTensor,
                                    ta: *mut THDoubleTensor,
                                    tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_geTensorT(r_: *mut THDoubleTensor,
                                    ta: *mut THDoubleTensor,
                                    tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_neTensorT(r_: *mut THDoubleTensor,
                                    ta: *mut THDoubleTensor,
                                    tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_eqTensorT(r_: *mut THDoubleTensor,
                                    ta: *mut THDoubleTensor,
                                    tb: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_sigmoid(r_: *mut THDoubleTensor,
                                  t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_log(r_: *mut THDoubleTensor,
                              t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_lgamma(r_: *mut THDoubleTensor,
                                 t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_log1p(r_: *mut THDoubleTensor,
                                t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_exp(r_: *mut THDoubleTensor,
                              t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cos(r_: *mut THDoubleTensor,
                              t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_acos(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_cosh(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_sin(r_: *mut THDoubleTensor,
                              t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_asin(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_sinh(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_tan(r_: *mut THDoubleTensor,
                              t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_atan(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_atan2(r_: *mut THDoubleTensor,
                                tx: *mut THDoubleTensor,
                                ty: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_tanh(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_pow(r_: *mut THDoubleTensor, t: *mut THDoubleTensor,
                              value: f64);
}
extern "C" {
    pub fn THDoubleTensor_tpow(r_: *mut THDoubleTensor, value: f64,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_sqrt(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_rsqrt(r_: *mut THDoubleTensor,
                                t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_ceil(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_floor(r_: *mut THDoubleTensor,
                                t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_round(r_: *mut THDoubleTensor,
                                t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_abs(r_: *mut THDoubleTensor,
                              t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_trunc(r_: *mut THDoubleTensor,
                                t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_frac(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_lerp(r_: *mut THDoubleTensor,
                               a: *mut THDoubleTensor, b: *mut THDoubleTensor,
                               weight: f64);
}
extern "C" {
    pub fn THDoubleTensor_mean(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor,
                               dimension: ::std::os::raw::c_int,
                               keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_std(r_: *mut THDoubleTensor, t: *mut THDoubleTensor,
                              dimension: ::std::os::raw::c_int,
                              biased: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_var(r_: *mut THDoubleTensor, t: *mut THDoubleTensor,
                              dimension: ::std::os::raw::c_int,
                              biased: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_norm(r_: *mut THDoubleTensor,
                               t: *mut THDoubleTensor, value: f64,
                               dimension: ::std::os::raw::c_int,
                               keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDoubleTensor_renorm(r_: *mut THDoubleTensor,
                                 t: *mut THDoubleTensor, value: f64,
                                 dimension: ::std::os::raw::c_int,
                                 maxnorm: f64);
}
extern "C" {
    pub fn THDoubleTensor_dist(a: *mut THDoubleTensor, b: *mut THDoubleTensor,
                               value: f64) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_histc(hist: *mut THDoubleTensor,
                                tensor: *mut THDoubleTensor,
                                nbins: ::std::os::raw::c_long, minvalue: f64,
                                maxvalue: f64);
}
extern "C" {
    pub fn THDoubleTensor_bhistc(hist: *mut THDoubleTensor,
                                 tensor: *mut THDoubleTensor,
                                 nbins: ::std::os::raw::c_long, minvalue: f64,
                                 maxvalue: f64);
}
extern "C" {
    pub fn THDoubleTensor_meanall(self_: *mut THDoubleTensor) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_varall(self_: *mut THDoubleTensor,
                                 biased: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_stdall(self_: *mut THDoubleTensor,
                                 biased: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_normall(t: *mut THDoubleTensor, value: f64) -> f64;
}
extern "C" {
    pub fn THDoubleTensor_linspace(r_: *mut THDoubleTensor, a: f64, b: f64,
                                   n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_logspace(r_: *mut THDoubleTensor, a: f64, b: f64,
                                   n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_rand(r_: *mut THDoubleTensor,
                               _generator: *mut THGenerator,
                               size: *mut THLongStorage);
}
extern "C" {
    pub fn THDoubleTensor_randn(r_: *mut THDoubleTensor,
                                _generator: *mut THGenerator,
                                size: *mut THLongStorage);
}
extern "C" {
    pub fn THByteTensor_fill(r_: *mut THByteTensor,
                             value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_zero(r_: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_maskedFill(tensor: *mut THByteTensor,
                                   mask: *mut THByteTensor,
                                   value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_maskedCopy(tensor: *mut THByteTensor,
                                   mask: *mut THByteTensor,
                                   src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_maskedSelect(tensor: *mut THByteTensor,
                                     src: *mut THByteTensor,
                                     mask: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_nonzero(subscript: *mut THLongTensor,
                                tensor: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_indexSelect(tensor: *mut THByteTensor,
                                    src: *mut THByteTensor,
                                    dim: ::std::os::raw::c_int,
                                    index: *mut THLongTensor);
}
extern "C" {
    pub fn THByteTensor_indexCopy(tensor: *mut THByteTensor,
                                  dim: ::std::os::raw::c_int,
                                  index: *mut THLongTensor,
                                  src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_indexAdd(tensor: *mut THByteTensor,
                                 dim: ::std::os::raw::c_int,
                                 index: *mut THLongTensor,
                                 src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_indexFill(tensor: *mut THByteTensor,
                                  dim: ::std::os::raw::c_int,
                                  index: *mut THLongTensor,
                                  val: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_gather(tensor: *mut THByteTensor,
                               src: *mut THByteTensor,
                               dim: ::std::os::raw::c_int,
                               index: *mut THLongTensor);
}
extern "C" {
    pub fn THByteTensor_scatter(tensor: *mut THByteTensor,
                                dim: ::std::os::raw::c_int,
                                index: *mut THLongTensor,
                                src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_scatterAdd(tensor: *mut THByteTensor,
                                   dim: ::std::os::raw::c_int,
                                   index: *mut THLongTensor,
                                   src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_scatterFill(tensor: *mut THByteTensor,
                                    dim: ::std::os::raw::c_int,
                                    index: *mut THLongTensor,
                                    val: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_dot(t: *mut THByteTensor, src: *mut THByteTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THByteTensor_minall(t: *mut THByteTensor)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteTensor_maxall(t: *mut THByteTensor)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteTensor_medianall(t: *mut THByteTensor)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THByteTensor_sumall(t: *mut THByteTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THByteTensor_prodall(t: *mut THByteTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THByteTensor_neg(self_: *mut THByteTensor, src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cinv(self_: *mut THByteTensor,
                             src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_add(r_: *mut THByteTensor, t: *mut THByteTensor,
                            value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_sub(self_: *mut THByteTensor, src: *mut THByteTensor,
                            value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_mul(r_: *mut THByteTensor, t: *mut THByteTensor,
                            value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_div(r_: *mut THByteTensor, t: *mut THByteTensor,
                            value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_lshift(r_: *mut THByteTensor, t: *mut THByteTensor,
                               value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_rshift(r_: *mut THByteTensor, t: *mut THByteTensor,
                               value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_fmod(r_: *mut THByteTensor, t: *mut THByteTensor,
                             value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_remainder(r_: *mut THByteTensor, t: *mut THByteTensor,
                                  value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_clamp(r_: *mut THByteTensor, t: *mut THByteTensor,
                              min_value: ::std::os::raw::c_uchar,
                              max_value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_bitand(r_: *mut THByteTensor, t: *mut THByteTensor,
                               value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_bitor(r_: *mut THByteTensor, t: *mut THByteTensor,
                              value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_bitxor(r_: *mut THByteTensor, t: *mut THByteTensor,
                               value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_cadd(r_: *mut THByteTensor, t: *mut THByteTensor,
                             value: ::std::os::raw::c_uchar,
                             src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_csub(self_: *mut THByteTensor,
                             src1: *mut THByteTensor,
                             value: ::std::os::raw::c_uchar,
                             src2: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cmul(r_: *mut THByteTensor, t: *mut THByteTensor,
                             src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cpow(r_: *mut THByteTensor, t: *mut THByteTensor,
                             src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cdiv(r_: *mut THByteTensor, t: *mut THByteTensor,
                             src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_clshift(r_: *mut THByteTensor, t: *mut THByteTensor,
                                src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_crshift(r_: *mut THByteTensor, t: *mut THByteTensor,
                                src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cfmod(r_: *mut THByteTensor, t: *mut THByteTensor,
                              src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cremainder(r_: *mut THByteTensor,
                                   t: *mut THByteTensor,
                                   src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cbitand(r_: *mut THByteTensor, t: *mut THByteTensor,
                                src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cbitor(r_: *mut THByteTensor, t: *mut THByteTensor,
                               src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cbitxor(r_: *mut THByteTensor, t: *mut THByteTensor,
                                src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_addcmul(r_: *mut THByteTensor, t: *mut THByteTensor,
                                value: ::std::os::raw::c_uchar,
                                src1: *mut THByteTensor,
                                src2: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_addcdiv(r_: *mut THByteTensor, t: *mut THByteTensor,
                                value: ::std::os::raw::c_uchar,
                                src1: *mut THByteTensor,
                                src2: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_addmv(r_: *mut THByteTensor,
                              beta: ::std::os::raw::c_uchar,
                              t: *mut THByteTensor,
                              alpha: ::std::os::raw::c_uchar,
                              mat: *mut THByteTensor, vec: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_addmm(r_: *mut THByteTensor,
                              beta: ::std::os::raw::c_uchar,
                              t: *mut THByteTensor,
                              alpha: ::std::os::raw::c_uchar,
                              mat1: *mut THByteTensor,
                              mat2: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_addr(r_: *mut THByteTensor,
                             beta: ::std::os::raw::c_uchar,
                             t: *mut THByteTensor,
                             alpha: ::std::os::raw::c_uchar,
                             vec1: *mut THByteTensor,
                             vec2: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_addbmm(r_: *mut THByteTensor,
                               beta: ::std::os::raw::c_uchar,
                               t: *mut THByteTensor,
                               alpha: ::std::os::raw::c_uchar,
                               batch1: *mut THByteTensor,
                               batch2: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_baddbmm(r_: *mut THByteTensor,
                                beta: ::std::os::raw::c_uchar,
                                t: *mut THByteTensor,
                                alpha: ::std::os::raw::c_uchar,
                                batch1: *mut THByteTensor,
                                batch2: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_match(r_: *mut THByteTensor, m1: *mut THByteTensor,
                              m2: *mut THByteTensor,
                              gain: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_numel(t: *mut THByteTensor) -> isize;
}
extern "C" {
    pub fn THByteTensor_max(values_: *mut THByteTensor,
                            indices_: *mut THLongTensor, t: *mut THByteTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_min(values_: *mut THByteTensor,
                            indices_: *mut THLongTensor, t: *mut THByteTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_kthvalue(values_: *mut THByteTensor,
                                 indices_: *mut THLongTensor,
                                 t: *mut THByteTensor,
                                 k: ::std::os::raw::c_long,
                                 dimension: ::std::os::raw::c_int,
                                 keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_mode(values_: *mut THByteTensor,
                             indices_: *mut THLongTensor,
                             t: *mut THByteTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_median(values_: *mut THByteTensor,
                               indices_: *mut THLongTensor,
                               t: *mut THByteTensor,
                               dimension: ::std::os::raw::c_int,
                               keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_sum(r_: *mut THByteTensor, t: *mut THByteTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_prod(r_: *mut THByteTensor, t: *mut THByteTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_cumsum(r_: *mut THByteTensor, t: *mut THByteTensor,
                               dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_cumprod(r_: *mut THByteTensor, t: *mut THByteTensor,
                                dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_sign(r_: *mut THByteTensor, t: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_trace(t: *mut THByteTensor) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THByteTensor_cross(r_: *mut THByteTensor, a: *mut THByteTensor,
                              b: *mut THByteTensor,
                              dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_cmax(r: *mut THByteTensor, t: *mut THByteTensor,
                             src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cmin(r: *mut THByteTensor, t: *mut THByteTensor,
                             src: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_cmaxValue(r: *mut THByteTensor, t: *mut THByteTensor,
                                  value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_cminValue(r: *mut THByteTensor, t: *mut THByteTensor,
                                  value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_zeros(r_: *mut THByteTensor,
                              size: *mut THLongStorage);
}
extern "C" {
    pub fn THByteTensor_ones(r_: *mut THByteTensor, size: *mut THLongStorage);
}
extern "C" {
    pub fn THByteTensor_diag(r_: *mut THByteTensor, t: *mut THByteTensor,
                             k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_eye(r_: *mut THByteTensor, n: ::std::os::raw::c_long,
                            m: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_arange(r_: *mut THByteTensor,
                               xmin: ::std::os::raw::c_long,
                               xmax: ::std::os::raw::c_long,
                               step: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_range(r_: *mut THByteTensor,
                              xmin: ::std::os::raw::c_long,
                              xmax: ::std::os::raw::c_long,
                              step: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_randperm(r_: *mut THByteTensor,
                                 _generator: *mut THGenerator,
                                 n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_reshape(r_: *mut THByteTensor, t: *mut THByteTensor,
                                size: *mut THLongStorage);
}
extern "C" {
    pub fn THByteTensor_sort(rt_: *mut THByteTensor, ri_: *mut THLongTensor,
                             t: *mut THByteTensor,
                             dimension: ::std::os::raw::c_int,
                             descendingOrder: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_topk(rt_: *mut THByteTensor, ri_: *mut THLongTensor,
                             t: *mut THByteTensor, k: ::std::os::raw::c_long,
                             dim: ::std::os::raw::c_int,
                             dir: ::std::os::raw::c_int,
                             sorted: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_tril(r_: *mut THByteTensor, t: *mut THByteTensor,
                             k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_triu(r_: *mut THByteTensor, t: *mut THByteTensor,
                             k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_cat(r_: *mut THByteTensor, ta: *mut THByteTensor,
                            tb: *mut THByteTensor,
                            dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_catArray(result: *mut THByteTensor,
                                 inputs: *mut *mut THByteTensor,
                                 numInputs: ::std::os::raw::c_int,
                                 dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THByteTensor_equal(ta: *mut THByteTensor, tb: *mut THByteTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THByteTensor_ltValue(r_: *mut THByteTensor, t: *mut THByteTensor,
                                value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_leValue(r_: *mut THByteTensor, t: *mut THByteTensor,
                                value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_gtValue(r_: *mut THByteTensor, t: *mut THByteTensor,
                                value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_geValue(r_: *mut THByteTensor, t: *mut THByteTensor,
                                value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_neValue(r_: *mut THByteTensor, t: *mut THByteTensor,
                                value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_eqValue(r_: *mut THByteTensor, t: *mut THByteTensor,
                                value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_ltValueT(r_: *mut THByteTensor, t: *mut THByteTensor,
                                 value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_leValueT(r_: *mut THByteTensor, t: *mut THByteTensor,
                                 value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_gtValueT(r_: *mut THByteTensor, t: *mut THByteTensor,
                                 value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_geValueT(r_: *mut THByteTensor, t: *mut THByteTensor,
                                 value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_neValueT(r_: *mut THByteTensor, t: *mut THByteTensor,
                                 value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_eqValueT(r_: *mut THByteTensor, t: *mut THByteTensor,
                                 value: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THByteTensor_ltTensor(r_: *mut THByteTensor, ta: *mut THByteTensor,
                                 tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_leTensor(r_: *mut THByteTensor, ta: *mut THByteTensor,
                                 tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_gtTensor(r_: *mut THByteTensor, ta: *mut THByteTensor,
                                 tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_geTensor(r_: *mut THByteTensor, ta: *mut THByteTensor,
                                 tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_neTensor(r_: *mut THByteTensor, ta: *mut THByteTensor,
                                 tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_eqTensor(r_: *mut THByteTensor, ta: *mut THByteTensor,
                                 tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_ltTensorT(r_: *mut THByteTensor,
                                  ta: *mut THByteTensor,
                                  tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_leTensorT(r_: *mut THByteTensor,
                                  ta: *mut THByteTensor,
                                  tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_gtTensorT(r_: *mut THByteTensor,
                                  ta: *mut THByteTensor,
                                  tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_geTensorT(r_: *mut THByteTensor,
                                  ta: *mut THByteTensor,
                                  tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_neTensorT(r_: *mut THByteTensor,
                                  ta: *mut THByteTensor,
                                  tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_eqTensorT(r_: *mut THByteTensor,
                                  ta: *mut THByteTensor,
                                  tb: *mut THByteTensor);
}
extern "C" {
    pub fn THByteTensor_logicalall(self_: *mut THByteTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THByteTensor_logicalany(self_: *mut THByteTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THCharTensor_fill(r_: *mut THCharTensor,
                             value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_zero(r_: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_maskedFill(tensor: *mut THCharTensor,
                                   mask: *mut THByteTensor,
                                   value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_maskedCopy(tensor: *mut THCharTensor,
                                   mask: *mut THByteTensor,
                                   src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_maskedSelect(tensor: *mut THCharTensor,
                                     src: *mut THCharTensor,
                                     mask: *mut THByteTensor);
}
extern "C" {
    pub fn THCharTensor_nonzero(subscript: *mut THLongTensor,
                                tensor: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_indexSelect(tensor: *mut THCharTensor,
                                    src: *mut THCharTensor,
                                    dim: ::std::os::raw::c_int,
                                    index: *mut THLongTensor);
}
extern "C" {
    pub fn THCharTensor_indexCopy(tensor: *mut THCharTensor,
                                  dim: ::std::os::raw::c_int,
                                  index: *mut THLongTensor,
                                  src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_indexAdd(tensor: *mut THCharTensor,
                                 dim: ::std::os::raw::c_int,
                                 index: *mut THLongTensor,
                                 src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_indexFill(tensor: *mut THCharTensor,
                                  dim: ::std::os::raw::c_int,
                                  index: *mut THLongTensor,
                                  val: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_gather(tensor: *mut THCharTensor,
                               src: *mut THCharTensor,
                               dim: ::std::os::raw::c_int,
                               index: *mut THLongTensor);
}
extern "C" {
    pub fn THCharTensor_scatter(tensor: *mut THCharTensor,
                                dim: ::std::os::raw::c_int,
                                index: *mut THLongTensor,
                                src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_scatterAdd(tensor: *mut THCharTensor,
                                   dim: ::std::os::raw::c_int,
                                   index: *mut THLongTensor,
                                   src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_scatterFill(tensor: *mut THCharTensor,
                                    dim: ::std::os::raw::c_int,
                                    index: *mut THLongTensor,
                                    val: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_dot(t: *mut THCharTensor, src: *mut THCharTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THCharTensor_minall(t: *mut THCharTensor)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharTensor_maxall(t: *mut THCharTensor)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharTensor_medianall(t: *mut THCharTensor)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn THCharTensor_sumall(t: *mut THCharTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THCharTensor_prodall(t: *mut THCharTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THCharTensor_neg(self_: *mut THCharTensor, src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cinv(self_: *mut THCharTensor,
                             src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_add(r_: *mut THCharTensor, t: *mut THCharTensor,
                            value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_sub(self_: *mut THCharTensor, src: *mut THCharTensor,
                            value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_mul(r_: *mut THCharTensor, t: *mut THCharTensor,
                            value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_div(r_: *mut THCharTensor, t: *mut THCharTensor,
                            value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_lshift(r_: *mut THCharTensor, t: *mut THCharTensor,
                               value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_rshift(r_: *mut THCharTensor, t: *mut THCharTensor,
                               value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_fmod(r_: *mut THCharTensor, t: *mut THCharTensor,
                             value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_remainder(r_: *mut THCharTensor, t: *mut THCharTensor,
                                  value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_clamp(r_: *mut THCharTensor, t: *mut THCharTensor,
                              min_value: ::std::os::raw::c_char,
                              max_value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_bitand(r_: *mut THCharTensor, t: *mut THCharTensor,
                               value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_bitor(r_: *mut THCharTensor, t: *mut THCharTensor,
                              value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_bitxor(r_: *mut THCharTensor, t: *mut THCharTensor,
                               value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_cadd(r_: *mut THCharTensor, t: *mut THCharTensor,
                             value: ::std::os::raw::c_char,
                             src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_csub(self_: *mut THCharTensor,
                             src1: *mut THCharTensor,
                             value: ::std::os::raw::c_char,
                             src2: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cmul(r_: *mut THCharTensor, t: *mut THCharTensor,
                             src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cpow(r_: *mut THCharTensor, t: *mut THCharTensor,
                             src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cdiv(r_: *mut THCharTensor, t: *mut THCharTensor,
                             src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_clshift(r_: *mut THCharTensor, t: *mut THCharTensor,
                                src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_crshift(r_: *mut THCharTensor, t: *mut THCharTensor,
                                src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cfmod(r_: *mut THCharTensor, t: *mut THCharTensor,
                              src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cremainder(r_: *mut THCharTensor,
                                   t: *mut THCharTensor,
                                   src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cbitand(r_: *mut THCharTensor, t: *mut THCharTensor,
                                src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cbitor(r_: *mut THCharTensor, t: *mut THCharTensor,
                               src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cbitxor(r_: *mut THCharTensor, t: *mut THCharTensor,
                                src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_addcmul(r_: *mut THCharTensor, t: *mut THCharTensor,
                                value: ::std::os::raw::c_char,
                                src1: *mut THCharTensor,
                                src2: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_addcdiv(r_: *mut THCharTensor, t: *mut THCharTensor,
                                value: ::std::os::raw::c_char,
                                src1: *mut THCharTensor,
                                src2: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_addmv(r_: *mut THCharTensor,
                              beta: ::std::os::raw::c_char,
                              t: *mut THCharTensor,
                              alpha: ::std::os::raw::c_char,
                              mat: *mut THCharTensor, vec: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_addmm(r_: *mut THCharTensor,
                              beta: ::std::os::raw::c_char,
                              t: *mut THCharTensor,
                              alpha: ::std::os::raw::c_char,
                              mat1: *mut THCharTensor,
                              mat2: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_addr(r_: *mut THCharTensor,
                             beta: ::std::os::raw::c_char,
                             t: *mut THCharTensor,
                             alpha: ::std::os::raw::c_char,
                             vec1: *mut THCharTensor,
                             vec2: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_addbmm(r_: *mut THCharTensor,
                               beta: ::std::os::raw::c_char,
                               t: *mut THCharTensor,
                               alpha: ::std::os::raw::c_char,
                               batch1: *mut THCharTensor,
                               batch2: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_baddbmm(r_: *mut THCharTensor,
                                beta: ::std::os::raw::c_char,
                                t: *mut THCharTensor,
                                alpha: ::std::os::raw::c_char,
                                batch1: *mut THCharTensor,
                                batch2: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_match(r_: *mut THCharTensor, m1: *mut THCharTensor,
                              m2: *mut THCharTensor,
                              gain: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_numel(t: *mut THCharTensor) -> isize;
}
extern "C" {
    pub fn THCharTensor_max(values_: *mut THCharTensor,
                            indices_: *mut THLongTensor, t: *mut THCharTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_min(values_: *mut THCharTensor,
                            indices_: *mut THLongTensor, t: *mut THCharTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_kthvalue(values_: *mut THCharTensor,
                                 indices_: *mut THLongTensor,
                                 t: *mut THCharTensor,
                                 k: ::std::os::raw::c_long,
                                 dimension: ::std::os::raw::c_int,
                                 keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_mode(values_: *mut THCharTensor,
                             indices_: *mut THLongTensor,
                             t: *mut THCharTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_median(values_: *mut THCharTensor,
                               indices_: *mut THLongTensor,
                               t: *mut THCharTensor,
                               dimension: ::std::os::raw::c_int,
                               keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_sum(r_: *mut THCharTensor, t: *mut THCharTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_prod(r_: *mut THCharTensor, t: *mut THCharTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_cumsum(r_: *mut THCharTensor, t: *mut THCharTensor,
                               dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_cumprod(r_: *mut THCharTensor, t: *mut THCharTensor,
                                dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_sign(r_: *mut THCharTensor, t: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_trace(t: *mut THCharTensor) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THCharTensor_cross(r_: *mut THCharTensor, a: *mut THCharTensor,
                              b: *mut THCharTensor,
                              dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_cmax(r: *mut THCharTensor, t: *mut THCharTensor,
                             src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cmin(r: *mut THCharTensor, t: *mut THCharTensor,
                             src: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_cmaxValue(r: *mut THCharTensor, t: *mut THCharTensor,
                                  value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_cminValue(r: *mut THCharTensor, t: *mut THCharTensor,
                                  value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_zeros(r_: *mut THCharTensor,
                              size: *mut THLongStorage);
}
extern "C" {
    pub fn THCharTensor_ones(r_: *mut THCharTensor, size: *mut THLongStorage);
}
extern "C" {
    pub fn THCharTensor_diag(r_: *mut THCharTensor, t: *mut THCharTensor,
                             k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_eye(r_: *mut THCharTensor, n: ::std::os::raw::c_long,
                            m: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_arange(r_: *mut THCharTensor,
                               xmin: ::std::os::raw::c_long,
                               xmax: ::std::os::raw::c_long,
                               step: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_range(r_: *mut THCharTensor,
                              xmin: ::std::os::raw::c_long,
                              xmax: ::std::os::raw::c_long,
                              step: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_randperm(r_: *mut THCharTensor,
                                 _generator: *mut THGenerator,
                                 n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_reshape(r_: *mut THCharTensor, t: *mut THCharTensor,
                                size: *mut THLongStorage);
}
extern "C" {
    pub fn THCharTensor_sort(rt_: *mut THCharTensor, ri_: *mut THLongTensor,
                             t: *mut THCharTensor,
                             dimension: ::std::os::raw::c_int,
                             descendingOrder: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_topk(rt_: *mut THCharTensor, ri_: *mut THLongTensor,
                             t: *mut THCharTensor, k: ::std::os::raw::c_long,
                             dim: ::std::os::raw::c_int,
                             dir: ::std::os::raw::c_int,
                             sorted: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_tril(r_: *mut THCharTensor, t: *mut THCharTensor,
                             k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_triu(r_: *mut THCharTensor, t: *mut THCharTensor,
                             k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_cat(r_: *mut THCharTensor, ta: *mut THCharTensor,
                            tb: *mut THCharTensor,
                            dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_catArray(result: *mut THCharTensor,
                                 inputs: *mut *mut THCharTensor,
                                 numInputs: ::std::os::raw::c_int,
                                 dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THCharTensor_equal(ta: *mut THCharTensor, tb: *mut THCharTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THCharTensor_ltValue(r_: *mut THByteTensor, t: *mut THCharTensor,
                                value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_leValue(r_: *mut THByteTensor, t: *mut THCharTensor,
                                value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_gtValue(r_: *mut THByteTensor, t: *mut THCharTensor,
                                value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_geValue(r_: *mut THByteTensor, t: *mut THCharTensor,
                                value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_neValue(r_: *mut THByteTensor, t: *mut THCharTensor,
                                value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_eqValue(r_: *mut THByteTensor, t: *mut THCharTensor,
                                value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_ltValueT(r_: *mut THCharTensor, t: *mut THCharTensor,
                                 value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_leValueT(r_: *mut THCharTensor, t: *mut THCharTensor,
                                 value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_gtValueT(r_: *mut THCharTensor, t: *mut THCharTensor,
                                 value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_geValueT(r_: *mut THCharTensor, t: *mut THCharTensor,
                                 value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_neValueT(r_: *mut THCharTensor, t: *mut THCharTensor,
                                 value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_eqValueT(r_: *mut THCharTensor, t: *mut THCharTensor,
                                 value: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_ltTensor(r_: *mut THByteTensor, ta: *mut THCharTensor,
                                 tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_leTensor(r_: *mut THByteTensor, ta: *mut THCharTensor,
                                 tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_gtTensor(r_: *mut THByteTensor, ta: *mut THCharTensor,
                                 tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_geTensor(r_: *mut THByteTensor, ta: *mut THCharTensor,
                                 tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_neTensor(r_: *mut THByteTensor, ta: *mut THCharTensor,
                                 tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_eqTensor(r_: *mut THByteTensor, ta: *mut THCharTensor,
                                 tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_ltTensorT(r_: *mut THCharTensor,
                                  ta: *mut THCharTensor,
                                  tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_leTensorT(r_: *mut THCharTensor,
                                  ta: *mut THCharTensor,
                                  tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_gtTensorT(r_: *mut THCharTensor,
                                  ta: *mut THCharTensor,
                                  tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_geTensorT(r_: *mut THCharTensor,
                                  ta: *mut THCharTensor,
                                  tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_neTensorT(r_: *mut THCharTensor,
                                  ta: *mut THCharTensor,
                                  tb: *mut THCharTensor);
}
extern "C" {
    pub fn THCharTensor_eqTensorT(r_: *mut THCharTensor,
                                  ta: *mut THCharTensor,
                                  tb: *mut THCharTensor);
}
extern "C" {
    pub fn THShortTensor_fill(r_: *mut THShortTensor,
                              value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_zero(r_: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_maskedFill(tensor: *mut THShortTensor,
                                    mask: *mut THByteTensor,
                                    value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_maskedCopy(tensor: *mut THShortTensor,
                                    mask: *mut THByteTensor,
                                    src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_maskedSelect(tensor: *mut THShortTensor,
                                      src: *mut THShortTensor,
                                      mask: *mut THByteTensor);
}
extern "C" {
    pub fn THShortTensor_nonzero(subscript: *mut THLongTensor,
                                 tensor: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_indexSelect(tensor: *mut THShortTensor,
                                     src: *mut THShortTensor,
                                     dim: ::std::os::raw::c_int,
                                     index: *mut THLongTensor);
}
extern "C" {
    pub fn THShortTensor_indexCopy(tensor: *mut THShortTensor,
                                   dim: ::std::os::raw::c_int,
                                   index: *mut THLongTensor,
                                   src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_indexAdd(tensor: *mut THShortTensor,
                                  dim: ::std::os::raw::c_int,
                                  index: *mut THLongTensor,
                                  src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_indexFill(tensor: *mut THShortTensor,
                                   dim: ::std::os::raw::c_int,
                                   index: *mut THLongTensor,
                                   val: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_gather(tensor: *mut THShortTensor,
                                src: *mut THShortTensor,
                                dim: ::std::os::raw::c_int,
                                index: *mut THLongTensor);
}
extern "C" {
    pub fn THShortTensor_scatter(tensor: *mut THShortTensor,
                                 dim: ::std::os::raw::c_int,
                                 index: *mut THLongTensor,
                                 src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_scatterAdd(tensor: *mut THShortTensor,
                                    dim: ::std::os::raw::c_int,
                                    index: *mut THLongTensor,
                                    src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_scatterFill(tensor: *mut THShortTensor,
                                     dim: ::std::os::raw::c_int,
                                     index: *mut THLongTensor,
                                     val: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_dot(t: *mut THShortTensor, src: *mut THShortTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THShortTensor_minall(t: *mut THShortTensor)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortTensor_maxall(t: *mut THShortTensor)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortTensor_medianall(t: *mut THShortTensor)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn THShortTensor_sumall(t: *mut THShortTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THShortTensor_prodall(t: *mut THShortTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THShortTensor_neg(self_: *mut THShortTensor,
                             src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cinv(self_: *mut THShortTensor,
                              src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_add(r_: *mut THShortTensor, t: *mut THShortTensor,
                             value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_sub(self_: *mut THShortTensor,
                             src: *mut THShortTensor,
                             value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_mul(r_: *mut THShortTensor, t: *mut THShortTensor,
                             value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_div(r_: *mut THShortTensor, t: *mut THShortTensor,
                             value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_lshift(r_: *mut THShortTensor, t: *mut THShortTensor,
                                value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_rshift(r_: *mut THShortTensor, t: *mut THShortTensor,
                                value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_fmod(r_: *mut THShortTensor, t: *mut THShortTensor,
                              value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_remainder(r_: *mut THShortTensor,
                                   t: *mut THShortTensor,
                                   value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_clamp(r_: *mut THShortTensor, t: *mut THShortTensor,
                               min_value: ::std::os::raw::c_short,
                               max_value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_bitand(r_: *mut THShortTensor, t: *mut THShortTensor,
                                value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_bitor(r_: *mut THShortTensor, t: *mut THShortTensor,
                               value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_bitxor(r_: *mut THShortTensor, t: *mut THShortTensor,
                                value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_cadd(r_: *mut THShortTensor, t: *mut THShortTensor,
                              value: ::std::os::raw::c_short,
                              src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_csub(self_: *mut THShortTensor,
                              src1: *mut THShortTensor,
                              value: ::std::os::raw::c_short,
                              src2: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cmul(r_: *mut THShortTensor, t: *mut THShortTensor,
                              src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cpow(r_: *mut THShortTensor, t: *mut THShortTensor,
                              src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cdiv(r_: *mut THShortTensor, t: *mut THShortTensor,
                              src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_clshift(r_: *mut THShortTensor,
                                 t: *mut THShortTensor,
                                 src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_crshift(r_: *mut THShortTensor,
                                 t: *mut THShortTensor,
                                 src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cfmod(r_: *mut THShortTensor, t: *mut THShortTensor,
                               src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cremainder(r_: *mut THShortTensor,
                                    t: *mut THShortTensor,
                                    src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cbitand(r_: *mut THShortTensor,
                                 t: *mut THShortTensor,
                                 src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cbitor(r_: *mut THShortTensor, t: *mut THShortTensor,
                                src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cbitxor(r_: *mut THShortTensor,
                                 t: *mut THShortTensor,
                                 src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_addcmul(r_: *mut THShortTensor,
                                 t: *mut THShortTensor,
                                 value: ::std::os::raw::c_short,
                                 src1: *mut THShortTensor,
                                 src2: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_addcdiv(r_: *mut THShortTensor,
                                 t: *mut THShortTensor,
                                 value: ::std::os::raw::c_short,
                                 src1: *mut THShortTensor,
                                 src2: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_addmv(r_: *mut THShortTensor,
                               beta: ::std::os::raw::c_short,
                               t: *mut THShortTensor,
                               alpha: ::std::os::raw::c_short,
                               mat: *mut THShortTensor,
                               vec: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_addmm(r_: *mut THShortTensor,
                               beta: ::std::os::raw::c_short,
                               t: *mut THShortTensor,
                               alpha: ::std::os::raw::c_short,
                               mat1: *mut THShortTensor,
                               mat2: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_addr(r_: *mut THShortTensor,
                              beta: ::std::os::raw::c_short,
                              t: *mut THShortTensor,
                              alpha: ::std::os::raw::c_short,
                              vec1: *mut THShortTensor,
                              vec2: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_addbmm(r_: *mut THShortTensor,
                                beta: ::std::os::raw::c_short,
                                t: *mut THShortTensor,
                                alpha: ::std::os::raw::c_short,
                                batch1: *mut THShortTensor,
                                batch2: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_baddbmm(r_: *mut THShortTensor,
                                 beta: ::std::os::raw::c_short,
                                 t: *mut THShortTensor,
                                 alpha: ::std::os::raw::c_short,
                                 batch1: *mut THShortTensor,
                                 batch2: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_match(r_: *mut THShortTensor, m1: *mut THShortTensor,
                               m2: *mut THShortTensor,
                               gain: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_numel(t: *mut THShortTensor) -> isize;
}
extern "C" {
    pub fn THShortTensor_max(values_: *mut THShortTensor,
                             indices_: *mut THLongTensor,
                             t: *mut THShortTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_min(values_: *mut THShortTensor,
                             indices_: *mut THLongTensor,
                             t: *mut THShortTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_kthvalue(values_: *mut THShortTensor,
                                  indices_: *mut THLongTensor,
                                  t: *mut THShortTensor,
                                  k: ::std::os::raw::c_long,
                                  dimension: ::std::os::raw::c_int,
                                  keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_mode(values_: *mut THShortTensor,
                              indices_: *mut THLongTensor,
                              t: *mut THShortTensor,
                              dimension: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_median(values_: *mut THShortTensor,
                                indices_: *mut THLongTensor,
                                t: *mut THShortTensor,
                                dimension: ::std::os::raw::c_int,
                                keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_sum(r_: *mut THShortTensor, t: *mut THShortTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_prod(r_: *mut THShortTensor, t: *mut THShortTensor,
                              dimension: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_cumsum(r_: *mut THShortTensor, t: *mut THShortTensor,
                                dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_cumprod(r_: *mut THShortTensor,
                                 t: *mut THShortTensor,
                                 dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_sign(r_: *mut THShortTensor, t: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_trace(t: *mut THShortTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THShortTensor_cross(r_: *mut THShortTensor, a: *mut THShortTensor,
                               b: *mut THShortTensor,
                               dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_cmax(r: *mut THShortTensor, t: *mut THShortTensor,
                              src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cmin(r: *mut THShortTensor, t: *mut THShortTensor,
                              src: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_cmaxValue(r: *mut THShortTensor,
                                   t: *mut THShortTensor,
                                   value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_cminValue(r: *mut THShortTensor,
                                   t: *mut THShortTensor,
                                   value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_zeros(r_: *mut THShortTensor,
                               size: *mut THLongStorage);
}
extern "C" {
    pub fn THShortTensor_ones(r_: *mut THShortTensor,
                              size: *mut THLongStorage);
}
extern "C" {
    pub fn THShortTensor_diag(r_: *mut THShortTensor, t: *mut THShortTensor,
                              k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_eye(r_: *mut THShortTensor,
                             n: ::std::os::raw::c_long,
                             m: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_arange(r_: *mut THShortTensor,
                                xmin: ::std::os::raw::c_long,
                                xmax: ::std::os::raw::c_long,
                                step: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_range(r_: *mut THShortTensor,
                               xmin: ::std::os::raw::c_long,
                               xmax: ::std::os::raw::c_long,
                               step: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_randperm(r_: *mut THShortTensor,
                                  _generator: *mut THGenerator,
                                  n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_reshape(r_: *mut THShortTensor,
                                 t: *mut THShortTensor,
                                 size: *mut THLongStorage);
}
extern "C" {
    pub fn THShortTensor_sort(rt_: *mut THShortTensor, ri_: *mut THLongTensor,
                              t: *mut THShortTensor,
                              dimension: ::std::os::raw::c_int,
                              descendingOrder: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_topk(rt_: *mut THShortTensor, ri_: *mut THLongTensor,
                              t: *mut THShortTensor,
                              k: ::std::os::raw::c_long,
                              dim: ::std::os::raw::c_int,
                              dir: ::std::os::raw::c_int,
                              sorted: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_tril(r_: *mut THShortTensor, t: *mut THShortTensor,
                              k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_triu(r_: *mut THShortTensor, t: *mut THShortTensor,
                              k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_cat(r_: *mut THShortTensor, ta: *mut THShortTensor,
                             tb: *mut THShortTensor,
                             dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_catArray(result: *mut THShortTensor,
                                  inputs: *mut *mut THShortTensor,
                                  numInputs: ::std::os::raw::c_int,
                                  dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THShortTensor_equal(ta: *mut THShortTensor, tb: *mut THShortTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THShortTensor_ltValue(r_: *mut THByteTensor, t: *mut THShortTensor,
                                 value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_leValue(r_: *mut THByteTensor, t: *mut THShortTensor,
                                 value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_gtValue(r_: *mut THByteTensor, t: *mut THShortTensor,
                                 value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_geValue(r_: *mut THByteTensor, t: *mut THShortTensor,
                                 value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_neValue(r_: *mut THByteTensor, t: *mut THShortTensor,
                                 value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_eqValue(r_: *mut THByteTensor, t: *mut THShortTensor,
                                 value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_ltValueT(r_: *mut THShortTensor,
                                  t: *mut THShortTensor,
                                  value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_leValueT(r_: *mut THShortTensor,
                                  t: *mut THShortTensor,
                                  value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_gtValueT(r_: *mut THShortTensor,
                                  t: *mut THShortTensor,
                                  value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_geValueT(r_: *mut THShortTensor,
                                  t: *mut THShortTensor,
                                  value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_neValueT(r_: *mut THShortTensor,
                                  t: *mut THShortTensor,
                                  value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_eqValueT(r_: *mut THShortTensor,
                                  t: *mut THShortTensor,
                                  value: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THShortTensor_ltTensor(r_: *mut THByteTensor,
                                  ta: *mut THShortTensor,
                                  tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_leTensor(r_: *mut THByteTensor,
                                  ta: *mut THShortTensor,
                                  tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_gtTensor(r_: *mut THByteTensor,
                                  ta: *mut THShortTensor,
                                  tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_geTensor(r_: *mut THByteTensor,
                                  ta: *mut THShortTensor,
                                  tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_neTensor(r_: *mut THByteTensor,
                                  ta: *mut THShortTensor,
                                  tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_eqTensor(r_: *mut THByteTensor,
                                  ta: *mut THShortTensor,
                                  tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_ltTensorT(r_: *mut THShortTensor,
                                   ta: *mut THShortTensor,
                                   tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_leTensorT(r_: *mut THShortTensor,
                                   ta: *mut THShortTensor,
                                   tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_gtTensorT(r_: *mut THShortTensor,
                                   ta: *mut THShortTensor,
                                   tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_geTensorT(r_: *mut THShortTensor,
                                   ta: *mut THShortTensor,
                                   tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_neTensorT(r_: *mut THShortTensor,
                                   ta: *mut THShortTensor,
                                   tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_eqTensorT(r_: *mut THShortTensor,
                                   ta: *mut THShortTensor,
                                   tb: *mut THShortTensor);
}
extern "C" {
    pub fn THShortTensor_abs(r_: *mut THShortTensor, t: *mut THShortTensor);
}
extern "C" {
    pub fn THIntTensor_fill(r_: *mut THIntTensor,
                            value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_zero(r_: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_maskedFill(tensor: *mut THIntTensor,
                                  mask: *mut THByteTensor,
                                  value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_maskedCopy(tensor: *mut THIntTensor,
                                  mask: *mut THByteTensor,
                                  src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_maskedSelect(tensor: *mut THIntTensor,
                                    src: *mut THIntTensor,
                                    mask: *mut THByteTensor);
}
extern "C" {
    pub fn THIntTensor_nonzero(subscript: *mut THLongTensor,
                               tensor: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_indexSelect(tensor: *mut THIntTensor,
                                   src: *mut THIntTensor,
                                   dim: ::std::os::raw::c_int,
                                   index: *mut THLongTensor);
}
extern "C" {
    pub fn THIntTensor_indexCopy(tensor: *mut THIntTensor,
                                 dim: ::std::os::raw::c_int,
                                 index: *mut THLongTensor,
                                 src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_indexAdd(tensor: *mut THIntTensor,
                                dim: ::std::os::raw::c_int,
                                index: *mut THLongTensor,
                                src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_indexFill(tensor: *mut THIntTensor,
                                 dim: ::std::os::raw::c_int,
                                 index: *mut THLongTensor,
                                 val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_gather(tensor: *mut THIntTensor, src: *mut THIntTensor,
                              dim: ::std::os::raw::c_int,
                              index: *mut THLongTensor);
}
extern "C" {
    pub fn THIntTensor_scatter(tensor: *mut THIntTensor,
                               dim: ::std::os::raw::c_int,
                               index: *mut THLongTensor,
                               src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_scatterAdd(tensor: *mut THIntTensor,
                                  dim: ::std::os::raw::c_int,
                                  index: *mut THLongTensor,
                                  src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_scatterFill(tensor: *mut THIntTensor,
                                   dim: ::std::os::raw::c_int,
                                   index: *mut THLongTensor,
                                   val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_dot(t: *mut THIntTensor, src: *mut THIntTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THIntTensor_minall(t: *mut THIntTensor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_maxall(t: *mut THIntTensor) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_medianall(t: *mut THIntTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_sumall(t: *mut THIntTensor) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THIntTensor_prodall(t: *mut THIntTensor) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THIntTensor_neg(self_: *mut THIntTensor, src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cinv(self_: *mut THIntTensor, src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_add(r_: *mut THIntTensor, t: *mut THIntTensor,
                           value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_sub(self_: *mut THIntTensor, src: *mut THIntTensor,
                           value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_mul(r_: *mut THIntTensor, t: *mut THIntTensor,
                           value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_div(r_: *mut THIntTensor, t: *mut THIntTensor,
                           value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_lshift(r_: *mut THIntTensor, t: *mut THIntTensor,
                              value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_rshift(r_: *mut THIntTensor, t: *mut THIntTensor,
                              value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_fmod(r_: *mut THIntTensor, t: *mut THIntTensor,
                            value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_remainder(r_: *mut THIntTensor, t: *mut THIntTensor,
                                 value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_clamp(r_: *mut THIntTensor, t: *mut THIntTensor,
                             min_value: ::std::os::raw::c_int,
                             max_value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_bitand(r_: *mut THIntTensor, t: *mut THIntTensor,
                              value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_bitor(r_: *mut THIntTensor, t: *mut THIntTensor,
                             value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_bitxor(r_: *mut THIntTensor, t: *mut THIntTensor,
                              value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_cadd(r_: *mut THIntTensor, t: *mut THIntTensor,
                            value: ::std::os::raw::c_int,
                            src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_csub(self_: *mut THIntTensor, src1: *mut THIntTensor,
                            value: ::std::os::raw::c_int,
                            src2: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cmul(r_: *mut THIntTensor, t: *mut THIntTensor,
                            src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cpow(r_: *mut THIntTensor, t: *mut THIntTensor,
                            src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cdiv(r_: *mut THIntTensor, t: *mut THIntTensor,
                            src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_clshift(r_: *mut THIntTensor, t: *mut THIntTensor,
                               src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_crshift(r_: *mut THIntTensor, t: *mut THIntTensor,
                               src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cfmod(r_: *mut THIntTensor, t: *mut THIntTensor,
                             src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cremainder(r_: *mut THIntTensor, t: *mut THIntTensor,
                                  src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cbitand(r_: *mut THIntTensor, t: *mut THIntTensor,
                               src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cbitor(r_: *mut THIntTensor, t: *mut THIntTensor,
                              src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cbitxor(r_: *mut THIntTensor, t: *mut THIntTensor,
                               src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_addcmul(r_: *mut THIntTensor, t: *mut THIntTensor,
                               value: ::std::os::raw::c_int,
                               src1: *mut THIntTensor,
                               src2: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_addcdiv(r_: *mut THIntTensor, t: *mut THIntTensor,
                               value: ::std::os::raw::c_int,
                               src1: *mut THIntTensor,
                               src2: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_addmv(r_: *mut THIntTensor,
                             beta: ::std::os::raw::c_int, t: *mut THIntTensor,
                             alpha: ::std::os::raw::c_int,
                             mat: *mut THIntTensor, vec: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_addmm(r_: *mut THIntTensor,
                             beta: ::std::os::raw::c_int, t: *mut THIntTensor,
                             alpha: ::std::os::raw::c_int,
                             mat1: *mut THIntTensor, mat2: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_addr(r_: *mut THIntTensor, beta: ::std::os::raw::c_int,
                            t: *mut THIntTensor, alpha: ::std::os::raw::c_int,
                            vec1: *mut THIntTensor, vec2: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_addbmm(r_: *mut THIntTensor,
                              beta: ::std::os::raw::c_int,
                              t: *mut THIntTensor,
                              alpha: ::std::os::raw::c_int,
                              batch1: *mut THIntTensor,
                              batch2: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_baddbmm(r_: *mut THIntTensor,
                               beta: ::std::os::raw::c_int,
                               t: *mut THIntTensor,
                               alpha: ::std::os::raw::c_int,
                               batch1: *mut THIntTensor,
                               batch2: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_match(r_: *mut THIntTensor, m1: *mut THIntTensor,
                             m2: *mut THIntTensor,
                             gain: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_numel(t: *mut THIntTensor) -> isize;
}
extern "C" {
    pub fn THIntTensor_max(values_: *mut THIntTensor,
                           indices_: *mut THLongTensor, t: *mut THIntTensor,
                           dimension: ::std::os::raw::c_int,
                           keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_min(values_: *mut THIntTensor,
                           indices_: *mut THLongTensor, t: *mut THIntTensor,
                           dimension: ::std::os::raw::c_int,
                           keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_kthvalue(values_: *mut THIntTensor,
                                indices_: *mut THLongTensor,
                                t: *mut THIntTensor,
                                k: ::std::os::raw::c_long,
                                dimension: ::std::os::raw::c_int,
                                keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_mode(values_: *mut THIntTensor,
                            indices_: *mut THLongTensor, t: *mut THIntTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_median(values_: *mut THIntTensor,
                              indices_: *mut THLongTensor,
                              t: *mut THIntTensor,
                              dimension: ::std::os::raw::c_int,
                              keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_sum(r_: *mut THIntTensor, t: *mut THIntTensor,
                           dimension: ::std::os::raw::c_int,
                           keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_prod(r_: *mut THIntTensor, t: *mut THIntTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_cumsum(r_: *mut THIntTensor, t: *mut THIntTensor,
                              dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_cumprod(r_: *mut THIntTensor, t: *mut THIntTensor,
                               dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_sign(r_: *mut THIntTensor, t: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_trace(t: *mut THIntTensor) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THIntTensor_cross(r_: *mut THIntTensor, a: *mut THIntTensor,
                             b: *mut THIntTensor,
                             dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_cmax(r: *mut THIntTensor, t: *mut THIntTensor,
                            src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cmin(r: *mut THIntTensor, t: *mut THIntTensor,
                            src: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_cmaxValue(r: *mut THIntTensor, t: *mut THIntTensor,
                                 value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_cminValue(r: *mut THIntTensor, t: *mut THIntTensor,
                                 value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_zeros(r_: *mut THIntTensor, size: *mut THLongStorage);
}
extern "C" {
    pub fn THIntTensor_ones(r_: *mut THIntTensor, size: *mut THLongStorage);
}
extern "C" {
    pub fn THIntTensor_diag(r_: *mut THIntTensor, t: *mut THIntTensor,
                            k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_eye(r_: *mut THIntTensor, n: ::std::os::raw::c_long,
                           m: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_arange(r_: *mut THIntTensor,
                              xmin: ::std::os::raw::c_long,
                              xmax: ::std::os::raw::c_long,
                              step: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_range(r_: *mut THIntTensor,
                             xmin: ::std::os::raw::c_long,
                             xmax: ::std::os::raw::c_long,
                             step: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_randperm(r_: *mut THIntTensor,
                                _generator: *mut THGenerator,
                                n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_reshape(r_: *mut THIntTensor, t: *mut THIntTensor,
                               size: *mut THLongStorage);
}
extern "C" {
    pub fn THIntTensor_sort(rt_: *mut THIntTensor, ri_: *mut THLongTensor,
                            t: *mut THIntTensor,
                            dimension: ::std::os::raw::c_int,
                            descendingOrder: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_topk(rt_: *mut THIntTensor, ri_: *mut THLongTensor,
                            t: *mut THIntTensor, k: ::std::os::raw::c_long,
                            dim: ::std::os::raw::c_int,
                            dir: ::std::os::raw::c_int,
                            sorted: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_tril(r_: *mut THIntTensor, t: *mut THIntTensor,
                            k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_triu(r_: *mut THIntTensor, t: *mut THIntTensor,
                            k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_cat(r_: *mut THIntTensor, ta: *mut THIntTensor,
                           tb: *mut THIntTensor,
                           dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_catArray(result: *mut THIntTensor,
                                inputs: *mut *mut THIntTensor,
                                numInputs: ::std::os::raw::c_int,
                                dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_equal(ta: *mut THIntTensor, tb: *mut THIntTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THIntTensor_ltValue(r_: *mut THByteTensor, t: *mut THIntTensor,
                               value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_leValue(r_: *mut THByteTensor, t: *mut THIntTensor,
                               value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_gtValue(r_: *mut THByteTensor, t: *mut THIntTensor,
                               value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_geValue(r_: *mut THByteTensor, t: *mut THIntTensor,
                               value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_neValue(r_: *mut THByteTensor, t: *mut THIntTensor,
                               value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_eqValue(r_: *mut THByteTensor, t: *mut THIntTensor,
                               value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_ltValueT(r_: *mut THIntTensor, t: *mut THIntTensor,
                                value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_leValueT(r_: *mut THIntTensor, t: *mut THIntTensor,
                                value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_gtValueT(r_: *mut THIntTensor, t: *mut THIntTensor,
                                value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_geValueT(r_: *mut THIntTensor, t: *mut THIntTensor,
                                value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_neValueT(r_: *mut THIntTensor, t: *mut THIntTensor,
                                value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_eqValueT(r_: *mut THIntTensor, t: *mut THIntTensor,
                                value: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THIntTensor_ltTensor(r_: *mut THByteTensor, ta: *mut THIntTensor,
                                tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_leTensor(r_: *mut THByteTensor, ta: *mut THIntTensor,
                                tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_gtTensor(r_: *mut THByteTensor, ta: *mut THIntTensor,
                                tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_geTensor(r_: *mut THByteTensor, ta: *mut THIntTensor,
                                tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_neTensor(r_: *mut THByteTensor, ta: *mut THIntTensor,
                                tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_eqTensor(r_: *mut THByteTensor, ta: *mut THIntTensor,
                                tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_ltTensorT(r_: *mut THIntTensor, ta: *mut THIntTensor,
                                 tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_leTensorT(r_: *mut THIntTensor, ta: *mut THIntTensor,
                                 tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_gtTensorT(r_: *mut THIntTensor, ta: *mut THIntTensor,
                                 tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_geTensorT(r_: *mut THIntTensor, ta: *mut THIntTensor,
                                 tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_neTensorT(r_: *mut THIntTensor, ta: *mut THIntTensor,
                                 tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_eqTensorT(r_: *mut THIntTensor, ta: *mut THIntTensor,
                                 tb: *mut THIntTensor);
}
extern "C" {
    pub fn THIntTensor_abs(r_: *mut THIntTensor, t: *mut THIntTensor);
}
extern "C" {
    pub fn THLongTensor_fill(r_: *mut THLongTensor,
                             value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_zero(r_: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_maskedFill(tensor: *mut THLongTensor,
                                   mask: *mut THByteTensor,
                                   value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_maskedCopy(tensor: *mut THLongTensor,
                                   mask: *mut THByteTensor,
                                   src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_maskedSelect(tensor: *mut THLongTensor,
                                     src: *mut THLongTensor,
                                     mask: *mut THByteTensor);
}
extern "C" {
    pub fn THLongTensor_nonzero(subscript: *mut THLongTensor,
                                tensor: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_indexSelect(tensor: *mut THLongTensor,
                                    src: *mut THLongTensor,
                                    dim: ::std::os::raw::c_int,
                                    index: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_indexCopy(tensor: *mut THLongTensor,
                                  dim: ::std::os::raw::c_int,
                                  index: *mut THLongTensor,
                                  src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_indexAdd(tensor: *mut THLongTensor,
                                 dim: ::std::os::raw::c_int,
                                 index: *mut THLongTensor,
                                 src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_indexFill(tensor: *mut THLongTensor,
                                  dim: ::std::os::raw::c_int,
                                  index: *mut THLongTensor,
                                  val: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_gather(tensor: *mut THLongTensor,
                               src: *mut THLongTensor,
                               dim: ::std::os::raw::c_int,
                               index: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_scatter(tensor: *mut THLongTensor,
                                dim: ::std::os::raw::c_int,
                                index: *mut THLongTensor,
                                src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_scatterAdd(tensor: *mut THLongTensor,
                                   dim: ::std::os::raw::c_int,
                                   index: *mut THLongTensor,
                                   src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_scatterFill(tensor: *mut THLongTensor,
                                    dim: ::std::os::raw::c_int,
                                    index: *mut THLongTensor,
                                    val: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_dot(t: *mut THLongTensor, src: *mut THLongTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_minall(t: *mut THLongTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_maxall(t: *mut THLongTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_medianall(t: *mut THLongTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_sumall(t: *mut THLongTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_prodall(t: *mut THLongTensor)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_neg(self_: *mut THLongTensor, src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cinv(self_: *mut THLongTensor,
                             src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_add(r_: *mut THLongTensor, t: *mut THLongTensor,
                            value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_sub(self_: *mut THLongTensor, src: *mut THLongTensor,
                            value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_mul(r_: *mut THLongTensor, t: *mut THLongTensor,
                            value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_div(r_: *mut THLongTensor, t: *mut THLongTensor,
                            value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_lshift(r_: *mut THLongTensor, t: *mut THLongTensor,
                               value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_rshift(r_: *mut THLongTensor, t: *mut THLongTensor,
                               value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_fmod(r_: *mut THLongTensor, t: *mut THLongTensor,
                             value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_remainder(r_: *mut THLongTensor, t: *mut THLongTensor,
                                  value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_clamp(r_: *mut THLongTensor, t: *mut THLongTensor,
                              min_value: ::std::os::raw::c_long,
                              max_value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_bitand(r_: *mut THLongTensor, t: *mut THLongTensor,
                               value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_bitor(r_: *mut THLongTensor, t: *mut THLongTensor,
                              value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_bitxor(r_: *mut THLongTensor, t: *mut THLongTensor,
                               value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_cadd(r_: *mut THLongTensor, t: *mut THLongTensor,
                             value: ::std::os::raw::c_long,
                             src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_csub(self_: *mut THLongTensor,
                             src1: *mut THLongTensor,
                             value: ::std::os::raw::c_long,
                             src2: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cmul(r_: *mut THLongTensor, t: *mut THLongTensor,
                             src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cpow(r_: *mut THLongTensor, t: *mut THLongTensor,
                             src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cdiv(r_: *mut THLongTensor, t: *mut THLongTensor,
                             src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_clshift(r_: *mut THLongTensor, t: *mut THLongTensor,
                                src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_crshift(r_: *mut THLongTensor, t: *mut THLongTensor,
                                src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cfmod(r_: *mut THLongTensor, t: *mut THLongTensor,
                              src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cremainder(r_: *mut THLongTensor,
                                   t: *mut THLongTensor,
                                   src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cbitand(r_: *mut THLongTensor, t: *mut THLongTensor,
                                src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cbitor(r_: *mut THLongTensor, t: *mut THLongTensor,
                               src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cbitxor(r_: *mut THLongTensor, t: *mut THLongTensor,
                                src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_addcmul(r_: *mut THLongTensor, t: *mut THLongTensor,
                                value: ::std::os::raw::c_long,
                                src1: *mut THLongTensor,
                                src2: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_addcdiv(r_: *mut THLongTensor, t: *mut THLongTensor,
                                value: ::std::os::raw::c_long,
                                src1: *mut THLongTensor,
                                src2: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_addmv(r_: *mut THLongTensor,
                              beta: ::std::os::raw::c_long,
                              t: *mut THLongTensor,
                              alpha: ::std::os::raw::c_long,
                              mat: *mut THLongTensor, vec: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_addmm(r_: *mut THLongTensor,
                              beta: ::std::os::raw::c_long,
                              t: *mut THLongTensor,
                              alpha: ::std::os::raw::c_long,
                              mat1: *mut THLongTensor,
                              mat2: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_addr(r_: *mut THLongTensor,
                             beta: ::std::os::raw::c_long,
                             t: *mut THLongTensor,
                             alpha: ::std::os::raw::c_long,
                             vec1: *mut THLongTensor,
                             vec2: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_addbmm(r_: *mut THLongTensor,
                               beta: ::std::os::raw::c_long,
                               t: *mut THLongTensor,
                               alpha: ::std::os::raw::c_long,
                               batch1: *mut THLongTensor,
                               batch2: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_baddbmm(r_: *mut THLongTensor,
                                beta: ::std::os::raw::c_long,
                                t: *mut THLongTensor,
                                alpha: ::std::os::raw::c_long,
                                batch1: *mut THLongTensor,
                                batch2: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_match(r_: *mut THLongTensor, m1: *mut THLongTensor,
                              m2: *mut THLongTensor,
                              gain: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_numel(t: *mut THLongTensor) -> isize;
}
extern "C" {
    pub fn THLongTensor_max(values_: *mut THLongTensor,
                            indices_: *mut THLongTensor, t: *mut THLongTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_min(values_: *mut THLongTensor,
                            indices_: *mut THLongTensor, t: *mut THLongTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_kthvalue(values_: *mut THLongTensor,
                                 indices_: *mut THLongTensor,
                                 t: *mut THLongTensor,
                                 k: ::std::os::raw::c_long,
                                 dimension: ::std::os::raw::c_int,
                                 keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_mode(values_: *mut THLongTensor,
                             indices_: *mut THLongTensor,
                             t: *mut THLongTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_median(values_: *mut THLongTensor,
                               indices_: *mut THLongTensor,
                               t: *mut THLongTensor,
                               dimension: ::std::os::raw::c_int,
                               keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_sum(r_: *mut THLongTensor, t: *mut THLongTensor,
                            dimension: ::std::os::raw::c_int,
                            keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_prod(r_: *mut THLongTensor, t: *mut THLongTensor,
                             dimension: ::std::os::raw::c_int,
                             keepdim: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_cumsum(r_: *mut THLongTensor, t: *mut THLongTensor,
                               dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_cumprod(r_: *mut THLongTensor, t: *mut THLongTensor,
                                dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_sign(r_: *mut THLongTensor, t: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_trace(t: *mut THLongTensor) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THLongTensor_cross(r_: *mut THLongTensor, a: *mut THLongTensor,
                              b: *mut THLongTensor,
                              dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_cmax(r: *mut THLongTensor, t: *mut THLongTensor,
                             src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cmin(r: *mut THLongTensor, t: *mut THLongTensor,
                             src: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_cmaxValue(r: *mut THLongTensor, t: *mut THLongTensor,
                                  value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_cminValue(r: *mut THLongTensor, t: *mut THLongTensor,
                                  value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_zeros(r_: *mut THLongTensor,
                              size: *mut THLongStorage);
}
extern "C" {
    pub fn THLongTensor_ones(r_: *mut THLongTensor, size: *mut THLongStorage);
}
extern "C" {
    pub fn THLongTensor_diag(r_: *mut THLongTensor, t: *mut THLongTensor,
                             k: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_eye(r_: *mut THLongTensor, n: ::std::os::raw::c_long,
                            m: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_arange(r_: *mut THLongTensor,
                               xmin: ::std::os::raw::c_long,
                               xmax: ::std::os::raw::c_long,
                               step: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_range(r_: *mut THLongTensor,
                              xmin: ::std::os::raw::c_long,
                              xmax: ::std::os::raw::c_long,
                              step: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_randperm(r_: *mut THLongTensor,
                                 _generator: *mut THGenerator,
                                 n: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_reshape(r_: *mut THLongTensor, t: *mut THLongTensor,
                                size: *mut THLongStorage);
}
extern "C" {
    pub fn THLongTensor_sort(rt_: *mut THLongTensor, ri_: *mut THLongTensor,
                             t: *mut THLongTensor,
                             dimension: ::std::os::raw::c_int,
                             descendingOrder: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_topk(rt_: *mut THLongTensor, ri_: *mut THLongTensor,
                             t: *mut THLongTensor, k: ::std::os::raw::c_long,
                             dim: ::std::os::raw::c_int,
                             dir: ::std::os::raw::c_int,
                             sorted: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_tril(r_: *mut THLongTensor, t: *mut THLongTensor,
                             k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_triu(r_: *mut THLongTensor, t: *mut THLongTensor,
                             k: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_cat(r_: *mut THLongTensor, ta: *mut THLongTensor,
                            tb: *mut THLongTensor,
                            dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_catArray(result: *mut THLongTensor,
                                 inputs: *mut *mut THLongTensor,
                                 numInputs: ::std::os::raw::c_int,
                                 dimension: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THLongTensor_equal(ta: *mut THLongTensor, tb: *mut THLongTensor)
     -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THLongTensor_ltValue(r_: *mut THByteTensor, t: *mut THLongTensor,
                                value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_leValue(r_: *mut THByteTensor, t: *mut THLongTensor,
                                value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_gtValue(r_: *mut THByteTensor, t: *mut THLongTensor,
                                value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_geValue(r_: *mut THByteTensor, t: *mut THLongTensor,
                                value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_neValue(r_: *mut THByteTensor, t: *mut THLongTensor,
                                value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_eqValue(r_: *mut THByteTensor, t: *mut THLongTensor,
                                value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_ltValueT(r_: *mut THLongTensor, t: *mut THLongTensor,
                                 value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_leValueT(r_: *mut THLongTensor, t: *mut THLongTensor,
                                 value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_gtValueT(r_: *mut THLongTensor, t: *mut THLongTensor,
                                 value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_geValueT(r_: *mut THLongTensor, t: *mut THLongTensor,
                                 value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_neValueT(r_: *mut THLongTensor, t: *mut THLongTensor,
                                 value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_eqValueT(r_: *mut THLongTensor, t: *mut THLongTensor,
                                 value: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_ltTensor(r_: *mut THByteTensor, ta: *mut THLongTensor,
                                 tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_leTensor(r_: *mut THByteTensor, ta: *mut THLongTensor,
                                 tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_gtTensor(r_: *mut THByteTensor, ta: *mut THLongTensor,
                                 tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_geTensor(r_: *mut THByteTensor, ta: *mut THLongTensor,
                                 tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_neTensor(r_: *mut THByteTensor, ta: *mut THLongTensor,
                                 tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_eqTensor(r_: *mut THByteTensor, ta: *mut THLongTensor,
                                 tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_ltTensorT(r_: *mut THLongTensor,
                                  ta: *mut THLongTensor,
                                  tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_leTensorT(r_: *mut THLongTensor,
                                  ta: *mut THLongTensor,
                                  tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_gtTensorT(r_: *mut THLongTensor,
                                  ta: *mut THLongTensor,
                                  tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_geTensorT(r_: *mut THLongTensor,
                                  ta: *mut THLongTensor,
                                  tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_neTensorT(r_: *mut THLongTensor,
                                  ta: *mut THLongTensor,
                                  tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_eqTensorT(r_: *mut THLongTensor,
                                  ta: *mut THLongTensor,
                                  tb: *mut THLongTensor);
}
extern "C" {
    pub fn THLongTensor_abs(r_: *mut THLongTensor, t: *mut THLongTensor);
}
extern "C" {
    pub fn THFloatTensor_validXCorr2Dptr(r_: *mut f32, alpha: f32,
                                         t_: *mut f32,
                                         ir: ::std::os::raw::c_long,
                                         ic: ::std::os::raw::c_long,
                                         k_: *mut f32,
                                         kr: ::std::os::raw::c_long,
                                         kc: ::std::os::raw::c_long,
                                         sr: ::std::os::raw::c_long,
                                         sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_validConv2Dptr(r_: *mut f32, alpha: f32,
                                        t_: *mut f32,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut f32,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_fullXCorr2Dptr(r_: *mut f32, alpha: f32,
                                        t_: *mut f32,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut f32,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_fullConv2Dptr(r_: *mut f32, alpha: f32, t_: *mut f32,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut f32,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_validXCorr2DRevptr(r_: *mut f32, alpha: f32,
                                            t_: *mut f32,
                                            ir: ::std::os::raw::c_long,
                                            ic: ::std::os::raw::c_long,
                                            k_: *mut f32,
                                            kr: ::std::os::raw::c_long,
                                            kc: ::std::os::raw::c_long,
                                            sr: ::std::os::raw::c_long,
                                            sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_conv2DRevger(r_: *mut THFloatTensor, beta: f32,
                                      alpha: f32, t_: *mut THFloatTensor,
                                      k_: *mut THFloatTensor,
                                      srow: ::std::os::raw::c_long,
                                      scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_conv2DRevgerm(r_: *mut THFloatTensor, beta: f32,
                                       alpha: f32, t_: *mut THFloatTensor,
                                       k_: *mut THFloatTensor,
                                       srow: ::std::os::raw::c_long,
                                       scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_conv2Dger(r_: *mut THFloatTensor, beta: f32,
                                   alpha: f32, t_: *mut THFloatTensor,
                                   k_: *mut THFloatTensor,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_conv2Dmv(r_: *mut THFloatTensor, beta: f32,
                                  alpha: f32, t_: *mut THFloatTensor,
                                  k_: *mut THFloatTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_conv2Dmm(r_: *mut THFloatTensor, beta: f32,
                                  alpha: f32, t_: *mut THFloatTensor,
                                  k_: *mut THFloatTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_conv2Dmul(r_: *mut THFloatTensor, beta: f32,
                                   alpha: f32, t_: *mut THFloatTensor,
                                   k_: *mut THFloatTensor,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_conv2Dcmul(r_: *mut THFloatTensor, beta: f32,
                                    alpha: f32, t_: *mut THFloatTensor,
                                    k_: *mut THFloatTensor,
                                    srow: ::std::os::raw::c_long,
                                    scol: ::std::os::raw::c_long,
                                    vf: *const ::std::os::raw::c_char,
                                    xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_validXCorr3Dptr(r_: *mut f32, alpha: f32,
                                         t_: *mut f32,
                                         it: ::std::os::raw::c_long,
                                         ir: ::std::os::raw::c_long,
                                         ic: ::std::os::raw::c_long,
                                         k_: *mut f32,
                                         kt: ::std::os::raw::c_long,
                                         kr: ::std::os::raw::c_long,
                                         kc: ::std::os::raw::c_long,
                                         st: ::std::os::raw::c_long,
                                         sr: ::std::os::raw::c_long,
                                         sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_validConv3Dptr(r_: *mut f32, alpha: f32,
                                        t_: *mut f32,
                                        it: ::std::os::raw::c_long,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut f32,
                                        kt: ::std::os::raw::c_long,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        st: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_fullXCorr3Dptr(r_: *mut f32, alpha: f32,
                                        t_: *mut f32,
                                        it: ::std::os::raw::c_long,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut f32,
                                        kt: ::std::os::raw::c_long,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        st: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_fullConv3Dptr(r_: *mut f32, alpha: f32, t_: *mut f32,
                                       it: ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut f32,
                                       kt: ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       st: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_validXCorr3DRevptr(r_: *mut f32, alpha: f32,
                                            t_: *mut f32,
                                            it: ::std::os::raw::c_long,
                                            ir: ::std::os::raw::c_long,
                                            ic: ::std::os::raw::c_long,
                                            k_: *mut f32,
                                            kt: ::std::os::raw::c_long,
                                            kr: ::std::os::raw::c_long,
                                            kc: ::std::os::raw::c_long,
                                            st: ::std::os::raw::c_long,
                                            sr: ::std::os::raw::c_long,
                                            sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_conv3DRevger(r_: *mut THFloatTensor, beta: f32,
                                      alpha: f32, t_: *mut THFloatTensor,
                                      k_: *mut THFloatTensor,
                                      sdepth: ::std::os::raw::c_long,
                                      srow: ::std::os::raw::c_long,
                                      scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFloatTensor_conv3Dger(r_: *mut THFloatTensor, beta: f32,
                                   alpha: f32, t_: *mut THFloatTensor,
                                   k_: *mut THFloatTensor,
                                   sdepth: ::std::os::raw::c_long,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_conv3Dmv(r_: *mut THFloatTensor, beta: f32,
                                  alpha: f32, t_: *mut THFloatTensor,
                                  k_: *mut THFloatTensor,
                                  sdepth: ::std::os::raw::c_long,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_conv3Dmul(r_: *mut THFloatTensor, beta: f32,
                                   alpha: f32, t_: *mut THFloatTensor,
                                   k_: *mut THFloatTensor,
                                   sdepth: ::std::os::raw::c_long,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_conv3Dcmul(r_: *mut THFloatTensor, beta: f32,
                                    alpha: f32, t_: *mut THFloatTensor,
                                    k_: *mut THFloatTensor,
                                    sdepth: ::std::os::raw::c_long,
                                    srow: ::std::os::raw::c_long,
                                    scol: ::std::os::raw::c_long,
                                    vf: *const ::std::os::raw::c_char,
                                    xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_validXCorr2Dptr(r_: *mut f64, alpha: f64,
                                          t_: *mut f64,
                                          ir: ::std::os::raw::c_long,
                                          ic: ::std::os::raw::c_long,
                                          k_: *mut f64,
                                          kr: ::std::os::raw::c_long,
                                          kc: ::std::os::raw::c_long,
                                          sr: ::std::os::raw::c_long,
                                          sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_validConv2Dptr(r_: *mut f64, alpha: f64,
                                         t_: *mut f64,
                                         ir: ::std::os::raw::c_long,
                                         ic: ::std::os::raw::c_long,
                                         k_: *mut f64,
                                         kr: ::std::os::raw::c_long,
                                         kc: ::std::os::raw::c_long,
                                         sr: ::std::os::raw::c_long,
                                         sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_fullXCorr2Dptr(r_: *mut f64, alpha: f64,
                                         t_: *mut f64,
                                         ir: ::std::os::raw::c_long,
                                         ic: ::std::os::raw::c_long,
                                         k_: *mut f64,
                                         kr: ::std::os::raw::c_long,
                                         kc: ::std::os::raw::c_long,
                                         sr: ::std::os::raw::c_long,
                                         sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_fullConv2Dptr(r_: *mut f64, alpha: f64,
                                        t_: *mut f64,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut f64,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_validXCorr2DRevptr(r_: *mut f64, alpha: f64,
                                             t_: *mut f64,
                                             ir: ::std::os::raw::c_long,
                                             ic: ::std::os::raw::c_long,
                                             k_: *mut f64,
                                             kr: ::std::os::raw::c_long,
                                             kc: ::std::os::raw::c_long,
                                             sr: ::std::os::raw::c_long,
                                             sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_conv2DRevger(r_: *mut THDoubleTensor, beta: f64,
                                       alpha: f64, t_: *mut THDoubleTensor,
                                       k_: *mut THDoubleTensor,
                                       srow: ::std::os::raw::c_long,
                                       scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_conv2DRevgerm(r_: *mut THDoubleTensor, beta: f64,
                                        alpha: f64, t_: *mut THDoubleTensor,
                                        k_: *mut THDoubleTensor,
                                        srow: ::std::os::raw::c_long,
                                        scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_conv2Dger(r_: *mut THDoubleTensor, beta: f64,
                                    alpha: f64, t_: *mut THDoubleTensor,
                                    k_: *mut THDoubleTensor,
                                    srow: ::std::os::raw::c_long,
                                    scol: ::std::os::raw::c_long,
                                    vf: *const ::std::os::raw::c_char,
                                    xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_conv2Dmv(r_: *mut THDoubleTensor, beta: f64,
                                   alpha: f64, t_: *mut THDoubleTensor,
                                   k_: *mut THDoubleTensor,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_conv2Dmm(r_: *mut THDoubleTensor, beta: f64,
                                   alpha: f64, t_: *mut THDoubleTensor,
                                   k_: *mut THDoubleTensor,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_conv2Dmul(r_: *mut THDoubleTensor, beta: f64,
                                    alpha: f64, t_: *mut THDoubleTensor,
                                    k_: *mut THDoubleTensor,
                                    srow: ::std::os::raw::c_long,
                                    scol: ::std::os::raw::c_long,
                                    vf: *const ::std::os::raw::c_char,
                                    xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_conv2Dcmul(r_: *mut THDoubleTensor, beta: f64,
                                     alpha: f64, t_: *mut THDoubleTensor,
                                     k_: *mut THDoubleTensor,
                                     srow: ::std::os::raw::c_long,
                                     scol: ::std::os::raw::c_long,
                                     vf: *const ::std::os::raw::c_char,
                                     xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_validXCorr3Dptr(r_: *mut f64, alpha: f64,
                                          t_: *mut f64,
                                          it: ::std::os::raw::c_long,
                                          ir: ::std::os::raw::c_long,
                                          ic: ::std::os::raw::c_long,
                                          k_: *mut f64,
                                          kt: ::std::os::raw::c_long,
                                          kr: ::std::os::raw::c_long,
                                          kc: ::std::os::raw::c_long,
                                          st: ::std::os::raw::c_long,
                                          sr: ::std::os::raw::c_long,
                                          sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_validConv3Dptr(r_: *mut f64, alpha: f64,
                                         t_: *mut f64,
                                         it: ::std::os::raw::c_long,
                                         ir: ::std::os::raw::c_long,
                                         ic: ::std::os::raw::c_long,
                                         k_: *mut f64,
                                         kt: ::std::os::raw::c_long,
                                         kr: ::std::os::raw::c_long,
                                         kc: ::std::os::raw::c_long,
                                         st: ::std::os::raw::c_long,
                                         sr: ::std::os::raw::c_long,
                                         sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_fullXCorr3Dptr(r_: *mut f64, alpha: f64,
                                         t_: *mut f64,
                                         it: ::std::os::raw::c_long,
                                         ir: ::std::os::raw::c_long,
                                         ic: ::std::os::raw::c_long,
                                         k_: *mut f64,
                                         kt: ::std::os::raw::c_long,
                                         kr: ::std::os::raw::c_long,
                                         kc: ::std::os::raw::c_long,
                                         st: ::std::os::raw::c_long,
                                         sr: ::std::os::raw::c_long,
                                         sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_fullConv3Dptr(r_: *mut f64, alpha: f64,
                                        t_: *mut f64,
                                        it: ::std::os::raw::c_long,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut f64,
                                        kt: ::std::os::raw::c_long,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        st: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_validXCorr3DRevptr(r_: *mut f64, alpha: f64,
                                             t_: *mut f64,
                                             it: ::std::os::raw::c_long,
                                             ir: ::std::os::raw::c_long,
                                             ic: ::std::os::raw::c_long,
                                             k_: *mut f64,
                                             kt: ::std::os::raw::c_long,
                                             kr: ::std::os::raw::c_long,
                                             kc: ::std::os::raw::c_long,
                                             st: ::std::os::raw::c_long,
                                             sr: ::std::os::raw::c_long,
                                             sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_conv3DRevger(r_: *mut THDoubleTensor, beta: f64,
                                       alpha: f64, t_: *mut THDoubleTensor,
                                       k_: *mut THDoubleTensor,
                                       sdepth: ::std::os::raw::c_long,
                                       srow: ::std::os::raw::c_long,
                                       scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THDoubleTensor_conv3Dger(r_: *mut THDoubleTensor, beta: f64,
                                    alpha: f64, t_: *mut THDoubleTensor,
                                    k_: *mut THDoubleTensor,
                                    sdepth: ::std::os::raw::c_long,
                                    srow: ::std::os::raw::c_long,
                                    scol: ::std::os::raw::c_long,
                                    vf: *const ::std::os::raw::c_char,
                                    xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_conv3Dmv(r_: *mut THDoubleTensor, beta: f64,
                                   alpha: f64, t_: *mut THDoubleTensor,
                                   k_: *mut THDoubleTensor,
                                   sdepth: ::std::os::raw::c_long,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_conv3Dmul(r_: *mut THDoubleTensor, beta: f64,
                                    alpha: f64, t_: *mut THDoubleTensor,
                                    k_: *mut THDoubleTensor,
                                    sdepth: ::std::os::raw::c_long,
                                    srow: ::std::os::raw::c_long,
                                    scol: ::std::os::raw::c_long,
                                    vf: *const ::std::os::raw::c_char,
                                    xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_conv3Dcmul(r_: *mut THDoubleTensor, beta: f64,
                                     alpha: f64, t_: *mut THDoubleTensor,
                                     k_: *mut THDoubleTensor,
                                     sdepth: ::std::os::raw::c_long,
                                     srow: ::std::os::raw::c_long,
                                     scol: ::std::os::raw::c_long,
                                     vf: *const ::std::os::raw::c_char,
                                     xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_validXCorr2Dptr(r_: *mut ::std::os::raw::c_uchar,
                                        alpha: ::std::os::raw::c_uchar,
                                        t_: *mut ::std::os::raw::c_uchar,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut ::std::os::raw::c_uchar,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_validConv2Dptr(r_: *mut ::std::os::raw::c_uchar,
                                       alpha: ::std::os::raw::c_uchar,
                                       t_: *mut ::std::os::raw::c_uchar,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_uchar,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_fullXCorr2Dptr(r_: *mut ::std::os::raw::c_uchar,
                                       alpha: ::std::os::raw::c_uchar,
                                       t_: *mut ::std::os::raw::c_uchar,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_uchar,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_fullConv2Dptr(r_: *mut ::std::os::raw::c_uchar,
                                      alpha: ::std::os::raw::c_uchar,
                                      t_: *mut ::std::os::raw::c_uchar,
                                      ir: ::std::os::raw::c_long,
                                      ic: ::std::os::raw::c_long,
                                      k_: *mut ::std::os::raw::c_uchar,
                                      kr: ::std::os::raw::c_long,
                                      kc: ::std::os::raw::c_long,
                                      sr: ::std::os::raw::c_long,
                                      sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_validXCorr2DRevptr(r_: *mut ::std::os::raw::c_uchar,
                                           alpha: ::std::os::raw::c_uchar,
                                           t_: *mut ::std::os::raw::c_uchar,
                                           ir: ::std::os::raw::c_long,
                                           ic: ::std::os::raw::c_long,
                                           k_: *mut ::std::os::raw::c_uchar,
                                           kr: ::std::os::raw::c_long,
                                           kc: ::std::os::raw::c_long,
                                           sr: ::std::os::raw::c_long,
                                           sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_conv2DRevger(r_: *mut THByteTensor,
                                     beta: ::std::os::raw::c_uchar,
                                     alpha: ::std::os::raw::c_uchar,
                                     t_: *mut THByteTensor,
                                     k_: *mut THByteTensor,
                                     srow: ::std::os::raw::c_long,
                                     scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_conv2DRevgerm(r_: *mut THByteTensor,
                                      beta: ::std::os::raw::c_uchar,
                                      alpha: ::std::os::raw::c_uchar,
                                      t_: *mut THByteTensor,
                                      k_: *mut THByteTensor,
                                      srow: ::std::os::raw::c_long,
                                      scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_conv2Dger(r_: *mut THByteTensor,
                                  beta: ::std::os::raw::c_uchar,
                                  alpha: ::std::os::raw::c_uchar,
                                  t_: *mut THByteTensor,
                                  k_: *mut THByteTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_conv2Dmv(r_: *mut THByteTensor,
                                 beta: ::std::os::raw::c_uchar,
                                 alpha: ::std::os::raw::c_uchar,
                                 t_: *mut THByteTensor, k_: *mut THByteTensor,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_conv2Dmm(r_: *mut THByteTensor,
                                 beta: ::std::os::raw::c_uchar,
                                 alpha: ::std::os::raw::c_uchar,
                                 t_: *mut THByteTensor, k_: *mut THByteTensor,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_conv2Dmul(r_: *mut THByteTensor,
                                  beta: ::std::os::raw::c_uchar,
                                  alpha: ::std::os::raw::c_uchar,
                                  t_: *mut THByteTensor,
                                  k_: *mut THByteTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_conv2Dcmul(r_: *mut THByteTensor,
                                   beta: ::std::os::raw::c_uchar,
                                   alpha: ::std::os::raw::c_uchar,
                                   t_: *mut THByteTensor,
                                   k_: *mut THByteTensor,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_validXCorr3Dptr(r_: *mut ::std::os::raw::c_uchar,
                                        alpha: ::std::os::raw::c_uchar,
                                        t_: *mut ::std::os::raw::c_uchar,
                                        it: ::std::os::raw::c_long,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut ::std::os::raw::c_uchar,
                                        kt: ::std::os::raw::c_long,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        st: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_validConv3Dptr(r_: *mut ::std::os::raw::c_uchar,
                                       alpha: ::std::os::raw::c_uchar,
                                       t_: *mut ::std::os::raw::c_uchar,
                                       it: ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_uchar,
                                       kt: ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       st: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_fullXCorr3Dptr(r_: *mut ::std::os::raw::c_uchar,
                                       alpha: ::std::os::raw::c_uchar,
                                       t_: *mut ::std::os::raw::c_uchar,
                                       it: ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_uchar,
                                       kt: ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       st: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_fullConv3Dptr(r_: *mut ::std::os::raw::c_uchar,
                                      alpha: ::std::os::raw::c_uchar,
                                      t_: *mut ::std::os::raw::c_uchar,
                                      it: ::std::os::raw::c_long,
                                      ir: ::std::os::raw::c_long,
                                      ic: ::std::os::raw::c_long,
                                      k_: *mut ::std::os::raw::c_uchar,
                                      kt: ::std::os::raw::c_long,
                                      kr: ::std::os::raw::c_long,
                                      kc: ::std::os::raw::c_long,
                                      st: ::std::os::raw::c_long,
                                      sr: ::std::os::raw::c_long,
                                      sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_validXCorr3DRevptr(r_: *mut ::std::os::raw::c_uchar,
                                           alpha: ::std::os::raw::c_uchar,
                                           t_: *mut ::std::os::raw::c_uchar,
                                           it: ::std::os::raw::c_long,
                                           ir: ::std::os::raw::c_long,
                                           ic: ::std::os::raw::c_long,
                                           k_: *mut ::std::os::raw::c_uchar,
                                           kt: ::std::os::raw::c_long,
                                           kr: ::std::os::raw::c_long,
                                           kc: ::std::os::raw::c_long,
                                           st: ::std::os::raw::c_long,
                                           sr: ::std::os::raw::c_long,
                                           sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_conv3DRevger(r_: *mut THByteTensor,
                                     beta: ::std::os::raw::c_uchar,
                                     alpha: ::std::os::raw::c_uchar,
                                     t_: *mut THByteTensor,
                                     k_: *mut THByteTensor,
                                     sdepth: ::std::os::raw::c_long,
                                     srow: ::std::os::raw::c_long,
                                     scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THByteTensor_conv3Dger(r_: *mut THByteTensor,
                                  beta: ::std::os::raw::c_uchar,
                                  alpha: ::std::os::raw::c_uchar,
                                  t_: *mut THByteTensor,
                                  k_: *mut THByteTensor,
                                  sdepth: ::std::os::raw::c_long,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_conv3Dmv(r_: *mut THByteTensor,
                                 beta: ::std::os::raw::c_uchar,
                                 alpha: ::std::os::raw::c_uchar,
                                 t_: *mut THByteTensor, k_: *mut THByteTensor,
                                 sdepth: ::std::os::raw::c_long,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_conv3Dmul(r_: *mut THByteTensor,
                                  beta: ::std::os::raw::c_uchar,
                                  alpha: ::std::os::raw::c_uchar,
                                  t_: *mut THByteTensor,
                                  k_: *mut THByteTensor,
                                  sdepth: ::std::os::raw::c_long,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THByteTensor_conv3Dcmul(r_: *mut THByteTensor,
                                   beta: ::std::os::raw::c_uchar,
                                   alpha: ::std::os::raw::c_uchar,
                                   t_: *mut THByteTensor,
                                   k_: *mut THByteTensor,
                                   sdepth: ::std::os::raw::c_long,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_validXCorr2Dptr(r_: *mut ::std::os::raw::c_char,
                                        alpha: ::std::os::raw::c_char,
                                        t_: *mut ::std::os::raw::c_char,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut ::std::os::raw::c_char,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_validConv2Dptr(r_: *mut ::std::os::raw::c_char,
                                       alpha: ::std::os::raw::c_char,
                                       t_: *mut ::std::os::raw::c_char,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_char,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_fullXCorr2Dptr(r_: *mut ::std::os::raw::c_char,
                                       alpha: ::std::os::raw::c_char,
                                       t_: *mut ::std::os::raw::c_char,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_char,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_fullConv2Dptr(r_: *mut ::std::os::raw::c_char,
                                      alpha: ::std::os::raw::c_char,
                                      t_: *mut ::std::os::raw::c_char,
                                      ir: ::std::os::raw::c_long,
                                      ic: ::std::os::raw::c_long,
                                      k_: *mut ::std::os::raw::c_char,
                                      kr: ::std::os::raw::c_long,
                                      kc: ::std::os::raw::c_long,
                                      sr: ::std::os::raw::c_long,
                                      sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_validXCorr2DRevptr(r_: *mut ::std::os::raw::c_char,
                                           alpha: ::std::os::raw::c_char,
                                           t_: *mut ::std::os::raw::c_char,
                                           ir: ::std::os::raw::c_long,
                                           ic: ::std::os::raw::c_long,
                                           k_: *mut ::std::os::raw::c_char,
                                           kr: ::std::os::raw::c_long,
                                           kc: ::std::os::raw::c_long,
                                           sr: ::std::os::raw::c_long,
                                           sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_conv2DRevger(r_: *mut THCharTensor,
                                     beta: ::std::os::raw::c_char,
                                     alpha: ::std::os::raw::c_char,
                                     t_: *mut THCharTensor,
                                     k_: *mut THCharTensor,
                                     srow: ::std::os::raw::c_long,
                                     scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_conv2DRevgerm(r_: *mut THCharTensor,
                                      beta: ::std::os::raw::c_char,
                                      alpha: ::std::os::raw::c_char,
                                      t_: *mut THCharTensor,
                                      k_: *mut THCharTensor,
                                      srow: ::std::os::raw::c_long,
                                      scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_conv2Dger(r_: *mut THCharTensor,
                                  beta: ::std::os::raw::c_char,
                                  alpha: ::std::os::raw::c_char,
                                  t_: *mut THCharTensor,
                                  k_: *mut THCharTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_conv2Dmv(r_: *mut THCharTensor,
                                 beta: ::std::os::raw::c_char,
                                 alpha: ::std::os::raw::c_char,
                                 t_: *mut THCharTensor, k_: *mut THCharTensor,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_conv2Dmm(r_: *mut THCharTensor,
                                 beta: ::std::os::raw::c_char,
                                 alpha: ::std::os::raw::c_char,
                                 t_: *mut THCharTensor, k_: *mut THCharTensor,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_conv2Dmul(r_: *mut THCharTensor,
                                  beta: ::std::os::raw::c_char,
                                  alpha: ::std::os::raw::c_char,
                                  t_: *mut THCharTensor,
                                  k_: *mut THCharTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_conv2Dcmul(r_: *mut THCharTensor,
                                   beta: ::std::os::raw::c_char,
                                   alpha: ::std::os::raw::c_char,
                                   t_: *mut THCharTensor,
                                   k_: *mut THCharTensor,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_validXCorr3Dptr(r_: *mut ::std::os::raw::c_char,
                                        alpha: ::std::os::raw::c_char,
                                        t_: *mut ::std::os::raw::c_char,
                                        it: ::std::os::raw::c_long,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut ::std::os::raw::c_char,
                                        kt: ::std::os::raw::c_long,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        st: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_validConv3Dptr(r_: *mut ::std::os::raw::c_char,
                                       alpha: ::std::os::raw::c_char,
                                       t_: *mut ::std::os::raw::c_char,
                                       it: ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_char,
                                       kt: ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       st: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_fullXCorr3Dptr(r_: *mut ::std::os::raw::c_char,
                                       alpha: ::std::os::raw::c_char,
                                       t_: *mut ::std::os::raw::c_char,
                                       it: ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_char,
                                       kt: ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       st: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_fullConv3Dptr(r_: *mut ::std::os::raw::c_char,
                                      alpha: ::std::os::raw::c_char,
                                      t_: *mut ::std::os::raw::c_char,
                                      it: ::std::os::raw::c_long,
                                      ir: ::std::os::raw::c_long,
                                      ic: ::std::os::raw::c_long,
                                      k_: *mut ::std::os::raw::c_char,
                                      kt: ::std::os::raw::c_long,
                                      kr: ::std::os::raw::c_long,
                                      kc: ::std::os::raw::c_long,
                                      st: ::std::os::raw::c_long,
                                      sr: ::std::os::raw::c_long,
                                      sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_validXCorr3DRevptr(r_: *mut ::std::os::raw::c_char,
                                           alpha: ::std::os::raw::c_char,
                                           t_: *mut ::std::os::raw::c_char,
                                           it: ::std::os::raw::c_long,
                                           ir: ::std::os::raw::c_long,
                                           ic: ::std::os::raw::c_long,
                                           k_: *mut ::std::os::raw::c_char,
                                           kt: ::std::os::raw::c_long,
                                           kr: ::std::os::raw::c_long,
                                           kc: ::std::os::raw::c_long,
                                           st: ::std::os::raw::c_long,
                                           sr: ::std::os::raw::c_long,
                                           sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_conv3DRevger(r_: *mut THCharTensor,
                                     beta: ::std::os::raw::c_char,
                                     alpha: ::std::os::raw::c_char,
                                     t_: *mut THCharTensor,
                                     k_: *mut THCharTensor,
                                     sdepth: ::std::os::raw::c_long,
                                     srow: ::std::os::raw::c_long,
                                     scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THCharTensor_conv3Dger(r_: *mut THCharTensor,
                                  beta: ::std::os::raw::c_char,
                                  alpha: ::std::os::raw::c_char,
                                  t_: *mut THCharTensor,
                                  k_: *mut THCharTensor,
                                  sdepth: ::std::os::raw::c_long,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_conv3Dmv(r_: *mut THCharTensor,
                                 beta: ::std::os::raw::c_char,
                                 alpha: ::std::os::raw::c_char,
                                 t_: *mut THCharTensor, k_: *mut THCharTensor,
                                 sdepth: ::std::os::raw::c_long,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_conv3Dmul(r_: *mut THCharTensor,
                                  beta: ::std::os::raw::c_char,
                                  alpha: ::std::os::raw::c_char,
                                  t_: *mut THCharTensor,
                                  k_: *mut THCharTensor,
                                  sdepth: ::std::os::raw::c_long,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THCharTensor_conv3Dcmul(r_: *mut THCharTensor,
                                   beta: ::std::os::raw::c_char,
                                   alpha: ::std::os::raw::c_char,
                                   t_: *mut THCharTensor,
                                   k_: *mut THCharTensor,
                                   sdepth: ::std::os::raw::c_long,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_validXCorr2Dptr(r_: *mut ::std::os::raw::c_short,
                                         alpha: ::std::os::raw::c_short,
                                         t_: *mut ::std::os::raw::c_short,
                                         ir: ::std::os::raw::c_long,
                                         ic: ::std::os::raw::c_long,
                                         k_: *mut ::std::os::raw::c_short,
                                         kr: ::std::os::raw::c_long,
                                         kc: ::std::os::raw::c_long,
                                         sr: ::std::os::raw::c_long,
                                         sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_validConv2Dptr(r_: *mut ::std::os::raw::c_short,
                                        alpha: ::std::os::raw::c_short,
                                        t_: *mut ::std::os::raw::c_short,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut ::std::os::raw::c_short,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_fullXCorr2Dptr(r_: *mut ::std::os::raw::c_short,
                                        alpha: ::std::os::raw::c_short,
                                        t_: *mut ::std::os::raw::c_short,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut ::std::os::raw::c_short,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_fullConv2Dptr(r_: *mut ::std::os::raw::c_short,
                                       alpha: ::std::os::raw::c_short,
                                       t_: *mut ::std::os::raw::c_short,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_short,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_validXCorr2DRevptr(r_: *mut ::std::os::raw::c_short,
                                            alpha: ::std::os::raw::c_short,
                                            t_: *mut ::std::os::raw::c_short,
                                            ir: ::std::os::raw::c_long,
                                            ic: ::std::os::raw::c_long,
                                            k_: *mut ::std::os::raw::c_short,
                                            kr: ::std::os::raw::c_long,
                                            kc: ::std::os::raw::c_long,
                                            sr: ::std::os::raw::c_long,
                                            sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_conv2DRevger(r_: *mut THShortTensor,
                                      beta: ::std::os::raw::c_short,
                                      alpha: ::std::os::raw::c_short,
                                      t_: *mut THShortTensor,
                                      k_: *mut THShortTensor,
                                      srow: ::std::os::raw::c_long,
                                      scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_conv2DRevgerm(r_: *mut THShortTensor,
                                       beta: ::std::os::raw::c_short,
                                       alpha: ::std::os::raw::c_short,
                                       t_: *mut THShortTensor,
                                       k_: *mut THShortTensor,
                                       srow: ::std::os::raw::c_long,
                                       scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_conv2Dger(r_: *mut THShortTensor,
                                   beta: ::std::os::raw::c_short,
                                   alpha: ::std::os::raw::c_short,
                                   t_: *mut THShortTensor,
                                   k_: *mut THShortTensor,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_conv2Dmv(r_: *mut THShortTensor,
                                  beta: ::std::os::raw::c_short,
                                  alpha: ::std::os::raw::c_short,
                                  t_: *mut THShortTensor,
                                  k_: *mut THShortTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_conv2Dmm(r_: *mut THShortTensor,
                                  beta: ::std::os::raw::c_short,
                                  alpha: ::std::os::raw::c_short,
                                  t_: *mut THShortTensor,
                                  k_: *mut THShortTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_conv2Dmul(r_: *mut THShortTensor,
                                   beta: ::std::os::raw::c_short,
                                   alpha: ::std::os::raw::c_short,
                                   t_: *mut THShortTensor,
                                   k_: *mut THShortTensor,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_conv2Dcmul(r_: *mut THShortTensor,
                                    beta: ::std::os::raw::c_short,
                                    alpha: ::std::os::raw::c_short,
                                    t_: *mut THShortTensor,
                                    k_: *mut THShortTensor,
                                    srow: ::std::os::raw::c_long,
                                    scol: ::std::os::raw::c_long,
                                    vf: *const ::std::os::raw::c_char,
                                    xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_validXCorr3Dptr(r_: *mut ::std::os::raw::c_short,
                                         alpha: ::std::os::raw::c_short,
                                         t_: *mut ::std::os::raw::c_short,
                                         it: ::std::os::raw::c_long,
                                         ir: ::std::os::raw::c_long,
                                         ic: ::std::os::raw::c_long,
                                         k_: *mut ::std::os::raw::c_short,
                                         kt: ::std::os::raw::c_long,
                                         kr: ::std::os::raw::c_long,
                                         kc: ::std::os::raw::c_long,
                                         st: ::std::os::raw::c_long,
                                         sr: ::std::os::raw::c_long,
                                         sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_validConv3Dptr(r_: *mut ::std::os::raw::c_short,
                                        alpha: ::std::os::raw::c_short,
                                        t_: *mut ::std::os::raw::c_short,
                                        it: ::std::os::raw::c_long,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut ::std::os::raw::c_short,
                                        kt: ::std::os::raw::c_long,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        st: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_fullXCorr3Dptr(r_: *mut ::std::os::raw::c_short,
                                        alpha: ::std::os::raw::c_short,
                                        t_: *mut ::std::os::raw::c_short,
                                        it: ::std::os::raw::c_long,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut ::std::os::raw::c_short,
                                        kt: ::std::os::raw::c_long,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        st: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_fullConv3Dptr(r_: *mut ::std::os::raw::c_short,
                                       alpha: ::std::os::raw::c_short,
                                       t_: *mut ::std::os::raw::c_short,
                                       it: ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_short,
                                       kt: ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       st: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_validXCorr3DRevptr(r_: *mut ::std::os::raw::c_short,
                                            alpha: ::std::os::raw::c_short,
                                            t_: *mut ::std::os::raw::c_short,
                                            it: ::std::os::raw::c_long,
                                            ir: ::std::os::raw::c_long,
                                            ic: ::std::os::raw::c_long,
                                            k_: *mut ::std::os::raw::c_short,
                                            kt: ::std::os::raw::c_long,
                                            kr: ::std::os::raw::c_long,
                                            kc: ::std::os::raw::c_long,
                                            st: ::std::os::raw::c_long,
                                            sr: ::std::os::raw::c_long,
                                            sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_conv3DRevger(r_: *mut THShortTensor,
                                      beta: ::std::os::raw::c_short,
                                      alpha: ::std::os::raw::c_short,
                                      t_: *mut THShortTensor,
                                      k_: *mut THShortTensor,
                                      sdepth: ::std::os::raw::c_long,
                                      srow: ::std::os::raw::c_long,
                                      scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THShortTensor_conv3Dger(r_: *mut THShortTensor,
                                   beta: ::std::os::raw::c_short,
                                   alpha: ::std::os::raw::c_short,
                                   t_: *mut THShortTensor,
                                   k_: *mut THShortTensor,
                                   sdepth: ::std::os::raw::c_long,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_conv3Dmv(r_: *mut THShortTensor,
                                  beta: ::std::os::raw::c_short,
                                  alpha: ::std::os::raw::c_short,
                                  t_: *mut THShortTensor,
                                  k_: *mut THShortTensor,
                                  sdepth: ::std::os::raw::c_long,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_conv3Dmul(r_: *mut THShortTensor,
                                   beta: ::std::os::raw::c_short,
                                   alpha: ::std::os::raw::c_short,
                                   t_: *mut THShortTensor,
                                   k_: *mut THShortTensor,
                                   sdepth: ::std::os::raw::c_long,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THShortTensor_conv3Dcmul(r_: *mut THShortTensor,
                                    beta: ::std::os::raw::c_short,
                                    alpha: ::std::os::raw::c_short,
                                    t_: *mut THShortTensor,
                                    k_: *mut THShortTensor,
                                    sdepth: ::std::os::raw::c_long,
                                    srow: ::std::os::raw::c_long,
                                    scol: ::std::os::raw::c_long,
                                    vf: *const ::std::os::raw::c_char,
                                    xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_validXCorr2Dptr(r_: *mut ::std::os::raw::c_int,
                                       alpha: ::std::os::raw::c_int,
                                       t_: *mut ::std::os::raw::c_int,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_int,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_validConv2Dptr(r_: *mut ::std::os::raw::c_int,
                                      alpha: ::std::os::raw::c_int,
                                      t_: *mut ::std::os::raw::c_int,
                                      ir: ::std::os::raw::c_long,
                                      ic: ::std::os::raw::c_long,
                                      k_: *mut ::std::os::raw::c_int,
                                      kr: ::std::os::raw::c_long,
                                      kc: ::std::os::raw::c_long,
                                      sr: ::std::os::raw::c_long,
                                      sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_fullXCorr2Dptr(r_: *mut ::std::os::raw::c_int,
                                      alpha: ::std::os::raw::c_int,
                                      t_: *mut ::std::os::raw::c_int,
                                      ir: ::std::os::raw::c_long,
                                      ic: ::std::os::raw::c_long,
                                      k_: *mut ::std::os::raw::c_int,
                                      kr: ::std::os::raw::c_long,
                                      kc: ::std::os::raw::c_long,
                                      sr: ::std::os::raw::c_long,
                                      sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_fullConv2Dptr(r_: *mut ::std::os::raw::c_int,
                                     alpha: ::std::os::raw::c_int,
                                     t_: *mut ::std::os::raw::c_int,
                                     ir: ::std::os::raw::c_long,
                                     ic: ::std::os::raw::c_long,
                                     k_: *mut ::std::os::raw::c_int,
                                     kr: ::std::os::raw::c_long,
                                     kc: ::std::os::raw::c_long,
                                     sr: ::std::os::raw::c_long,
                                     sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_validXCorr2DRevptr(r_: *mut ::std::os::raw::c_int,
                                          alpha: ::std::os::raw::c_int,
                                          t_: *mut ::std::os::raw::c_int,
                                          ir: ::std::os::raw::c_long,
                                          ic: ::std::os::raw::c_long,
                                          k_: *mut ::std::os::raw::c_int,
                                          kr: ::std::os::raw::c_long,
                                          kc: ::std::os::raw::c_long,
                                          sr: ::std::os::raw::c_long,
                                          sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_conv2DRevger(r_: *mut THIntTensor,
                                    beta: ::std::os::raw::c_int,
                                    alpha: ::std::os::raw::c_int,
                                    t_: *mut THIntTensor,
                                    k_: *mut THIntTensor,
                                    srow: ::std::os::raw::c_long,
                                    scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_conv2DRevgerm(r_: *mut THIntTensor,
                                     beta: ::std::os::raw::c_int,
                                     alpha: ::std::os::raw::c_int,
                                     t_: *mut THIntTensor,
                                     k_: *mut THIntTensor,
                                     srow: ::std::os::raw::c_long,
                                     scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_conv2Dger(r_: *mut THIntTensor,
                                 beta: ::std::os::raw::c_int,
                                 alpha: ::std::os::raw::c_int,
                                 t_: *mut THIntTensor, k_: *mut THIntTensor,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_conv2Dmv(r_: *mut THIntTensor,
                                beta: ::std::os::raw::c_int,
                                alpha: ::std::os::raw::c_int,
                                t_: *mut THIntTensor, k_: *mut THIntTensor,
                                srow: ::std::os::raw::c_long,
                                scol: ::std::os::raw::c_long,
                                vf: *const ::std::os::raw::c_char,
                                xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_conv2Dmm(r_: *mut THIntTensor,
                                beta: ::std::os::raw::c_int,
                                alpha: ::std::os::raw::c_int,
                                t_: *mut THIntTensor, k_: *mut THIntTensor,
                                srow: ::std::os::raw::c_long,
                                scol: ::std::os::raw::c_long,
                                vf: *const ::std::os::raw::c_char,
                                xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_conv2Dmul(r_: *mut THIntTensor,
                                 beta: ::std::os::raw::c_int,
                                 alpha: ::std::os::raw::c_int,
                                 t_: *mut THIntTensor, k_: *mut THIntTensor,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_conv2Dcmul(r_: *mut THIntTensor,
                                  beta: ::std::os::raw::c_int,
                                  alpha: ::std::os::raw::c_int,
                                  t_: *mut THIntTensor, k_: *mut THIntTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_validXCorr3Dptr(r_: *mut ::std::os::raw::c_int,
                                       alpha: ::std::os::raw::c_int,
                                       t_: *mut ::std::os::raw::c_int,
                                       it: ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_int,
                                       kt: ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       st: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_validConv3Dptr(r_: *mut ::std::os::raw::c_int,
                                      alpha: ::std::os::raw::c_int,
                                      t_: *mut ::std::os::raw::c_int,
                                      it: ::std::os::raw::c_long,
                                      ir: ::std::os::raw::c_long,
                                      ic: ::std::os::raw::c_long,
                                      k_: *mut ::std::os::raw::c_int,
                                      kt: ::std::os::raw::c_long,
                                      kr: ::std::os::raw::c_long,
                                      kc: ::std::os::raw::c_long,
                                      st: ::std::os::raw::c_long,
                                      sr: ::std::os::raw::c_long,
                                      sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_fullXCorr3Dptr(r_: *mut ::std::os::raw::c_int,
                                      alpha: ::std::os::raw::c_int,
                                      t_: *mut ::std::os::raw::c_int,
                                      it: ::std::os::raw::c_long,
                                      ir: ::std::os::raw::c_long,
                                      ic: ::std::os::raw::c_long,
                                      k_: *mut ::std::os::raw::c_int,
                                      kt: ::std::os::raw::c_long,
                                      kr: ::std::os::raw::c_long,
                                      kc: ::std::os::raw::c_long,
                                      st: ::std::os::raw::c_long,
                                      sr: ::std::os::raw::c_long,
                                      sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_fullConv3Dptr(r_: *mut ::std::os::raw::c_int,
                                     alpha: ::std::os::raw::c_int,
                                     t_: *mut ::std::os::raw::c_int,
                                     it: ::std::os::raw::c_long,
                                     ir: ::std::os::raw::c_long,
                                     ic: ::std::os::raw::c_long,
                                     k_: *mut ::std::os::raw::c_int,
                                     kt: ::std::os::raw::c_long,
                                     kr: ::std::os::raw::c_long,
                                     kc: ::std::os::raw::c_long,
                                     st: ::std::os::raw::c_long,
                                     sr: ::std::os::raw::c_long,
                                     sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_validXCorr3DRevptr(r_: *mut ::std::os::raw::c_int,
                                          alpha: ::std::os::raw::c_int,
                                          t_: *mut ::std::os::raw::c_int,
                                          it: ::std::os::raw::c_long,
                                          ir: ::std::os::raw::c_long,
                                          ic: ::std::os::raw::c_long,
                                          k_: *mut ::std::os::raw::c_int,
                                          kt: ::std::os::raw::c_long,
                                          kr: ::std::os::raw::c_long,
                                          kc: ::std::os::raw::c_long,
                                          st: ::std::os::raw::c_long,
                                          sr: ::std::os::raw::c_long,
                                          sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_conv3DRevger(r_: *mut THIntTensor,
                                    beta: ::std::os::raw::c_int,
                                    alpha: ::std::os::raw::c_int,
                                    t_: *mut THIntTensor,
                                    k_: *mut THIntTensor,
                                    sdepth: ::std::os::raw::c_long,
                                    srow: ::std::os::raw::c_long,
                                    scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THIntTensor_conv3Dger(r_: *mut THIntTensor,
                                 beta: ::std::os::raw::c_int,
                                 alpha: ::std::os::raw::c_int,
                                 t_: *mut THIntTensor, k_: *mut THIntTensor,
                                 sdepth: ::std::os::raw::c_long,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_conv3Dmv(r_: *mut THIntTensor,
                                beta: ::std::os::raw::c_int,
                                alpha: ::std::os::raw::c_int,
                                t_: *mut THIntTensor, k_: *mut THIntTensor,
                                sdepth: ::std::os::raw::c_long,
                                srow: ::std::os::raw::c_long,
                                scol: ::std::os::raw::c_long,
                                vf: *const ::std::os::raw::c_char,
                                xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_conv3Dmul(r_: *mut THIntTensor,
                                 beta: ::std::os::raw::c_int,
                                 alpha: ::std::os::raw::c_int,
                                 t_: *mut THIntTensor, k_: *mut THIntTensor,
                                 sdepth: ::std::os::raw::c_long,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THIntTensor_conv3Dcmul(r_: *mut THIntTensor,
                                  beta: ::std::os::raw::c_int,
                                  alpha: ::std::os::raw::c_int,
                                  t_: *mut THIntTensor, k_: *mut THIntTensor,
                                  sdepth: ::std::os::raw::c_long,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_validXCorr2Dptr(r_: *mut ::std::os::raw::c_long,
                                        alpha: ::std::os::raw::c_long,
                                        t_: *mut ::std::os::raw::c_long,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut ::std::os::raw::c_long,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_validConv2Dptr(r_: *mut ::std::os::raw::c_long,
                                       alpha: ::std::os::raw::c_long,
                                       t_: *mut ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_fullXCorr2Dptr(r_: *mut ::std::os::raw::c_long,
                                       alpha: ::std::os::raw::c_long,
                                       t_: *mut ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_fullConv2Dptr(r_: *mut ::std::os::raw::c_long,
                                      alpha: ::std::os::raw::c_long,
                                      t_: *mut ::std::os::raw::c_long,
                                      ir: ::std::os::raw::c_long,
                                      ic: ::std::os::raw::c_long,
                                      k_: *mut ::std::os::raw::c_long,
                                      kr: ::std::os::raw::c_long,
                                      kc: ::std::os::raw::c_long,
                                      sr: ::std::os::raw::c_long,
                                      sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_validXCorr2DRevptr(r_: *mut ::std::os::raw::c_long,
                                           alpha: ::std::os::raw::c_long,
                                           t_: *mut ::std::os::raw::c_long,
                                           ir: ::std::os::raw::c_long,
                                           ic: ::std::os::raw::c_long,
                                           k_: *mut ::std::os::raw::c_long,
                                           kr: ::std::os::raw::c_long,
                                           kc: ::std::os::raw::c_long,
                                           sr: ::std::os::raw::c_long,
                                           sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_conv2DRevger(r_: *mut THLongTensor,
                                     beta: ::std::os::raw::c_long,
                                     alpha: ::std::os::raw::c_long,
                                     t_: *mut THLongTensor,
                                     k_: *mut THLongTensor,
                                     srow: ::std::os::raw::c_long,
                                     scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_conv2DRevgerm(r_: *mut THLongTensor,
                                      beta: ::std::os::raw::c_long,
                                      alpha: ::std::os::raw::c_long,
                                      t_: *mut THLongTensor,
                                      k_: *mut THLongTensor,
                                      srow: ::std::os::raw::c_long,
                                      scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_conv2Dger(r_: *mut THLongTensor,
                                  beta: ::std::os::raw::c_long,
                                  alpha: ::std::os::raw::c_long,
                                  t_: *mut THLongTensor,
                                  k_: *mut THLongTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_conv2Dmv(r_: *mut THLongTensor,
                                 beta: ::std::os::raw::c_long,
                                 alpha: ::std::os::raw::c_long,
                                 t_: *mut THLongTensor, k_: *mut THLongTensor,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_conv2Dmm(r_: *mut THLongTensor,
                                 beta: ::std::os::raw::c_long,
                                 alpha: ::std::os::raw::c_long,
                                 t_: *mut THLongTensor, k_: *mut THLongTensor,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_conv2Dmul(r_: *mut THLongTensor,
                                  beta: ::std::os::raw::c_long,
                                  alpha: ::std::os::raw::c_long,
                                  t_: *mut THLongTensor,
                                  k_: *mut THLongTensor,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_conv2Dcmul(r_: *mut THLongTensor,
                                   beta: ::std::os::raw::c_long,
                                   alpha: ::std::os::raw::c_long,
                                   t_: *mut THLongTensor,
                                   k_: *mut THLongTensor,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_validXCorr3Dptr(r_: *mut ::std::os::raw::c_long,
                                        alpha: ::std::os::raw::c_long,
                                        t_: *mut ::std::os::raw::c_long,
                                        it: ::std::os::raw::c_long,
                                        ir: ::std::os::raw::c_long,
                                        ic: ::std::os::raw::c_long,
                                        k_: *mut ::std::os::raw::c_long,
                                        kt: ::std::os::raw::c_long,
                                        kr: ::std::os::raw::c_long,
                                        kc: ::std::os::raw::c_long,
                                        st: ::std::os::raw::c_long,
                                        sr: ::std::os::raw::c_long,
                                        sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_validConv3Dptr(r_: *mut ::std::os::raw::c_long,
                                       alpha: ::std::os::raw::c_long,
                                       t_: *mut ::std::os::raw::c_long,
                                       it: ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_long,
                                       kt: ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       st: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_fullXCorr3Dptr(r_: *mut ::std::os::raw::c_long,
                                       alpha: ::std::os::raw::c_long,
                                       t_: *mut ::std::os::raw::c_long,
                                       it: ::std::os::raw::c_long,
                                       ir: ::std::os::raw::c_long,
                                       ic: ::std::os::raw::c_long,
                                       k_: *mut ::std::os::raw::c_long,
                                       kt: ::std::os::raw::c_long,
                                       kr: ::std::os::raw::c_long,
                                       kc: ::std::os::raw::c_long,
                                       st: ::std::os::raw::c_long,
                                       sr: ::std::os::raw::c_long,
                                       sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_fullConv3Dptr(r_: *mut ::std::os::raw::c_long,
                                      alpha: ::std::os::raw::c_long,
                                      t_: *mut ::std::os::raw::c_long,
                                      it: ::std::os::raw::c_long,
                                      ir: ::std::os::raw::c_long,
                                      ic: ::std::os::raw::c_long,
                                      k_: *mut ::std::os::raw::c_long,
                                      kt: ::std::os::raw::c_long,
                                      kr: ::std::os::raw::c_long,
                                      kc: ::std::os::raw::c_long,
                                      st: ::std::os::raw::c_long,
                                      sr: ::std::os::raw::c_long,
                                      sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_validXCorr3DRevptr(r_: *mut ::std::os::raw::c_long,
                                           alpha: ::std::os::raw::c_long,
                                           t_: *mut ::std::os::raw::c_long,
                                           it: ::std::os::raw::c_long,
                                           ir: ::std::os::raw::c_long,
                                           ic: ::std::os::raw::c_long,
                                           k_: *mut ::std::os::raw::c_long,
                                           kt: ::std::os::raw::c_long,
                                           kr: ::std::os::raw::c_long,
                                           kc: ::std::os::raw::c_long,
                                           st: ::std::os::raw::c_long,
                                           sr: ::std::os::raw::c_long,
                                           sc: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_conv3DRevger(r_: *mut THLongTensor,
                                     beta: ::std::os::raw::c_long,
                                     alpha: ::std::os::raw::c_long,
                                     t_: *mut THLongTensor,
                                     k_: *mut THLongTensor,
                                     sdepth: ::std::os::raw::c_long,
                                     srow: ::std::os::raw::c_long,
                                     scol: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THLongTensor_conv3Dger(r_: *mut THLongTensor,
                                  beta: ::std::os::raw::c_long,
                                  alpha: ::std::os::raw::c_long,
                                  t_: *mut THLongTensor,
                                  k_: *mut THLongTensor,
                                  sdepth: ::std::os::raw::c_long,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_conv3Dmv(r_: *mut THLongTensor,
                                 beta: ::std::os::raw::c_long,
                                 alpha: ::std::os::raw::c_long,
                                 t_: *mut THLongTensor, k_: *mut THLongTensor,
                                 sdepth: ::std::os::raw::c_long,
                                 srow: ::std::os::raw::c_long,
                                 scol: ::std::os::raw::c_long,
                                 vf: *const ::std::os::raw::c_char,
                                 xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_conv3Dmul(r_: *mut THLongTensor,
                                  beta: ::std::os::raw::c_long,
                                  alpha: ::std::os::raw::c_long,
                                  t_: *mut THLongTensor,
                                  k_: *mut THLongTensor,
                                  sdepth: ::std::os::raw::c_long,
                                  srow: ::std::os::raw::c_long,
                                  scol: ::std::os::raw::c_long,
                                  vf: *const ::std::os::raw::c_char,
                                  xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THLongTensor_conv3Dcmul(r_: *mut THLongTensor,
                                   beta: ::std::os::raw::c_long,
                                   alpha: ::std::os::raw::c_long,
                                   t_: *mut THLongTensor,
                                   k_: *mut THLongTensor,
                                   sdepth: ::std::os::raw::c_long,
                                   srow: ::std::os::raw::c_long,
                                   scol: ::std::os::raw::c_long,
                                   vf: *const ::std::os::raw::c_char,
                                   xc: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_gesv(rb_: *mut THFloatTensor,
                              ra_: *mut THFloatTensor, b_: *mut THFloatTensor,
                              a_: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_trtrs(rb_: *mut THFloatTensor,
                               ra_: *mut THFloatTensor,
                               b_: *mut THFloatTensor, a_: *mut THFloatTensor,
                               uplo: *const ::std::os::raw::c_char,
                               trans: *const ::std::os::raw::c_char,
                               diag: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_gels(rb_: *mut THFloatTensor,
                              ra_: *mut THFloatTensor, b_: *mut THFloatTensor,
                              a_: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_syev(re_: *mut THFloatTensor,
                              rv_: *mut THFloatTensor, a_: *mut THFloatTensor,
                              jobz: *const ::std::os::raw::c_char,
                              uplo: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_geev(re_: *mut THFloatTensor,
                              rv_: *mut THFloatTensor, a_: *mut THFloatTensor,
                              jobvr: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_gesvd(ru_: *mut THFloatTensor,
                               rs_: *mut THFloatTensor,
                               rv_: *mut THFloatTensor, a: *mut THFloatTensor,
                               jobu: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_gesvd2(ru_: *mut THFloatTensor,
                                rs_: *mut THFloatTensor,
                                rv_: *mut THFloatTensor,
                                ra_: *mut THFloatTensor,
                                a: *mut THFloatTensor,
                                jobu: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_getri(ra_: *mut THFloatTensor,
                               a: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_potrf(ra_: *mut THFloatTensor, a: *mut THFloatTensor,
                               uplo: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_potrs(rb_: *mut THFloatTensor,
                               b_: *mut THFloatTensor, a_: *mut THFloatTensor,
                               uplo: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_potri(ra_: *mut THFloatTensor, a: *mut THFloatTensor,
                               uplo: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_qr(rq_: *mut THFloatTensor, rr_: *mut THFloatTensor,
                            a: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_geqrf(ra_: *mut THFloatTensor,
                               rtau_: *mut THFloatTensor,
                               a: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_orgqr(ra_: *mut THFloatTensor, a: *mut THFloatTensor,
                               tau: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_ormqr(ra_: *mut THFloatTensor, a: *mut THFloatTensor,
                               tau: *mut THFloatTensor, c: *mut THFloatTensor,
                               side: *const ::std::os::raw::c_char,
                               trans: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFloatTensor_pstrf(ra_: *mut THFloatTensor,
                               rpiv_: *mut THIntTensor, a: *mut THFloatTensor,
                               uplo: *const ::std::os::raw::c_char, tol: f32);
}
extern "C" {
    pub fn THFloatTensor_btrifact(ra_: *mut THFloatTensor,
                                  rpivots_: *mut THIntTensor,
                                  rinfo_: *mut THIntTensor,
                                  pivot: ::std::os::raw::c_int,
                                  a: *mut THFloatTensor);
}
extern "C" {
    pub fn THFloatTensor_btrisolve(rb_: *mut THFloatTensor,
                                   b: *mut THFloatTensor,
                                   atf: *mut THFloatTensor,
                                   pivots: *mut THIntTensor);
}
extern "C" {
    pub fn THDoubleTensor_gesv(rb_: *mut THDoubleTensor,
                               ra_: *mut THDoubleTensor,
                               b_: *mut THDoubleTensor,
                               a_: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_trtrs(rb_: *mut THDoubleTensor,
                                ra_: *mut THDoubleTensor,
                                b_: *mut THDoubleTensor,
                                a_: *mut THDoubleTensor,
                                uplo: *const ::std::os::raw::c_char,
                                trans: *const ::std::os::raw::c_char,
                                diag: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_gels(rb_: *mut THDoubleTensor,
                               ra_: *mut THDoubleTensor,
                               b_: *mut THDoubleTensor,
                               a_: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_syev(re_: *mut THDoubleTensor,
                               rv_: *mut THDoubleTensor,
                               a_: *mut THDoubleTensor,
                               jobz: *const ::std::os::raw::c_char,
                               uplo: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_geev(re_: *mut THDoubleTensor,
                               rv_: *mut THDoubleTensor,
                               a_: *mut THDoubleTensor,
                               jobvr: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_gesvd(ru_: *mut THDoubleTensor,
                                rs_: *mut THDoubleTensor,
                                rv_: *mut THDoubleTensor,
                                a: *mut THDoubleTensor,
                                jobu: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_gesvd2(ru_: *mut THDoubleTensor,
                                 rs_: *mut THDoubleTensor,
                                 rv_: *mut THDoubleTensor,
                                 ra_: *mut THDoubleTensor,
                                 a: *mut THDoubleTensor,
                                 jobu: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_getri(ra_: *mut THDoubleTensor,
                                a: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_potrf(ra_: *mut THDoubleTensor,
                                a: *mut THDoubleTensor,
                                uplo: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_potrs(rb_: *mut THDoubleTensor,
                                b_: *mut THDoubleTensor,
                                a_: *mut THDoubleTensor,
                                uplo: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_potri(ra_: *mut THDoubleTensor,
                                a: *mut THDoubleTensor,
                                uplo: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_qr(rq_: *mut THDoubleTensor,
                             rr_: *mut THDoubleTensor,
                             a: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_geqrf(ra_: *mut THDoubleTensor,
                                rtau_: *mut THDoubleTensor,
                                a: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_orgqr(ra_: *mut THDoubleTensor,
                                a: *mut THDoubleTensor,
                                tau: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_ormqr(ra_: *mut THDoubleTensor,
                                a: *mut THDoubleTensor,
                                tau: *mut THDoubleTensor,
                                c: *mut THDoubleTensor,
                                side: *const ::std::os::raw::c_char,
                                trans: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn THDoubleTensor_pstrf(ra_: *mut THDoubleTensor,
                                rpiv_: *mut THIntTensor,
                                a: *mut THDoubleTensor,
                                uplo: *const ::std::os::raw::c_char,
                                tol: f64);
}
extern "C" {
    pub fn THDoubleTensor_btrifact(ra_: *mut THDoubleTensor,
                                   rpivots_: *mut THIntTensor,
                                   rinfo_: *mut THIntTensor,
                                   pivot: ::std::os::raw::c_int,
                                   a: *mut THDoubleTensor);
}
extern "C" {
    pub fn THDoubleTensor_btrisolve(rb_: *mut THDoubleTensor,
                                    b: *mut THDoubleTensor,
                                    atf: *mut THDoubleTensor,
                                    pivots: *mut THIntTensor);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct THFile__ {
    _unused: [u8; 0],
}
pub type THFile = THFile__;
extern "C" {
    pub fn THFile_isOpened(self_: *mut THFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFile_isQuiet(self_: *mut THFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFile_isReadable(self_: *mut THFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFile_isWritable(self_: *mut THFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFile_isBinary(self_: *mut THFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFile_isAutoSpacing(self_: *mut THFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFile_hasError(self_: *mut THFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFile_binary(self_: *mut THFile);
}
extern "C" {
    pub fn THFile_ascii(self_: *mut THFile);
}
extern "C" {
    pub fn THFile_autoSpacing(self_: *mut THFile);
}
extern "C" {
    pub fn THFile_noAutoSpacing(self_: *mut THFile);
}
extern "C" {
    pub fn THFile_quiet(self_: *mut THFile);
}
extern "C" {
    pub fn THFile_pedantic(self_: *mut THFile);
}
extern "C" {
    pub fn THFile_clearError(self_: *mut THFile);
}
extern "C" {
    pub fn THFile_readByteScalar(self_: *mut THFile)
     -> ::std::os::raw::c_uchar;
}
extern "C" {
    pub fn THFile_readCharScalar(self_: *mut THFile)
     -> ::std::os::raw::c_char;
}
extern "C" {
    pub fn THFile_readShortScalar(self_: *mut THFile)
     -> ::std::os::raw::c_short;
}
extern "C" {
    pub fn THFile_readIntScalar(self_: *mut THFile) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THFile_readLongScalar(self_: *mut THFile)
     -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn THFile_readFloatScalar(self_: *mut THFile) -> f32;
}
extern "C" {
    pub fn THFile_readDoubleScalar(self_: *mut THFile) -> f64;
}
extern "C" {
    pub fn THFile_writeByteScalar(self_: *mut THFile,
                                  scalar: ::std::os::raw::c_uchar);
}
extern "C" {
    pub fn THFile_writeCharScalar(self_: *mut THFile,
                                  scalar: ::std::os::raw::c_char);
}
extern "C" {
    pub fn THFile_writeShortScalar(self_: *mut THFile,
                                   scalar: ::std::os::raw::c_short);
}
extern "C" {
    pub fn THFile_writeIntScalar(self_: *mut THFile,
                                 scalar: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THFile_writeLongScalar(self_: *mut THFile,
                                  scalar: ::std::os::raw::c_long);
}
extern "C" {
    pub fn THFile_writeFloatScalar(self_: *mut THFile, scalar: f32);
}
extern "C" {
    pub fn THFile_writeDoubleScalar(self_: *mut THFile, scalar: f64);
}
extern "C" {
    pub fn THFile_readByte(self_: *mut THFile, storage: *mut THByteStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_readChar(self_: *mut THFile, storage: *mut THCharStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_readShort(self_: *mut THFile, storage: *mut THShortStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_readInt(self_: *mut THFile, storage: *mut THIntStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_readLong(self_: *mut THFile, storage: *mut THLongStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_readFloat(self_: *mut THFile, storage: *mut THFloatStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_readDouble(self_: *mut THFile,
                             storage: *mut THDoubleStorage) -> usize;
}
extern "C" {
    pub fn THFile_writeByte(self_: *mut THFile, storage: *mut THByteStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_writeChar(self_: *mut THFile, storage: *mut THCharStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_writeShort(self_: *mut THFile, storage: *mut THShortStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_writeInt(self_: *mut THFile, storage: *mut THIntStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_writeLong(self_: *mut THFile, storage: *mut THLongStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_writeFloat(self_: *mut THFile, storage: *mut THFloatStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_writeDouble(self_: *mut THFile,
                              storage: *mut THDoubleStorage) -> usize;
}
extern "C" {
    pub fn THFile_readByteRaw(self_: *mut THFile,
                              data: *mut ::std::os::raw::c_uchar, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_readCharRaw(self_: *mut THFile,
                              data: *mut ::std::os::raw::c_char, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_readShortRaw(self_: *mut THFile,
                               data: *mut ::std::os::raw::c_short, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_readIntRaw(self_: *mut THFile,
                             data: *mut ::std::os::raw::c_int, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_readLongRaw(self_: *mut THFile,
                              data: *mut ::std::os::raw::c_long, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_readFloatRaw(self_: *mut THFile, data: *mut f32, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_readDoubleRaw(self_: *mut THFile, data: *mut f64, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_readStringRaw(self_: *mut THFile,
                                format: *const ::std::os::raw::c_char,
                                str_: *mut *mut ::std::os::raw::c_char)
     -> usize;
}
extern "C" {
    pub fn THFile_writeByteRaw(self_: *mut THFile,
                               data: *mut ::std::os::raw::c_uchar, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_writeCharRaw(self_: *mut THFile,
                               data: *mut ::std::os::raw::c_char, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_writeShortRaw(self_: *mut THFile,
                                data: *mut ::std::os::raw::c_short, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_writeIntRaw(self_: *mut THFile,
                              data: *mut ::std::os::raw::c_int, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_writeLongRaw(self_: *mut THFile,
                               data: *mut ::std::os::raw::c_long, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_writeFloatRaw(self_: *mut THFile, data: *mut f32, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_writeDoubleRaw(self_: *mut THFile, data: *mut f64, n: usize)
     -> usize;
}
extern "C" {
    pub fn THFile_writeStringRaw(self_: *mut THFile,
                                 str: *const ::std::os::raw::c_char,
                                 size: usize) -> usize;
}
extern "C" {
    pub fn THFile_readHalfScalar(self_: *mut THFile) -> THHalf;
}
extern "C" {
    pub fn THFile_writeHalfScalar(self_: *mut THFile, scalar: THHalf);
}
extern "C" {
    pub fn THFile_readHalf(self_: *mut THFile, storage: *mut THHalfStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_writeHalf(self_: *mut THFile, storage: *mut THHalfStorage)
     -> usize;
}
extern "C" {
    pub fn THFile_readHalfRaw(self_: *mut THFile, data: *mut THHalf,
                              size: usize) -> usize;
}
extern "C" {
    pub fn THFile_writeHalfRaw(self_: *mut THFile, data: *mut THHalf,
                               size: usize) -> usize;
}
extern "C" {
    pub fn THFile_synchronize(self_: *mut THFile);
}
extern "C" {
    pub fn THFile_seek(self_: *mut THFile, position: usize);
}
extern "C" {
    pub fn THFile_seekEnd(self_: *mut THFile);
}
extern "C" {
    pub fn THFile_position(self_: *mut THFile) -> usize;
}
extern "C" {
    pub fn THFile_close(self_: *mut THFile);
}
extern "C" {
    pub fn THFile_free(self_: *mut THFile);
}
extern "C" {
    pub fn THDiskFile_new(name: *const ::std::os::raw::c_char,
                          mode: *const ::std::os::raw::c_char,
                          isQuiet: ::std::os::raw::c_int) -> *mut THFile;
}
extern "C" {
    pub fn THPipeFile_new(name: *const ::std::os::raw::c_char,
                          mode: *const ::std::os::raw::c_char,
                          isQuiet: ::std::os::raw::c_int) -> *mut THFile;
}
extern "C" {
    pub fn THDiskFile_name(self_: *mut THFile)
     -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn THDiskFile_isLittleEndianCPU() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THDiskFile_isBigEndianCPU() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn THDiskFile_nativeEndianEncoding(self_: *mut THFile);
}
extern "C" {
    pub fn THDiskFile_littleEndianEncoding(self_: *mut THFile);
}
extern "C" {
    pub fn THDiskFile_bigEndianEncoding(self_: *mut THFile);
}
extern "C" {
    pub fn THDiskFile_longSize(self_: *mut THFile,
                               size: ::std::os::raw::c_int);
}
extern "C" {
    pub fn THDiskFile_noBuffer(self_: *mut THFile);
}
extern "C" {
    pub fn THMemoryFile_newWithStorage(storage: *mut THCharStorage,
                                       mode: *const ::std::os::raw::c_char)
     -> *mut THFile;
}
extern "C" {
    pub fn THMemoryFile_new(mode: *const ::std::os::raw::c_char)
     -> *mut THFile;
}
extern "C" {
    pub fn THMemoryFile_storage(self_: *mut THFile) -> *mut THCharStorage;
}
extern "C" {
    pub fn THMemoryFile_longSize(self_: *mut THFile,
                                 size: ::std::os::raw::c_int);
}
#[repr(C)]
#[derive(Copy)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout___va_list_tag() {
    assert_eq!(::std::mem::size_of::<__va_list_tag>() , 24usize , concat ! (
               "Size of: " , stringify ! ( __va_list_tag ) ));
    assert_eq! (::std::mem::align_of::<__va_list_tag>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( __va_list_tag ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . gp_offset as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( gp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . fp_offset as * const
                _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( fp_offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . overflow_arg_area as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( overflow_arg_area ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const __va_list_tag ) ) . reg_save_area as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( __va_list_tag ) , "::"
                , stringify ! ( reg_save_area ) ));
}
impl Clone for __va_list_tag {
    fn clone(&self) -> Self { *self }
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Copy)]
pub struct __locale_data {
    pub _address: u8,
}
impl Clone for __locale_data {
    fn clone(&self) -> Self { *self }
}
